/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * InventorySource
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class InventorySource {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = "";

  /**
   * Gets or Sets source
   */
  @JsonAdapter(SourceEnum.Adapter.class)
  public enum SourceEnum {
    FILE("file"),
    SCM("scm"),
    EC2("ec2"),
    GCE("gce"),
    AZURE_RM("azure_rm"),
    VMWARE("vmware"),
    SATELLITE6("satellite6"),
    OPENSTACK("openstack"),
    RHV("rhv"),
    CONTROLLER("controller"),
    INSIGHTS("insights");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static SourceEnum fromValue(String input) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return SourceEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("source")
  private SourceEnum source = null;

  @SerializedName("source_path")
  private String sourcePath = "";

  @SerializedName("source_vars")
  private String sourceVars = "";

  @SerializedName("credential")
  private Integer credential = null;

  @SerializedName("enabled_var")
  private String enabledVar = "";

  @SerializedName("enabled_value")
  private String enabledValue = "";

  @SerializedName("host_filter")
  private String hostFilter = "";

  @SerializedName("overwrite")
  private Boolean overwrite = false;

  @SerializedName("overwrite_vars")
  private Boolean overwriteVars = false;

  @SerializedName("custom_virtualenv")
  private String customVirtualenv = null;

  @SerializedName("timeout")
  private Integer timeout = null;

  @SerializedName("verbosity")
  private Integer verbosity = null;

  @SerializedName("last_job_run")
  private OffsetDateTime lastJobRun = null;

  @SerializedName("last_job_failed")
  private Boolean lastJobFailed = null;

  @SerializedName("next_job_run")
  private OffsetDateTime nextJobRun = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("new"),
    PENDING("pending"),
    WAITING("waiting"),
    RUNNING("running"),
    SUCCESSFUL("successful"),
    FAILED("failed"),
    ERROR("error"),
    CANCELED("canceled"),
    NEVER_UPDATED("never updated"),
    NONE("none");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("execution_environment")
  private Integer executionEnvironment = null;

  @SerializedName("inventory")
  private Integer inventory = null;

  @SerializedName("update_on_launch")
  private Boolean updateOnLaunch = false;

  @SerializedName("update_cache_timeout")
  private Integer updateCacheTimeout = null;

  @SerializedName("source_project")
  private String sourceProject = null;

  @SerializedName("update_on_project_update")
  private Boolean updateOnProjectUpdate = false;

  @SerializedName("last_update_failed")
  private Boolean lastUpdateFailed = null;

  @SerializedName("last_updated")
  private OffsetDateTime lastUpdated = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public InventorySource related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public InventorySource summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

  public InventorySource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InventorySource description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InventorySource source(SourceEnum source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @Schema(description = "")
  public SourceEnum getSource() {
    return source;
  }

  public void setSource(SourceEnum source) {
    this.source = source;
  }

  public InventorySource sourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
    return this;
  }

   /**
   * Get sourcePath
   * @return sourcePath
  **/
  @Schema(description = "")
  public String getSourcePath() {
    return sourcePath;
  }

  public void setSourcePath(String sourcePath) {
    this.sourcePath = sourcePath;
  }

  public InventorySource sourceVars(String sourceVars) {
    this.sourceVars = sourceVars;
    return this;
  }

   /**
   * Inventory source variables in YAML or JSON format.
   * @return sourceVars
  **/
  @Schema(description = "Inventory source variables in YAML or JSON format.")
  public String getSourceVars() {
    return sourceVars;
  }

  public void setSourceVars(String sourceVars) {
    this.sourceVars = sourceVars;
  }

  public InventorySource credential(Integer credential) {
    this.credential = credential;
    return this;
  }

   /**
   * Cloud credential to use for inventory updates.
   * minimum: 1
   * @return credential
  **/
  @Schema(description = "Cloud credential to use for inventory updates.")
  public Integer getCredential() {
    return credential;
  }

  public void setCredential(Integer credential) {
    this.credential = credential;
  }

  public InventorySource enabledVar(String enabledVar) {
    this.enabledVar = enabledVar;
    return this;
  }

   /**
   * Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as \&quot;foo.bar\&quot;, in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(\&quot;foo\&quot;, {}).get(\&quot;bar\&quot;, default)
   * @return enabledVar
  **/
  @Schema(description = "Retrieve the enabled state from the given dict of host variables. The enabled variable may be specified as \"foo.bar\", in which case the lookup will traverse into nested dicts, equivalent to: from_dict.get(\"foo\", {}).get(\"bar\", default)")
  public String getEnabledVar() {
    return enabledVar;
  }

  public void setEnabledVar(String enabledVar) {
    this.enabledVar = enabledVar;
  }

  public InventorySource enabledValue(String enabledValue) {
    this.enabledValue = enabledValue;
    return this;
  }

   /**
   * Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var&#x3D;\&quot;status.power_state\&quot;and enabled_value&#x3D;\&quot;powered_on\&quot; with host variables:{   \&quot;status\&quot;: {     \&quot;power_state\&quot;: \&quot;powered_on\&quot;,     \&quot;created\&quot;: \&quot;2020-08-04T18:13:04+00:00\&quot;,     \&quot;healthy\&quot;: true    },    \&quot;name\&quot;: \&quot;foobar\&quot;,    \&quot;ip_address\&quot;: \&quot;192.168.2.1\&quot;}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled
   * @return enabledValue
  **/
  @Schema(description = "Only used when enabled_var is set. Value when the host is considered enabled. For example if enabled_var=\"status.power_state\"and enabled_value=\"powered_on\" with host variables:{   \"status\": {     \"power_state\": \"powered_on\",     \"created\": \"2020-08-04T18:13:04+00:00\",     \"healthy\": true    },    \"name\": \"foobar\",    \"ip_address\": \"192.168.2.1\"}The host would be marked enabled. If power_state where any value other than powered_on then the host would be disabled when imported. If the key is not found then the host will be enabled")
  public String getEnabledValue() {
    return enabledValue;
  }

  public void setEnabledValue(String enabledValue) {
    this.enabledValue = enabledValue;
  }

  public InventorySource hostFilter(String hostFilter) {
    this.hostFilter = hostFilter;
    return this;
  }

   /**
   * Regex where only matching hosts will be imported.
   * @return hostFilter
  **/
  @Schema(description = "Regex where only matching hosts will be imported.")
  public String getHostFilter() {
    return hostFilter;
  }

  public void setHostFilter(String hostFilter) {
    this.hostFilter = hostFilter;
  }

  public InventorySource overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

   /**
   * Overwrite local groups and hosts from remote inventory source.
   * @return overwrite
  **/
  @Schema(description = "Overwrite local groups and hosts from remote inventory source.")
  public Boolean isOverwrite() {
    return overwrite;
  }

  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }

  public InventorySource overwriteVars(Boolean overwriteVars) {
    this.overwriteVars = overwriteVars;
    return this;
  }

   /**
   * Overwrite local variables from remote inventory source.
   * @return overwriteVars
  **/
  @Schema(description = "Overwrite local variables from remote inventory source.")
  public Boolean isOverwriteVars() {
    return overwriteVars;
  }

  public void setOverwriteVars(Boolean overwriteVars) {
    this.overwriteVars = overwriteVars;
  }

   /**
   * Local absolute file path containing a custom Python virtualenv to use
   * @return customVirtualenv
  **/
  @Schema(description = "Local absolute file path containing a custom Python virtualenv to use")
  public String getCustomVirtualenv() {
    return customVirtualenv;
  }

  public InventorySource timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * The amount of time (in seconds) to run before the task is canceled.
   * minimum: -2147483648
   * maximum: 2147483647
   * @return timeout
  **/
  @Schema(description = "The amount of time (in seconds) to run before the task is canceled.")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public InventorySource verbosity(Integer verbosity) {
    this.verbosity = verbosity;
    return this;
  }

   /**
   * Get verbosity
   * @return verbosity
  **/
  @Schema(description = "")
  public Integer getVerbosity() {
    return verbosity;
  }

  public void setVerbosity(Integer verbosity) {
    this.verbosity = verbosity;
  }

   /**
   * Get lastJobRun
   * @return lastJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getLastJobRun() {
    return lastJobRun;
  }

   /**
   * Get lastJobFailed
   * @return lastJobFailed
  **/
  @Schema(description = "")
  public Boolean isLastJobFailed() {
    return lastJobFailed;
  }

   /**
   * Get nextJobRun
   * @return nextJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getNextJobRun() {
    return nextJobRun;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public InventorySource executionEnvironment(Integer executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
    return this;
  }

   /**
   * The container image to be used for execution.
   * @return executionEnvironment
  **/
  @Schema(description = "The container image to be used for execution.")
  public Integer getExecutionEnvironment() {
    return executionEnvironment;
  }

  public void setExecutionEnvironment(Integer executionEnvironment) {
    this.executionEnvironment = executionEnvironment;
  }

  public InventorySource inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @Schema(required = true, description = "")
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }

  public InventorySource updateOnLaunch(Boolean updateOnLaunch) {
    this.updateOnLaunch = updateOnLaunch;
    return this;
  }

   /**
   * Get updateOnLaunch
   * @return updateOnLaunch
  **/
  @Schema(description = "")
  public Boolean isUpdateOnLaunch() {
    return updateOnLaunch;
  }

  public void setUpdateOnLaunch(Boolean updateOnLaunch) {
    this.updateOnLaunch = updateOnLaunch;
  }

  public InventorySource updateCacheTimeout(Integer updateCacheTimeout) {
    this.updateCacheTimeout = updateCacheTimeout;
    return this;
  }

   /**
   * Get updateCacheTimeout
   * minimum: 0
   * maximum: 2147483647
   * @return updateCacheTimeout
  **/
  @Schema(description = "")
  public Integer getUpdateCacheTimeout() {
    return updateCacheTimeout;
  }

  public void setUpdateCacheTimeout(Integer updateCacheTimeout) {
    this.updateCacheTimeout = updateCacheTimeout;
  }

  public InventorySource sourceProject(String sourceProject) {
    this.sourceProject = sourceProject;
    return this;
  }

   /**
   * Project containing inventory file used as source.
   * @return sourceProject
  **/
  @Schema(description = "Project containing inventory file used as source.")
  public String getSourceProject() {
    return sourceProject;
  }

  public void setSourceProject(String sourceProject) {
    this.sourceProject = sourceProject;
  }

  public InventorySource updateOnProjectUpdate(Boolean updateOnProjectUpdate) {
    this.updateOnProjectUpdate = updateOnProjectUpdate;
    return this;
  }

   /**
   * Get updateOnProjectUpdate
   * @return updateOnProjectUpdate
  **/
  @Schema(description = "")
  public Boolean isUpdateOnProjectUpdate() {
    return updateOnProjectUpdate;
  }

  public void setUpdateOnProjectUpdate(Boolean updateOnProjectUpdate) {
    this.updateOnProjectUpdate = updateOnProjectUpdate;
  }

   /**
   * Get lastUpdateFailed
   * @return lastUpdateFailed
  **/
  @Schema(description = "")
  public Boolean isLastUpdateFailed() {
    return lastUpdateFailed;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventorySource inventorySource = (InventorySource) o;
    return Objects.equals(this.id, inventorySource.id) &&
        Objects.equals(this.type, inventorySource.type) &&
        Objects.equals(this.url, inventorySource.url) &&
        Objects.equals(this.related, inventorySource.related) &&
        Objects.equals(this.summaryFields, inventorySource.summaryFields) &&
        Objects.equals(this.created, inventorySource.created) &&
        Objects.equals(this.modified, inventorySource.modified) &&
        Objects.equals(this.name, inventorySource.name) &&
        Objects.equals(this.description, inventorySource.description) &&
        Objects.equals(this.source, inventorySource.source) &&
        Objects.equals(this.sourcePath, inventorySource.sourcePath) &&
        Objects.equals(this.sourceVars, inventorySource.sourceVars) &&
        Objects.equals(this.credential, inventorySource.credential) &&
        Objects.equals(this.enabledVar, inventorySource.enabledVar) &&
        Objects.equals(this.enabledValue, inventorySource.enabledValue) &&
        Objects.equals(this.hostFilter, inventorySource.hostFilter) &&
        Objects.equals(this.overwrite, inventorySource.overwrite) &&
        Objects.equals(this.overwriteVars, inventorySource.overwriteVars) &&
        Objects.equals(this.customVirtualenv, inventorySource.customVirtualenv) &&
        Objects.equals(this.timeout, inventorySource.timeout) &&
        Objects.equals(this.verbosity, inventorySource.verbosity) &&
        Objects.equals(this.lastJobRun, inventorySource.lastJobRun) &&
        Objects.equals(this.lastJobFailed, inventorySource.lastJobFailed) &&
        Objects.equals(this.nextJobRun, inventorySource.nextJobRun) &&
        Objects.equals(this.status, inventorySource.status) &&
        Objects.equals(this.executionEnvironment, inventorySource.executionEnvironment) &&
        Objects.equals(this.inventory, inventorySource.inventory) &&
        Objects.equals(this.updateOnLaunch, inventorySource.updateOnLaunch) &&
        Objects.equals(this.updateCacheTimeout, inventorySource.updateCacheTimeout) &&
        Objects.equals(this.sourceProject, inventorySource.sourceProject) &&
        Objects.equals(this.updateOnProjectUpdate, inventorySource.updateOnProjectUpdate) &&
        Objects.equals(this.lastUpdateFailed, inventorySource.lastUpdateFailed) &&
        Objects.equals(this.lastUpdated, inventorySource.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, name, description, source, sourcePath, sourceVars, credential, enabledVar, enabledValue, hostFilter, overwrite, overwriteVars, customVirtualenv, timeout, verbosity, lastJobRun, lastJobFailed, nextJobRun, status, executionEnvironment, inventory, updateOnLaunch, updateCacheTimeout, sourceProject, updateOnProjectUpdate, lastUpdateFailed, lastUpdated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventorySource {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourcePath: ").append(toIndentedString(sourcePath)).append("\n");
    sb.append("    sourceVars: ").append(toIndentedString(sourceVars)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    enabledVar: ").append(toIndentedString(enabledVar)).append("\n");
    sb.append("    enabledValue: ").append(toIndentedString(enabledValue)).append("\n");
    sb.append("    hostFilter: ").append(toIndentedString(hostFilter)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    overwriteVars: ").append(toIndentedString(overwriteVars)).append("\n");
    sb.append("    customVirtualenv: ").append(toIndentedString(customVirtualenv)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("    lastJobRun: ").append(toIndentedString(lastJobRun)).append("\n");
    sb.append("    lastJobFailed: ").append(toIndentedString(lastJobFailed)).append("\n");
    sb.append("    nextJobRun: ").append(toIndentedString(nextJobRun)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    executionEnvironment: ").append(toIndentedString(executionEnvironment)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    updateOnLaunch: ").append(toIndentedString(updateOnLaunch)).append("\n");
    sb.append("    updateCacheTimeout: ").append(toIndentedString(updateCacheTimeout)).append("\n");
    sb.append("    sourceProject: ").append(toIndentedString(sourceProject)).append("\n");
    sb.append("    updateOnProjectUpdate: ").append(toIndentedString(updateOnProjectUpdate)).append("\n");
    sb.append("    lastUpdateFailed: ").append(toIndentedString(lastUpdateFailed)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * WorkflowJobLaunch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class WorkflowJobLaunch {
  @SerializedName("ask_inventory_on_launch")
  private Boolean askInventoryOnLaunch = null;

  @SerializedName("ask_limit_on_launch")
  private Boolean askLimitOnLaunch = false;

  @SerializedName("ask_scm_branch_on_launch")
  private Boolean askScmBranchOnLaunch = false;

  @SerializedName("can_start_without_user_input")
  private Boolean canStartWithoutUserInput = null;

  @SerializedName("defaults")
  private String defaults = null;

  @SerializedName("extra_vars")
  private String extraVars = null;

  @SerializedName("inventory")
  private Integer inventory = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("scm_branch")
  private String scmBranch = null;

  @SerializedName("survey_enabled")
  private String surveyEnabled = null;

  @SerializedName("variables_needed_to_start")
  private String variablesNeededToStart = null;

  @SerializedName("node_templates_missing")
  private String nodeTemplatesMissing = null;

  @SerializedName("node_prompts_rejected")
  private String nodePromptsRejected = null;

  @SerializedName("workflow_job_template_data")
  private String workflowJobTemplateData = null;

  @SerializedName("ask_variables_on_launch")
  private Boolean askVariablesOnLaunch = null;

   /**
   * Get askInventoryOnLaunch
   * @return askInventoryOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskInventoryOnLaunch() {
    return askInventoryOnLaunch;
  }

  public WorkflowJobLaunch askLimitOnLaunch(Boolean askLimitOnLaunch) {
    this.askLimitOnLaunch = askLimitOnLaunch;
    return this;
  }

   /**
   * Get askLimitOnLaunch
   * @return askLimitOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskLimitOnLaunch() {
    return askLimitOnLaunch;
  }

  public void setAskLimitOnLaunch(Boolean askLimitOnLaunch) {
    this.askLimitOnLaunch = askLimitOnLaunch;
  }

  public WorkflowJobLaunch askScmBranchOnLaunch(Boolean askScmBranchOnLaunch) {
    this.askScmBranchOnLaunch = askScmBranchOnLaunch;
    return this;
  }

   /**
   * Get askScmBranchOnLaunch
   * @return askScmBranchOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskScmBranchOnLaunch() {
    return askScmBranchOnLaunch;
  }

  public void setAskScmBranchOnLaunch(Boolean askScmBranchOnLaunch) {
    this.askScmBranchOnLaunch = askScmBranchOnLaunch;
  }

   /**
   * Get canStartWithoutUserInput
   * @return canStartWithoutUserInput
  **/
  @Schema(description = "")
  public Boolean isCanStartWithoutUserInput() {
    return canStartWithoutUserInput;
  }

   /**
   * Get defaults
   * @return defaults
  **/
  @Schema(description = "")
  public String getDefaults() {
    return defaults;
  }

  public WorkflowJobLaunch extraVars(String extraVars) {
    this.extraVars = extraVars;
    return this;
  }

   /**
   * Get extraVars
   * @return extraVars
  **/
  @Schema(description = "")
  public String getExtraVars() {
    return extraVars;
  }

  public void setExtraVars(String extraVars) {
    this.extraVars = extraVars;
  }

  public WorkflowJobLaunch inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @Schema(description = "")
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }

  public WorkflowJobLaunch limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public WorkflowJobLaunch scmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
    return this;
  }

   /**
   * Get scmBranch
   * @return scmBranch
  **/
  @Schema(description = "")
  public String getScmBranch() {
    return scmBranch;
  }

  public void setScmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
  }

   /**
   * Get surveyEnabled
   * @return surveyEnabled
  **/
  @Schema(description = "")
  public String getSurveyEnabled() {
    return surveyEnabled;
  }

   /**
   * Get variablesNeededToStart
   * @return variablesNeededToStart
  **/
  @Schema(description = "")
  public String getVariablesNeededToStart() {
    return variablesNeededToStart;
  }

   /**
   * Get nodeTemplatesMissing
   * @return nodeTemplatesMissing
  **/
  @Schema(description = "")
  public String getNodeTemplatesMissing() {
    return nodeTemplatesMissing;
  }

   /**
   * Get nodePromptsRejected
   * @return nodePromptsRejected
  **/
  @Schema(description = "")
  public String getNodePromptsRejected() {
    return nodePromptsRejected;
  }

   /**
   * Get workflowJobTemplateData
   * @return workflowJobTemplateData
  **/
  @Schema(description = "")
  public String getWorkflowJobTemplateData() {
    return workflowJobTemplateData;
  }

   /**
   * Get askVariablesOnLaunch
   * @return askVariablesOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskVariablesOnLaunch() {
    return askVariablesOnLaunch;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowJobLaunch workflowJobLaunch = (WorkflowJobLaunch) o;
    return Objects.equals(this.askInventoryOnLaunch, workflowJobLaunch.askInventoryOnLaunch) &&
        Objects.equals(this.askLimitOnLaunch, workflowJobLaunch.askLimitOnLaunch) &&
        Objects.equals(this.askScmBranchOnLaunch, workflowJobLaunch.askScmBranchOnLaunch) &&
        Objects.equals(this.canStartWithoutUserInput, workflowJobLaunch.canStartWithoutUserInput) &&
        Objects.equals(this.defaults, workflowJobLaunch.defaults) &&
        Objects.equals(this.extraVars, workflowJobLaunch.extraVars) &&
        Objects.equals(this.inventory, workflowJobLaunch.inventory) &&
        Objects.equals(this.limit, workflowJobLaunch.limit) &&
        Objects.equals(this.scmBranch, workflowJobLaunch.scmBranch) &&
        Objects.equals(this.surveyEnabled, workflowJobLaunch.surveyEnabled) &&
        Objects.equals(this.variablesNeededToStart, workflowJobLaunch.variablesNeededToStart) &&
        Objects.equals(this.nodeTemplatesMissing, workflowJobLaunch.nodeTemplatesMissing) &&
        Objects.equals(this.nodePromptsRejected, workflowJobLaunch.nodePromptsRejected) &&
        Objects.equals(this.workflowJobTemplateData, workflowJobLaunch.workflowJobTemplateData) &&
        Objects.equals(this.askVariablesOnLaunch, workflowJobLaunch.askVariablesOnLaunch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(askInventoryOnLaunch, askLimitOnLaunch, askScmBranchOnLaunch, canStartWithoutUserInput, defaults, extraVars, inventory, limit, scmBranch, surveyEnabled, variablesNeededToStart, nodeTemplatesMissing, nodePromptsRejected, workflowJobTemplateData, askVariablesOnLaunch);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowJobLaunch {\n");
    
    sb.append("    askInventoryOnLaunch: ").append(toIndentedString(askInventoryOnLaunch)).append("\n");
    sb.append("    askLimitOnLaunch: ").append(toIndentedString(askLimitOnLaunch)).append("\n");
    sb.append("    askScmBranchOnLaunch: ").append(toIndentedString(askScmBranchOnLaunch)).append("\n");
    sb.append("    canStartWithoutUserInput: ").append(toIndentedString(canStartWithoutUserInput)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("    extraVars: ").append(toIndentedString(extraVars)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    scmBranch: ").append(toIndentedString(scmBranch)).append("\n");
    sb.append("    surveyEnabled: ").append(toIndentedString(surveyEnabled)).append("\n");
    sb.append("    variablesNeededToStart: ").append(toIndentedString(variablesNeededToStart)).append("\n");
    sb.append("    nodeTemplatesMissing: ").append(toIndentedString(nodeTemplatesMissing)).append("\n");
    sb.append("    nodePromptsRejected: ").append(toIndentedString(nodePromptsRejected)).append("\n");
    sb.append("    workflowJobTemplateData: ").append(toIndentedString(workflowJobTemplateData)).append("\n");
    sb.append("    askVariablesOnLaunch: ").append(toIndentedString(askVariablesOnLaunch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

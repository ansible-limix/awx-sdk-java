/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * JobLaunch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class JobLaunch {
  @SerializedName("can_start_without_user_input")
  private Boolean canStartWithoutUserInput = null;

  @SerializedName("passwords_needed_to_start")
  private String passwordsNeededToStart = null;

  @SerializedName("extra_vars")
  private Object extraVars = null;

  @SerializedName("inventory")
  private Integer inventory = null;

  @SerializedName("scm_branch")
  private String scmBranch = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("job_tags")
  private String jobTags = null;

  @SerializedName("skip_tags")
  private String skipTags = null;

  /**
   * Gets or Sets jobType
   */
  @JsonAdapter(JobTypeEnum.Adapter.class)
  public enum JobTypeEnum {
    RUN("run"),
    CHECK("check");

    private String value;

    JobTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static JobTypeEnum fromValue(String input) {
      for (JobTypeEnum b : JobTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<JobTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public JobTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return JobTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("job_type")
  private JobTypeEnum jobType = null;

  @SerializedName("verbosity")
  private Integer verbosity = null;

  @SerializedName("diff_mode")
  private Boolean diffMode = null;

  @SerializedName("credentials")
  private List<Integer> credentials = null;

  @SerializedName("credential_passwords")
  private String credentialPasswords = null;

  @SerializedName("ask_scm_branch_on_launch")
  private Boolean askScmBranchOnLaunch = null;

  @SerializedName("ask_variables_on_launch")
  private Boolean askVariablesOnLaunch = null;

  @SerializedName("ask_tags_on_launch")
  private Boolean askTagsOnLaunch = null;

  @SerializedName("ask_diff_mode_on_launch")
  private Boolean askDiffModeOnLaunch = null;

  @SerializedName("ask_skip_tags_on_launch")
  private Boolean askSkipTagsOnLaunch = null;

  @SerializedName("ask_job_type_on_launch")
  private Boolean askJobTypeOnLaunch = null;

  @SerializedName("ask_limit_on_launch")
  private Boolean askLimitOnLaunch = null;

  @SerializedName("ask_verbosity_on_launch")
  private Boolean askVerbosityOnLaunch = null;

  @SerializedName("ask_inventory_on_launch")
  private Boolean askInventoryOnLaunch = null;

  @SerializedName("ask_credential_on_launch")
  private Boolean askCredentialOnLaunch = null;

  @SerializedName("survey_enabled")
  private String surveyEnabled = null;

  @SerializedName("variables_needed_to_start")
  private String variablesNeededToStart = null;

  @SerializedName("credential_needed_to_start")
  private String credentialNeededToStart = null;

  @SerializedName("inventory_needed_to_start")
  private String inventoryNeededToStart = null;

  @SerializedName("job_template_data")
  private String jobTemplateData = null;

  @SerializedName("defaults")
  private String defaults = null;

   /**
   * Get canStartWithoutUserInput
   * @return canStartWithoutUserInput
  **/
  @Schema(description = "")
  public Boolean isCanStartWithoutUserInput() {
    return canStartWithoutUserInput;
  }

   /**
   * Get passwordsNeededToStart
   * @return passwordsNeededToStart
  **/
  @Schema(description = "")
  public String getPasswordsNeededToStart() {
    return passwordsNeededToStart;
  }

  public JobLaunch extraVars(Object extraVars) {
    this.extraVars = extraVars;
    return this;
  }

   /**
   * Get extraVars
   * @return extraVars
  **/
  @Schema(description = "")
  public Object getExtraVars() {
    return extraVars;
  }

  public void setExtraVars(Object extraVars) {
    this.extraVars = extraVars;
  }

  public JobLaunch inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Get inventory
   * @return inventory
  **/
  @Schema(description = "")
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }

  public JobLaunch scmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
    return this;
  }

   /**
   * Get scmBranch
   * @return scmBranch
  **/
  @Schema(description = "")
  public String getScmBranch() {
    return scmBranch;
  }

  public void setScmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
  }

  public JobLaunch limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public JobLaunch jobTags(String jobTags) {
    this.jobTags = jobTags;
    return this;
  }

   /**
   * Get jobTags
   * @return jobTags
  **/
  @Schema(description = "")
  public String getJobTags() {
    return jobTags;
  }

  public void setJobTags(String jobTags) {
    this.jobTags = jobTags;
  }

  public JobLaunch skipTags(String skipTags) {
    this.skipTags = skipTags;
    return this;
  }

   /**
   * Get skipTags
   * @return skipTags
  **/
  @Schema(description = "")
  public String getSkipTags() {
    return skipTags;
  }

  public void setSkipTags(String skipTags) {
    this.skipTags = skipTags;
  }

  public JobLaunch jobType(JobTypeEnum jobType) {
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @Schema(description = "")
  public JobTypeEnum getJobType() {
    return jobType;
  }

  public void setJobType(JobTypeEnum jobType) {
    this.jobType = jobType;
  }

  public JobLaunch verbosity(Integer verbosity) {
    this.verbosity = verbosity;
    return this;
  }

   /**
   * Get verbosity
   * @return verbosity
  **/
  @Schema(description = "")
  public Integer getVerbosity() {
    return verbosity;
  }

  public void setVerbosity(Integer verbosity) {
    this.verbosity = verbosity;
  }

  public JobLaunch diffMode(Boolean diffMode) {
    this.diffMode = diffMode;
    return this;
  }

   /**
   * Get diffMode
   * @return diffMode
  **/
  @Schema(description = "")
  public Boolean isDiffMode() {
    return diffMode;
  }

  public void setDiffMode(Boolean diffMode) {
    this.diffMode = diffMode;
  }

  public JobLaunch credentials(List<Integer> credentials) {
    this.credentials = credentials;
    return this;
  }

  public JobLaunch addCredentialsItem(Integer credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new ArrayList<Integer>();
    }
    this.credentials.add(credentialsItem);
    return this;
  }

   /**
   * Get credentials
   * @return credentials
  **/
  @Schema(description = "")
  public List<Integer> getCredentials() {
    return credentials;
  }

  public void setCredentials(List<Integer> credentials) {
    this.credentials = credentials;
  }

  public JobLaunch credentialPasswords(String credentialPasswords) {
    this.credentialPasswords = credentialPasswords;
    return this;
  }

   /**
   * Get credentialPasswords
   * @return credentialPasswords
  **/
  @Schema(description = "")
  public String getCredentialPasswords() {
    return credentialPasswords;
  }

  public void setCredentialPasswords(String credentialPasswords) {
    this.credentialPasswords = credentialPasswords;
  }

   /**
   * Get askScmBranchOnLaunch
   * @return askScmBranchOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskScmBranchOnLaunch() {
    return askScmBranchOnLaunch;
  }

   /**
   * Get askVariablesOnLaunch
   * @return askVariablesOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskVariablesOnLaunch() {
    return askVariablesOnLaunch;
  }

   /**
   * Get askTagsOnLaunch
   * @return askTagsOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskTagsOnLaunch() {
    return askTagsOnLaunch;
  }

   /**
   * Get askDiffModeOnLaunch
   * @return askDiffModeOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskDiffModeOnLaunch() {
    return askDiffModeOnLaunch;
  }

   /**
   * Get askSkipTagsOnLaunch
   * @return askSkipTagsOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskSkipTagsOnLaunch() {
    return askSkipTagsOnLaunch;
  }

   /**
   * Get askJobTypeOnLaunch
   * @return askJobTypeOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskJobTypeOnLaunch() {
    return askJobTypeOnLaunch;
  }

   /**
   * Get askLimitOnLaunch
   * @return askLimitOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskLimitOnLaunch() {
    return askLimitOnLaunch;
  }

   /**
   * Get askVerbosityOnLaunch
   * @return askVerbosityOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskVerbosityOnLaunch() {
    return askVerbosityOnLaunch;
  }

   /**
   * Get askInventoryOnLaunch
   * @return askInventoryOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskInventoryOnLaunch() {
    return askInventoryOnLaunch;
  }

   /**
   * Get askCredentialOnLaunch
   * @return askCredentialOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskCredentialOnLaunch() {
    return askCredentialOnLaunch;
  }

   /**
   * Get surveyEnabled
   * @return surveyEnabled
  **/
  @Schema(description = "")
  public String getSurveyEnabled() {
    return surveyEnabled;
  }

   /**
   * Get variablesNeededToStart
   * @return variablesNeededToStart
  **/
  @Schema(description = "")
  public String getVariablesNeededToStart() {
    return variablesNeededToStart;
  }

   /**
   * Get credentialNeededToStart
   * @return credentialNeededToStart
  **/
  @Schema(description = "")
  public String getCredentialNeededToStart() {
    return credentialNeededToStart;
  }

   /**
   * Get inventoryNeededToStart
   * @return inventoryNeededToStart
  **/
  @Schema(description = "")
  public String getInventoryNeededToStart() {
    return inventoryNeededToStart;
  }

   /**
   * Get jobTemplateData
   * @return jobTemplateData
  **/
  @Schema(description = "")
  public String getJobTemplateData() {
    return jobTemplateData;
  }

   /**
   * Get defaults
   * @return defaults
  **/
  @Schema(description = "")
  public String getDefaults() {
    return defaults;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobLaunch jobLaunch = (JobLaunch) o;
    return Objects.equals(this.canStartWithoutUserInput, jobLaunch.canStartWithoutUserInput) &&
        Objects.equals(this.passwordsNeededToStart, jobLaunch.passwordsNeededToStart) &&
        Objects.equals(this.extraVars, jobLaunch.extraVars) &&
        Objects.equals(this.inventory, jobLaunch.inventory) &&
        Objects.equals(this.scmBranch, jobLaunch.scmBranch) &&
        Objects.equals(this.limit, jobLaunch.limit) &&
        Objects.equals(this.jobTags, jobLaunch.jobTags) &&
        Objects.equals(this.skipTags, jobLaunch.skipTags) &&
        Objects.equals(this.jobType, jobLaunch.jobType) &&
        Objects.equals(this.verbosity, jobLaunch.verbosity) &&
        Objects.equals(this.diffMode, jobLaunch.diffMode) &&
        Objects.equals(this.credentials, jobLaunch.credentials) &&
        Objects.equals(this.credentialPasswords, jobLaunch.credentialPasswords) &&
        Objects.equals(this.askScmBranchOnLaunch, jobLaunch.askScmBranchOnLaunch) &&
        Objects.equals(this.askVariablesOnLaunch, jobLaunch.askVariablesOnLaunch) &&
        Objects.equals(this.askTagsOnLaunch, jobLaunch.askTagsOnLaunch) &&
        Objects.equals(this.askDiffModeOnLaunch, jobLaunch.askDiffModeOnLaunch) &&
        Objects.equals(this.askSkipTagsOnLaunch, jobLaunch.askSkipTagsOnLaunch) &&
        Objects.equals(this.askJobTypeOnLaunch, jobLaunch.askJobTypeOnLaunch) &&
        Objects.equals(this.askLimitOnLaunch, jobLaunch.askLimitOnLaunch) &&
        Objects.equals(this.askVerbosityOnLaunch, jobLaunch.askVerbosityOnLaunch) &&
        Objects.equals(this.askInventoryOnLaunch, jobLaunch.askInventoryOnLaunch) &&
        Objects.equals(this.askCredentialOnLaunch, jobLaunch.askCredentialOnLaunch) &&
        Objects.equals(this.surveyEnabled, jobLaunch.surveyEnabled) &&
        Objects.equals(this.variablesNeededToStart, jobLaunch.variablesNeededToStart) &&
        Objects.equals(this.credentialNeededToStart, jobLaunch.credentialNeededToStart) &&
        Objects.equals(this.inventoryNeededToStart, jobLaunch.inventoryNeededToStart) &&
        Objects.equals(this.jobTemplateData, jobLaunch.jobTemplateData) &&
        Objects.equals(this.defaults, jobLaunch.defaults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canStartWithoutUserInput, passwordsNeededToStart, extraVars, inventory, scmBranch, limit, jobTags, skipTags, jobType, verbosity, diffMode, credentials, credentialPasswords, askScmBranchOnLaunch, askVariablesOnLaunch, askTagsOnLaunch, askDiffModeOnLaunch, askSkipTagsOnLaunch, askJobTypeOnLaunch, askLimitOnLaunch, askVerbosityOnLaunch, askInventoryOnLaunch, askCredentialOnLaunch, surveyEnabled, variablesNeededToStart, credentialNeededToStart, inventoryNeededToStart, jobTemplateData, defaults);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobLaunch {\n");
    
    sb.append("    canStartWithoutUserInput: ").append(toIndentedString(canStartWithoutUserInput)).append("\n");
    sb.append("    passwordsNeededToStart: ").append(toIndentedString(passwordsNeededToStart)).append("\n");
    sb.append("    extraVars: ").append(toIndentedString(extraVars)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    scmBranch: ").append(toIndentedString(scmBranch)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    jobTags: ").append(toIndentedString(jobTags)).append("\n");
    sb.append("    skipTags: ").append(toIndentedString(skipTags)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("    diffMode: ").append(toIndentedString(diffMode)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    credentialPasswords: ").append(toIndentedString(credentialPasswords)).append("\n");
    sb.append("    askScmBranchOnLaunch: ").append(toIndentedString(askScmBranchOnLaunch)).append("\n");
    sb.append("    askVariablesOnLaunch: ").append(toIndentedString(askVariablesOnLaunch)).append("\n");
    sb.append("    askTagsOnLaunch: ").append(toIndentedString(askTagsOnLaunch)).append("\n");
    sb.append("    askDiffModeOnLaunch: ").append(toIndentedString(askDiffModeOnLaunch)).append("\n");
    sb.append("    askSkipTagsOnLaunch: ").append(toIndentedString(askSkipTagsOnLaunch)).append("\n");
    sb.append("    askJobTypeOnLaunch: ").append(toIndentedString(askJobTypeOnLaunch)).append("\n");
    sb.append("    askLimitOnLaunch: ").append(toIndentedString(askLimitOnLaunch)).append("\n");
    sb.append("    askVerbosityOnLaunch: ").append(toIndentedString(askVerbosityOnLaunch)).append("\n");
    sb.append("    askInventoryOnLaunch: ").append(toIndentedString(askInventoryOnLaunch)).append("\n");
    sb.append("    askCredentialOnLaunch: ").append(toIndentedString(askCredentialOnLaunch)).append("\n");
    sb.append("    surveyEnabled: ").append(toIndentedString(surveyEnabled)).append("\n");
    sb.append("    variablesNeededToStart: ").append(toIndentedString(variablesNeededToStart)).append("\n");
    sb.append("    credentialNeededToStart: ").append(toIndentedString(credentialNeededToStart)).append("\n");
    sb.append("    inventoryNeededToStart: ").append(toIndentedString(inventoryNeededToStart)).append("\n");
    sb.append("    jobTemplateData: ").append(toIndentedString(jobTemplateData)).append("\n");
    sb.append("    defaults: ").append(toIndentedString(defaults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

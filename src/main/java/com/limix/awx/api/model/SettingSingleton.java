/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * SettingSingleton
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class SettingSingleton {
  @SerializedName("ACTIVITY_STREAM_ENABLED")
  private Boolean ACTIVITY_STREAM_ENABLED = true;

  @SerializedName("ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC")
  private Boolean ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC = false;

  @SerializedName("ORG_ADMINS_CAN_SEE_ALL_USERS")
  private Boolean ORG_ADMINS_CAN_SEE_ALL_USERS = true;

  @SerializedName("MANAGE_ORGANIZATION_AUTH")
  private Boolean MANAGE_ORGANIZATION_AUTH = true;

  @SerializedName("TOWER_URL_BASE")
  private String TOWER_URL_BASE = "https://towerhost";

  @SerializedName("REMOTE_HOST_HEADERS")
  private List<String> REMOTE_HOST_HEADERS = new ArrayList<String>();

  @SerializedName("PROXY_IP_ALLOWED_LIST")
  private List<String> PROXY_IP_ALLOWED_LIST = new ArrayList<String>();

  @SerializedName("LICENSE")
  private Map<String, String> LICENSE = null;

  @SerializedName("REDHAT_USERNAME")
  private String REDHAT_USERNAME = "";

  @SerializedName("REDHAT_PASSWORD")
  private String REDHAT_PASSWORD = "";

  @SerializedName("SUBSCRIPTIONS_USERNAME")
  private String SUBSCRIPTIONS_USERNAME = "";

  @SerializedName("SUBSCRIPTIONS_PASSWORD")
  private String SUBSCRIPTIONS_PASSWORD = "";

  @SerializedName("AUTOMATION_ANALYTICS_URL")
  private String AUTOMATION_ANALYTICS_URL = "https://example.com";

  @SerializedName("INSTALL_UUID")
  private String INSTALL_UUID = "00000000-0000-0000-0000-000000000000";

  @SerializedName("DEFAULT_CONTROL_PLANE_QUEUE_NAME")
  private String DEFAULT_CONTROL_PLANE_QUEUE_NAME = "controlplane";

  @SerializedName("DEFAULT_EXECUTION_QUEUE_NAME")
  private String DEFAULT_EXECUTION_QUEUE_NAME = "default";

  @SerializedName("DEFAULT_EXECUTION_ENVIRONMENT")
  private Integer DEFAULT_EXECUTION_ENVIRONMENT = null;

  @SerializedName("CUSTOM_VENV_PATHS")
  private List<String> CUSTOM_VENV_PATHS = null;

  @SerializedName("AD_HOC_COMMANDS")
  private List<String> AD_HOC_COMMANDS = null;

  /**
   * Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to \&quot;template\&quot; or \&quot;never\&quot;.
   */
  @JsonAdapter(ALLOWJINJAINEXTRAVARSEnum.Adapter.class)
  public enum ALLOWJINJAINEXTRAVARSEnum {
    ALWAYS("always"),
    NEVER("never"),
    TEMPLATE("template");

    private String value;

    ALLOWJINJAINEXTRAVARSEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ALLOWJINJAINEXTRAVARSEnum fromValue(String input) {
      for (ALLOWJINJAINEXTRAVARSEnum b : ALLOWJINJAINEXTRAVARSEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ALLOWJINJAINEXTRAVARSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ALLOWJINJAINEXTRAVARSEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ALLOWJINJAINEXTRAVARSEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ALLOWJINJAINEXTRAVARSEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ALLOW_JINJA_IN_EXTRA_VARS")
  private ALLOWJINJAINEXTRAVARSEnum ALLOW_JINJA_IN_EXTRA_VARS = ALLOWJINJAINEXTRAVARSEnum.TEMPLATE;

  @SerializedName("AWX_ISOLATION_BASE_PATH")
  private String AWX_ISOLATION_BASE_PATH = "/tmp";

  @SerializedName("AWX_ISOLATION_SHOW_PATHS")
  private List<String> AWX_ISOLATION_SHOW_PATHS = null;

  @SerializedName("AWX_TASK_ENV")
  private Map<String, String> AWX_TASK_ENV = null;

  @SerializedName("INSIGHTS_TRACKING_STATE")
  private Boolean INSIGHTS_TRACKING_STATE = false;

  @SerializedName("PROJECT_UPDATE_VVV")
  private Boolean PROJECT_UPDATE_VVV = false;

  @SerializedName("AWX_ROLES_ENABLED")
  private Boolean AWX_ROLES_ENABLED = true;

  @SerializedName("AWX_COLLECTIONS_ENABLED")
  private Boolean AWX_COLLECTIONS_ENABLED = true;

  @SerializedName("AWX_SHOW_PLAYBOOK_LINKS")
  private Boolean AWX_SHOW_PLAYBOOK_LINKS = false;

  @SerializedName("AWX_MOUNT_ISOLATED_PATHS_ON_K8S")
  private Boolean awXMOUNTISOLATEDPATHSONK8S = false;

  @SerializedName("GALAXY_IGNORE_CERTS")
  private Boolean GALAXY_IGNORE_CERTS = false;

  @SerializedName("STDOUT_MAX_BYTES_DISPLAY")
  private Integer STDOUT_MAX_BYTES_DISPLAY = null;

  @SerializedName("EVENT_STDOUT_MAX_BYTES_DISPLAY")
  private Integer EVENT_STDOUT_MAX_BYTES_DISPLAY = null;

  @SerializedName("MAX_WEBSOCKET_EVENT_RATE")
  private Integer MAX_WEBSOCKET_EVENT_RATE = null;

  @SerializedName("SCHEDULE_MAX_JOBS")
  private Integer SCHEDULE_MAX_JOBS = null;

  @SerializedName("AWX_ANSIBLE_CALLBACK_PLUGINS")
  private List<String> AWX_ANSIBLE_CALLBACK_PLUGINS = null;

  @SerializedName("DEFAULT_JOB_TIMEOUT")
  private Integer DEFAULT_JOB_TIMEOUT = null;

  @SerializedName("DEFAULT_JOB_IDLE_TIMEOUT")
  private Integer DEFAULT_JOB_IDLE_TIMEOUT = null;

  @SerializedName("DEFAULT_INVENTORY_UPDATE_TIMEOUT")
  private Integer DEFAULT_INVENTORY_UPDATE_TIMEOUT = null;

  @SerializedName("DEFAULT_PROJECT_UPDATE_TIMEOUT")
  private Integer DEFAULT_PROJECT_UPDATE_TIMEOUT = null;

  @SerializedName("ANSIBLE_FACT_CACHE_TIMEOUT")
  private Integer ANSIBLE_FACT_CACHE_TIMEOUT = null;

  @SerializedName("MAX_FORKS")
  private Integer MAX_FORKS = null;

  @SerializedName("LOG_AGGREGATOR_HOST")
  private String LOG_AGGREGATOR_HOST = null;

  @SerializedName("LOG_AGGREGATOR_PORT")
  private Integer LOG_AGGREGATOR_PORT = null;

  /**
   * Format messages for the chosen log aggregator.
   */
  @JsonAdapter(LOGAGGREGATORTYPEEnum.Adapter.class)
  public enum LOGAGGREGATORTYPEEnum {
    LOGSTASH("logstash"),
    SPLUNK("splunk"),
    LOGGLY("loggly"),
    SUMOLOGIC("sumologic"),
    OTHER("other");

    private String value;

    LOGAGGREGATORTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LOGAGGREGATORTYPEEnum fromValue(String input) {
      for (LOGAGGREGATORTYPEEnum b : LOGAGGREGATORTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LOGAGGREGATORTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LOGAGGREGATORTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LOGAGGREGATORTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LOGAGGREGATORTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("LOG_AGGREGATOR_TYPE")
  private LOGAGGREGATORTYPEEnum LOG_AGGREGATOR_TYPE = null;

  @SerializedName("LOG_AGGREGATOR_USERNAME")
  private String LOG_AGGREGATOR_USERNAME = "";

  @SerializedName("LOG_AGGREGATOR_PASSWORD")
  private String LOG_AGGREGATOR_PASSWORD = "";

  @SerializedName("LOG_AGGREGATOR_LOGGERS")
  private List<String> LOG_AGGREGATOR_LOGGERS = null;

  @SerializedName("LOG_AGGREGATOR_INDIVIDUAL_FACTS")
  private Boolean LOG_AGGREGATOR_INDIVIDUAL_FACTS = false;

  @SerializedName("LOG_AGGREGATOR_ENABLED")
  private Boolean LOG_AGGREGATOR_ENABLED = false;

  @SerializedName("LOG_AGGREGATOR_TOWER_UUID")
  private String LOG_AGGREGATOR_TOWER_UUID = "";

  /**
   * Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.
   */
  @JsonAdapter(LOGAGGREGATORPROTOCOLEnum.Adapter.class)
  public enum LOGAGGREGATORPROTOCOLEnum {
    HTTPS("https"),
    TCP("tcp"),
    UDP("udp");

    private String value;

    LOGAGGREGATORPROTOCOLEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LOGAGGREGATORPROTOCOLEnum fromValue(String input) {
      for (LOGAGGREGATORPROTOCOLEnum b : LOGAGGREGATORPROTOCOLEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LOGAGGREGATORPROTOCOLEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LOGAGGREGATORPROTOCOLEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LOGAGGREGATORPROTOCOLEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LOGAGGREGATORPROTOCOLEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("LOG_AGGREGATOR_PROTOCOL")
  private LOGAGGREGATORPROTOCOLEnum LOG_AGGREGATOR_PROTOCOL = LOGAGGREGATORPROTOCOLEnum.HTTPS;

  @SerializedName("LOG_AGGREGATOR_TCP_TIMEOUT")
  private Integer LOG_AGGREGATOR_TCP_TIMEOUT = null;

  @SerializedName("LOG_AGGREGATOR_VERIFY_CERT")
  private Boolean LOG_AGGREGATOR_VERIFY_CERT = true;

  /**
   * Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)
   */
  @JsonAdapter(LOGAGGREGATORLEVELEnum.Adapter.class)
  public enum LOGAGGREGATORLEVELEnum {
    DEBUG("DEBUG"),
    INFO("INFO"),
    WARNING("WARNING"),
    ERROR("ERROR"),
    CRITICAL("CRITICAL");

    private String value;

    LOGAGGREGATORLEVELEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LOGAGGREGATORLEVELEnum fromValue(String input) {
      for (LOGAGGREGATORLEVELEnum b : LOGAGGREGATORLEVELEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LOGAGGREGATORLEVELEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LOGAGGREGATORLEVELEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LOGAGGREGATORLEVELEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LOGAGGREGATORLEVELEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("LOG_AGGREGATOR_LEVEL")
  private LOGAGGREGATORLEVELEnum LOG_AGGREGATOR_LEVEL = LOGAGGREGATORLEVELEnum.INFO;

  @SerializedName("LOG_AGGREGATOR_MAX_DISK_USAGE_GB")
  private Integer LOG_AGGREGATOR_MAX_DISK_USAGE_GB = null;

  @SerializedName("LOG_AGGREGATOR_MAX_DISK_USAGE_PATH")
  private String LOG_AGGREGATOR_MAX_DISK_USAGE_PATH = "/var/lib/awx";

  @SerializedName("LOG_AGGREGATOR_RSYSLOGD_DEBUG")
  private Boolean LOG_AGGREGATOR_RSYSLOGD_DEBUG = false;

  @SerializedName("API_400_ERROR_LOG_FORMAT")
  private String apI400ERRORLOGFORMAT = "status {status_code} received by user {user_name} attempting to access {url_path} from {remote_addr}";

  @SerializedName("AUTOMATION_ANALYTICS_LAST_GATHER")
  private OffsetDateTime AUTOMATION_ANALYTICS_LAST_GATHER = null;

  @SerializedName("AUTOMATION_ANALYTICS_LAST_ENTRIES")
  private String AUTOMATION_ANALYTICS_LAST_ENTRIES = "";

  @SerializedName("AUTOMATION_ANALYTICS_GATHER_INTERVAL")
  private Integer AUTOMATION_ANALYTICS_GATHER_INTERVAL = null;

  @SerializedName("IS_K8S")
  private Boolean isK8S = false;

  @SerializedName("SESSION_COOKIE_AGE")
  private Integer SESSION_COOKIE_AGE = null;

  @SerializedName("SESSIONS_PER_USER")
  private Integer SESSIONS_PER_USER = null;

  @SerializedName("DISABLE_LOCAL_AUTH")
  private Boolean DISABLE_LOCAL_AUTH = false;

  @SerializedName("AUTH_BASIC_ENABLED")
  private Boolean AUTH_BASIC_ENABLED = true;

  @SerializedName("OAUTH2_PROVIDER")
  private Map<String, Integer> oaUTH2PROVIDER = null;

  @SerializedName("ALLOW_OAUTH2_FOR_EXTERNAL_USERS")
  private Boolean alLOWOAUTH2FOREXTERNALUSERS = false;

  @SerializedName("LOGIN_REDIRECT_OVERRIDE")
  private String LOGIN_REDIRECT_OVERRIDE = "";

  /**
   * Enable or Disable User Analytics Tracking.
   */
  @JsonAdapter(PENDOTRACKINGSTATEEnum.Adapter.class)
  public enum PENDOTRACKINGSTATEEnum {
    OFF("off"),
    ANONYMOUS("anonymous"),
    DETAILED("detailed");

    private String value;

    PENDOTRACKINGSTATEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PENDOTRACKINGSTATEEnum fromValue(String input) {
      for (PENDOTRACKINGSTATEEnum b : PENDOTRACKINGSTATEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PENDOTRACKINGSTATEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PENDOTRACKINGSTATEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public PENDOTRACKINGSTATEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return PENDOTRACKINGSTATEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("PENDO_TRACKING_STATE")
  private PENDOTRACKINGSTATEEnum PENDO_TRACKING_STATE = PENDOTRACKINGSTATEEnum.OFF;

  @SerializedName("CUSTOM_LOGIN_INFO")
  private String CUSTOM_LOGIN_INFO = "";

  @SerializedName("CUSTOM_LOGO")
  private String CUSTOM_LOGO = "";

  @SerializedName("MAX_UI_JOB_EVENTS")
  private Integer MAX_UI_JOB_EVENTS = null;

  @SerializedName("UI_LIVE_UPDATES_ENABLED")
  private Boolean UI_LIVE_UPDATES_ENABLED = true;

  @SerializedName("AUTHENTICATION_BACKENDS")
  private List<String> AUTHENTICATION_BACKENDS = null;

  @SerializedName("SOCIAL_AUTH_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_USER_FIELDS")
  private List<String> SOCIAL_AUTH_USER_FIELDS = null;

  @SerializedName("AUTH_LDAP_SERVER_URI")
  private String AUTH_LDAP_SERVER_URI = "";

  @SerializedName("AUTH_LDAP_BIND_DN")
  private String AUTH_LDAP_BIND_DN = "";

  @SerializedName("AUTH_LDAP_BIND_PASSWORD")
  private String AUTH_LDAP_BIND_PASSWORD = "";

  @SerializedName("AUTH_LDAP_START_TLS")
  private Boolean AUTH_LDAP_START_TLS = false;

  @SerializedName("AUTH_LDAP_CONNECTION_OPTIONS")
  private Map<String, String> AUTH_LDAP_CONNECTION_OPTIONS = null;

  @SerializedName("AUTH_LDAP_USER_SEARCH")
  private List<String> AUTH_LDAP_USER_SEARCH = null;

  @SerializedName("AUTH_LDAP_USER_DN_TEMPLATE")
  private String AUTH_LDAP_USER_DN_TEMPLATE = null;

  @SerializedName("AUTH_LDAP_USER_ATTR_MAP")
  private Map<String, String> AUTH_LDAP_USER_ATTR_MAP = null;

  @SerializedName("AUTH_LDAP_GROUP_SEARCH")
  private List<String> AUTH_LDAP_GROUP_SEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AUTHLDAPGROUPTYPEEnum.Adapter.class)
  public enum AUTHLDAPGROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AUTHLDAPGROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AUTHLDAPGROUPTYPEEnum fromValue(String input) {
      for (AUTHLDAPGROUPTYPEEnum b : AUTHLDAPGROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AUTHLDAPGROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AUTHLDAPGROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AUTHLDAPGROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AUTHLDAPGROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_GROUP_TYPE")
  private AUTHLDAPGROUPTYPEEnum AUTH_LDAP_GROUP_TYPE = AUTHLDAPGROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_GROUP_TYPE_PARAMS")
  private Map<String, String> AUTH_LDAP_GROUP_TYPE_PARAMS = null;

  @SerializedName("AUTH_LDAP_REQUIRE_GROUP")
  private String AUTH_LDAP_REQUIRE_GROUP = null;

  @SerializedName("AUTH_LDAP_DENY_GROUP")
  private String AUTH_LDAP_DENY_GROUP = null;

  @SerializedName("AUTH_LDAP_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> AUTH_LDAP_USER_FLAGS_BY_GROUP = null;

  @SerializedName("AUTH_LDAP_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> AUTH_LDAP_ORGANIZATION_MAP = null;

  @SerializedName("AUTH_LDAP_TEAM_MAP")
  private Map<String, Map<String, String>> AUTH_LDAP_TEAM_MAP = null;

  @SerializedName("AUTH_LDAP_1_SERVER_URI")
  private String auTHLDAP1SERVERURI = "";

  @SerializedName("AUTH_LDAP_1_BIND_DN")
  private String auTHLDAP1BINDDN = "";

  @SerializedName("AUTH_LDAP_1_BIND_PASSWORD")
  private String auTHLDAP1BINDPASSWORD = "";

  @SerializedName("AUTH_LDAP_1_START_TLS")
  private Boolean auTHLDAP1STARTTLS = false;

  @SerializedName("AUTH_LDAP_1_CONNECTION_OPTIONS")
  private Map<String, String> auTHLDAP1CONNECTIONOPTIONS = null;

  @SerializedName("AUTH_LDAP_1_USER_SEARCH")
  private List<String> auTHLDAP1USERSEARCH = null;

  @SerializedName("AUTH_LDAP_1_USER_DN_TEMPLATE")
  private String auTHLDAP1USERDNTEMPLATE = null;

  @SerializedName("AUTH_LDAP_1_USER_ATTR_MAP")
  private Map<String, String> auTHLDAP1USERATTRMAP = null;

  @SerializedName("AUTH_LDAP_1_GROUP_SEARCH")
  private List<String> auTHLDAP1GROUPSEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AuTHLDAP1GROUPTYPEEnum.Adapter.class)
  public enum AuTHLDAP1GROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AuTHLDAP1GROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuTHLDAP1GROUPTYPEEnum fromValue(String input) {
      for (AuTHLDAP1GROUPTYPEEnum b : AuTHLDAP1GROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuTHLDAP1GROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuTHLDAP1GROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuTHLDAP1GROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuTHLDAP1GROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_1_GROUP_TYPE")
  private AuTHLDAP1GROUPTYPEEnum auTHLDAP1GROUPTYPE = AuTHLDAP1GROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_1_GROUP_TYPE_PARAMS")
  private Map<String, String> auTHLDAP1GROUPTYPEPARAMS = null;

  @SerializedName("AUTH_LDAP_1_REQUIRE_GROUP")
  private String auTHLDAP1REQUIREGROUP = null;

  @SerializedName("AUTH_LDAP_1_DENY_GROUP")
  private String auTHLDAP1DENYGROUP = null;

  @SerializedName("AUTH_LDAP_1_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> auTHLDAP1USERFLAGSBYGROUP = null;

  @SerializedName("AUTH_LDAP_1_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> auTHLDAP1ORGANIZATIONMAP = null;

  @SerializedName("AUTH_LDAP_1_TEAM_MAP")
  private Map<String, Map<String, String>> auTHLDAP1TEAMMAP = null;

  @SerializedName("AUTH_LDAP_2_SERVER_URI")
  private String auTHLDAP2SERVERURI = "";

  @SerializedName("AUTH_LDAP_2_BIND_DN")
  private String auTHLDAP2BINDDN = "";

  @SerializedName("AUTH_LDAP_2_BIND_PASSWORD")
  private String auTHLDAP2BINDPASSWORD = "";

  @SerializedName("AUTH_LDAP_2_START_TLS")
  private Boolean auTHLDAP2STARTTLS = false;

  @SerializedName("AUTH_LDAP_2_CONNECTION_OPTIONS")
  private Map<String, String> auTHLDAP2CONNECTIONOPTIONS = null;

  @SerializedName("AUTH_LDAP_2_USER_SEARCH")
  private List<String> auTHLDAP2USERSEARCH = null;

  @SerializedName("AUTH_LDAP_2_USER_DN_TEMPLATE")
  private String auTHLDAP2USERDNTEMPLATE = null;

  @SerializedName("AUTH_LDAP_2_USER_ATTR_MAP")
  private Map<String, String> auTHLDAP2USERATTRMAP = null;

  @SerializedName("AUTH_LDAP_2_GROUP_SEARCH")
  private List<String> auTHLDAP2GROUPSEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AuTHLDAP2GROUPTYPEEnum.Adapter.class)
  public enum AuTHLDAP2GROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AuTHLDAP2GROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuTHLDAP2GROUPTYPEEnum fromValue(String input) {
      for (AuTHLDAP2GROUPTYPEEnum b : AuTHLDAP2GROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuTHLDAP2GROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuTHLDAP2GROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuTHLDAP2GROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuTHLDAP2GROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_2_GROUP_TYPE")
  private AuTHLDAP2GROUPTYPEEnum auTHLDAP2GROUPTYPE = AuTHLDAP2GROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_2_GROUP_TYPE_PARAMS")
  private Map<String, String> auTHLDAP2GROUPTYPEPARAMS = null;

  @SerializedName("AUTH_LDAP_2_REQUIRE_GROUP")
  private String auTHLDAP2REQUIREGROUP = null;

  @SerializedName("AUTH_LDAP_2_DENY_GROUP")
  private String auTHLDAP2DENYGROUP = null;

  @SerializedName("AUTH_LDAP_2_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> auTHLDAP2USERFLAGSBYGROUP = null;

  @SerializedName("AUTH_LDAP_2_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> auTHLDAP2ORGANIZATIONMAP = null;

  @SerializedName("AUTH_LDAP_2_TEAM_MAP")
  private Map<String, Map<String, String>> auTHLDAP2TEAMMAP = null;

  @SerializedName("AUTH_LDAP_3_SERVER_URI")
  private String auTHLDAP3SERVERURI = "";

  @SerializedName("AUTH_LDAP_3_BIND_DN")
  private String auTHLDAP3BINDDN = "";

  @SerializedName("AUTH_LDAP_3_BIND_PASSWORD")
  private String auTHLDAP3BINDPASSWORD = "";

  @SerializedName("AUTH_LDAP_3_START_TLS")
  private Boolean auTHLDAP3STARTTLS = false;

  @SerializedName("AUTH_LDAP_3_CONNECTION_OPTIONS")
  private Map<String, String> auTHLDAP3CONNECTIONOPTIONS = null;

  @SerializedName("AUTH_LDAP_3_USER_SEARCH")
  private List<String> auTHLDAP3USERSEARCH = null;

  @SerializedName("AUTH_LDAP_3_USER_DN_TEMPLATE")
  private String auTHLDAP3USERDNTEMPLATE = null;

  @SerializedName("AUTH_LDAP_3_USER_ATTR_MAP")
  private Map<String, String> auTHLDAP3USERATTRMAP = null;

  @SerializedName("AUTH_LDAP_3_GROUP_SEARCH")
  private List<String> auTHLDAP3GROUPSEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AuTHLDAP3GROUPTYPEEnum.Adapter.class)
  public enum AuTHLDAP3GROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AuTHLDAP3GROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuTHLDAP3GROUPTYPEEnum fromValue(String input) {
      for (AuTHLDAP3GROUPTYPEEnum b : AuTHLDAP3GROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuTHLDAP3GROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuTHLDAP3GROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuTHLDAP3GROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuTHLDAP3GROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_3_GROUP_TYPE")
  private AuTHLDAP3GROUPTYPEEnum auTHLDAP3GROUPTYPE = AuTHLDAP3GROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_3_GROUP_TYPE_PARAMS")
  private Map<String, String> auTHLDAP3GROUPTYPEPARAMS = null;

  @SerializedName("AUTH_LDAP_3_REQUIRE_GROUP")
  private String auTHLDAP3REQUIREGROUP = null;

  @SerializedName("AUTH_LDAP_3_DENY_GROUP")
  private String auTHLDAP3DENYGROUP = null;

  @SerializedName("AUTH_LDAP_3_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> auTHLDAP3USERFLAGSBYGROUP = null;

  @SerializedName("AUTH_LDAP_3_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> auTHLDAP3ORGANIZATIONMAP = null;

  @SerializedName("AUTH_LDAP_3_TEAM_MAP")
  private Map<String, Map<String, String>> auTHLDAP3TEAMMAP = null;

  @SerializedName("AUTH_LDAP_4_SERVER_URI")
  private String auTHLDAP4SERVERURI = "";

  @SerializedName("AUTH_LDAP_4_BIND_DN")
  private String auTHLDAP4BINDDN = "";

  @SerializedName("AUTH_LDAP_4_BIND_PASSWORD")
  private String auTHLDAP4BINDPASSWORD = "";

  @SerializedName("AUTH_LDAP_4_START_TLS")
  private Boolean auTHLDAP4STARTTLS = false;

  @SerializedName("AUTH_LDAP_4_CONNECTION_OPTIONS")
  private Map<String, String> auTHLDAP4CONNECTIONOPTIONS = null;

  @SerializedName("AUTH_LDAP_4_USER_SEARCH")
  private List<String> auTHLDAP4USERSEARCH = null;

  @SerializedName("AUTH_LDAP_4_USER_DN_TEMPLATE")
  private String auTHLDAP4USERDNTEMPLATE = null;

  @SerializedName("AUTH_LDAP_4_USER_ATTR_MAP")
  private Map<String, String> auTHLDAP4USERATTRMAP = null;

  @SerializedName("AUTH_LDAP_4_GROUP_SEARCH")
  private List<String> auTHLDAP4GROUPSEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AuTHLDAP4GROUPTYPEEnum.Adapter.class)
  public enum AuTHLDAP4GROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AuTHLDAP4GROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuTHLDAP4GROUPTYPEEnum fromValue(String input) {
      for (AuTHLDAP4GROUPTYPEEnum b : AuTHLDAP4GROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuTHLDAP4GROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuTHLDAP4GROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuTHLDAP4GROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuTHLDAP4GROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_4_GROUP_TYPE")
  private AuTHLDAP4GROUPTYPEEnum auTHLDAP4GROUPTYPE = AuTHLDAP4GROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_4_GROUP_TYPE_PARAMS")
  private Map<String, String> auTHLDAP4GROUPTYPEPARAMS = null;

  @SerializedName("AUTH_LDAP_4_REQUIRE_GROUP")
  private String auTHLDAP4REQUIREGROUP = null;

  @SerializedName("AUTH_LDAP_4_DENY_GROUP")
  private String auTHLDAP4DENYGROUP = null;

  @SerializedName("AUTH_LDAP_4_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> auTHLDAP4USERFLAGSBYGROUP = null;

  @SerializedName("AUTH_LDAP_4_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> auTHLDAP4ORGANIZATIONMAP = null;

  @SerializedName("AUTH_LDAP_4_TEAM_MAP")
  private Map<String, Map<String, String>> auTHLDAP4TEAMMAP = null;

  @SerializedName("AUTH_LDAP_5_SERVER_URI")
  private String auTHLDAP5SERVERURI = "";

  @SerializedName("AUTH_LDAP_5_BIND_DN")
  private String auTHLDAP5BINDDN = "";

  @SerializedName("AUTH_LDAP_5_BIND_PASSWORD")
  private String auTHLDAP5BINDPASSWORD = "";

  @SerializedName("AUTH_LDAP_5_START_TLS")
  private Boolean auTHLDAP5STARTTLS = false;

  @SerializedName("AUTH_LDAP_5_CONNECTION_OPTIONS")
  private Map<String, String> auTHLDAP5CONNECTIONOPTIONS = null;

  @SerializedName("AUTH_LDAP_5_USER_SEARCH")
  private List<String> auTHLDAP5USERSEARCH = null;

  @SerializedName("AUTH_LDAP_5_USER_DN_TEMPLATE")
  private String auTHLDAP5USERDNTEMPLATE = null;

  @SerializedName("AUTH_LDAP_5_USER_ATTR_MAP")
  private Map<String, String> auTHLDAP5USERATTRMAP = null;

  @SerializedName("AUTH_LDAP_5_GROUP_SEARCH")
  private List<String> auTHLDAP5GROUPSEARCH = null;

  /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   */
  @JsonAdapter(AuTHLDAP5GROUPTYPEEnum.Adapter.class)
  public enum AuTHLDAP5GROUPTYPEEnum {
    POSIXGROUPTYPE("PosixGroupType"),
    GROUPOFNAMESTYPE("GroupOfNamesType"),
    GROUPOFUNIQUENAMESTYPE("GroupOfUniqueNamesType"),
    ACTIVEDIRECTORYGROUPTYPE("ActiveDirectoryGroupType"),
    ORGANIZATIONALROLEGROUPTYPE("OrganizationalRoleGroupType"),
    MEMBERDNGROUPTYPE("MemberDNGroupType"),
    NESTEDGROUPOFNAMESTYPE("NestedGroupOfNamesType"),
    NESTEDGROUPOFUNIQUENAMESTYPE("NestedGroupOfUniqueNamesType"),
    NESTEDACTIVEDIRECTORYGROUPTYPE("NestedActiveDirectoryGroupType"),
    NESTEDORGANIZATIONALROLEGROUPTYPE("NestedOrganizationalRoleGroupType"),
    NESTEDMEMBERDNGROUPTYPE("NestedMemberDNGroupType"),
    POSIXUIDGROUPTYPE("PosixUIDGroupType");

    private String value;

    AuTHLDAP5GROUPTYPEEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuTHLDAP5GROUPTYPEEnum fromValue(String input) {
      for (AuTHLDAP5GROUPTYPEEnum b : AuTHLDAP5GROUPTYPEEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuTHLDAP5GROUPTYPEEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuTHLDAP5GROUPTYPEEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuTHLDAP5GROUPTYPEEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuTHLDAP5GROUPTYPEEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("AUTH_LDAP_5_GROUP_TYPE")
  private AuTHLDAP5GROUPTYPEEnum auTHLDAP5GROUPTYPE = AuTHLDAP5GROUPTYPEEnum.MEMBERDNGROUPTYPE;

  @SerializedName("AUTH_LDAP_5_GROUP_TYPE_PARAMS")
  private Map<String, String> auTHLDAP5GROUPTYPEPARAMS = null;

  @SerializedName("AUTH_LDAP_5_REQUIRE_GROUP")
  private String auTHLDAP5REQUIREGROUP = null;

  @SerializedName("AUTH_LDAP_5_DENY_GROUP")
  private String auTHLDAP5DENYGROUP = null;

  @SerializedName("AUTH_LDAP_5_USER_FLAGS_BY_GROUP")
  private Map<String, List<String>> auTHLDAP5USERFLAGSBYGROUP = null;

  @SerializedName("AUTH_LDAP_5_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> auTHLDAP5ORGANIZATIONMAP = null;

  @SerializedName("AUTH_LDAP_5_TEAM_MAP")
  private Map<String, Map<String, String>> auTHLDAP5TEAMMAP = null;

  @SerializedName("RADIUS_SERVER")
  private String RADIUS_SERVER = "";

  @SerializedName("RADIUS_PORT")
  private Integer RADIUS_PORT = null;

  @SerializedName("RADIUS_SECRET")
  private String RADIUS_SECRET = "";

  @SerializedName("TACACSPLUS_HOST")
  private String TACACSPLUS_HOST = "";

  @SerializedName("TACACSPLUS_PORT")
  private Integer TACACSPLUS_PORT = null;

  @SerializedName("TACACSPLUS_SECRET")
  private String TACACSPLUS_SECRET = "";

  @SerializedName("TACACSPLUS_SESSION_TIMEOUT")
  private Integer TACACSPLUS_SESSION_TIMEOUT = null;

  /**
   * Choose the authentication protocol used by TACACS+ client.
   */
  @JsonAdapter(TACACSPLUSAUTHPROTOCOLEnum.Adapter.class)
  public enum TACACSPLUSAUTHPROTOCOLEnum {
    ASCII("ascii"),
    PAP("pap");

    private String value;

    TACACSPLUSAUTHPROTOCOLEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TACACSPLUSAUTHPROTOCOLEnum fromValue(String input) {
      for (TACACSPLUSAUTHPROTOCOLEnum b : TACACSPLUSAUTHPROTOCOLEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TACACSPLUSAUTHPROTOCOLEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TACACSPLUSAUTHPROTOCOLEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TACACSPLUSAUTHPROTOCOLEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TACACSPLUSAUTHPROTOCOLEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("TACACSPLUS_AUTH_PROTOCOL")
  private TACACSPLUSAUTHPROTOCOLEnum TACACSPLUS_AUTH_PROTOCOL = TACACSPLUSAUTHPROTOCOLEnum.ASCII;

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_CALLBACK_URL")
  private String soCIALAUTHGOOGLEOAUTH2CALLBACKURL = "https://towerhost/sso/complete/google-oauth2/";

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
  private String soCIALAUTHGOOGLEOAUTH2KEY = "";

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
  private String soCIALAUTHGOOGLEOAUTH2SECRET = "";

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS")
  private List<String> soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS = null;

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS")
  private Map<String, String> soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS = null;

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP = null;

  @SerializedName("SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP")
  private Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2TEAMMAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_CALLBACK_URL = "https://towerhost/sso/complete/github/";

  @SerializedName("SOCIAL_AUTH_GITHUB_KEY")
  private String SOCIAL_AUTH_GITHUB_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_SECRET")
  private String SOCIAL_AUTH_GITHUB_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL = "https://towerhost/sso/complete/github-org/";

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_KEY")
  private String SOCIAL_AUTH_GITHUB_ORG_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_SECRET")
  private String SOCIAL_AUTH_GITHUB_ORG_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_NAME")
  private String SOCIAL_AUTH_GITHUB_ORG_NAME = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL = "https://towerhost/sso/complete/github-team/";

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_KEY")
  private String SOCIAL_AUTH_GITHUB_TEAM_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_SECRET")
  private String SOCIAL_AUTH_GITHUB_TEAM_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_ID")
  private String SOCIAL_AUTH_GITHUB_TEAM_ID = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL = "https://towerhost/sso/complete/github-enterprise/";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL = "https://towerhost/sso/complete/github-enterprise-org/";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL = "https://towerhost/sso/complete/github-enterprise-team/";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID")
  private String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID = "";

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_AZUREAD_OAUTH2_CALLBACK_URL")
  private String soCIALAUTHAZUREADOAUTH2CALLBACKURL = "https://towerhost/sso/complete/azuread-oauth2/";

  @SerializedName("SOCIAL_AUTH_AZUREAD_OAUTH2_KEY")
  private String soCIALAUTHAZUREADOAUTH2KEY = "";

  @SerializedName("SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET")
  private String soCIALAUTHAZUREADOAUTH2SECRET = "";

  @SerializedName("SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP = null;

  @SerializedName("SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP")
  private Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2TEAMMAP = null;

  @SerializedName("SAML_AUTO_CREATE_OBJECTS")
  private Boolean SAML_AUTO_CREATE_OBJECTS = true;

  @SerializedName("SOCIAL_AUTH_SAML_CALLBACK_URL")
  private String SOCIAL_AUTH_SAML_CALLBACK_URL = "https://towerhost/sso/complete/saml/";

  @SerializedName("SOCIAL_AUTH_SAML_METADATA_URL")
  private String SOCIAL_AUTH_SAML_METADATA_URL = "https://towerhost/sso/metadata/saml/";

  @SerializedName("SOCIAL_AUTH_SAML_SP_ENTITY_ID")
  private String SOCIAL_AUTH_SAML_SP_ENTITY_ID = "";

  @SerializedName("SOCIAL_AUTH_SAML_SP_PUBLIC_CERT")
  private String SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = "";

  @SerializedName("SOCIAL_AUTH_SAML_SP_PRIVATE_KEY")
  private String SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = "";

  @SerializedName("SOCIAL_AUTH_SAML_ORG_INFO")
  private Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORG_INFO = new HashMap<String, Map<String, String>>();

  @SerializedName("SOCIAL_AUTH_SAML_TECHNICAL_CONTACT")
  private Map<String, String> SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = new HashMap<String, String>();

  @SerializedName("SOCIAL_AUTH_SAML_SUPPORT_CONTACT")
  private Map<String, String> SOCIAL_AUTH_SAML_SUPPORT_CONTACT = new HashMap<String, String>();

  @SerializedName("SOCIAL_AUTH_SAML_ENABLED_IDPS")
  private Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ENABLED_IDPS = null;

  @SerializedName("SOCIAL_AUTH_SAML_SECURITY_CONFIG")
  private Map<String, String> SOCIAL_AUTH_SAML_SECURITY_CONFIG = null;

  @SerializedName("SOCIAL_AUTH_SAML_SP_EXTRA")
  private Map<String, String> SOCIAL_AUTH_SAML_SP_EXTRA = null;

  @SerializedName("SOCIAL_AUTH_SAML_EXTRA_DATA")
  private List<String> SOCIAL_AUTH_SAML_EXTRA_DATA = null;

  @SerializedName("SOCIAL_AUTH_SAML_ORGANIZATION_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORGANIZATION_MAP = null;

  @SerializedName("SOCIAL_AUTH_SAML_TEAM_MAP")
  private Map<String, Map<String, String>> SOCIAL_AUTH_SAML_TEAM_MAP = null;

  @SerializedName("SOCIAL_AUTH_SAML_ORGANIZATION_ATTR")
  private Map<String, String> SOCIAL_AUTH_SAML_ORGANIZATION_ATTR = null;

  @SerializedName("SOCIAL_AUTH_SAML_TEAM_ATTR")
  private Map<String, String> SOCIAL_AUTH_SAML_TEAM_ATTR = null;

  @SerializedName("SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR")
  private Map<String, String> SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR = null;

  @SerializedName("NAMED_URL_FORMATS")
  private Map<String, String> NAMED_URL_FORMATS = null;

  @SerializedName("NAMED_URL_GRAPH_NODES")
  private Map<String, String> NAMED_URL_GRAPH_NODES = null;

  public SettingSingleton ACTIVITY_STREAM_ENABLED(Boolean ACTIVITY_STREAM_ENABLED) {
    this.ACTIVITY_STREAM_ENABLED = ACTIVITY_STREAM_ENABLED;
    return this;
  }

   /**
   * Enable capturing activity for the activity stream.
   * @return ACTIVITY_STREAM_ENABLED
  **/
  @Schema(required = true, description = "Enable capturing activity for the activity stream.")
  public Boolean isACTIVITYSTREAMENABLED() {
    return ACTIVITY_STREAM_ENABLED;
  }

  public void setACTIVITYSTREAMENABLED(Boolean ACTIVITY_STREAM_ENABLED) {
    this.ACTIVITY_STREAM_ENABLED = ACTIVITY_STREAM_ENABLED;
  }

  public SettingSingleton ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC(Boolean ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC) {
    this.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC = ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC;
    return this;
  }

   /**
   * Enable capturing activity for the activity stream when running inventory sync.
   * @return ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC
  **/
  @Schema(required = true, description = "Enable capturing activity for the activity stream when running inventory sync.")
  public Boolean isACTIVITYSTREAMENABLEDFORINVENTORYSYNC() {
    return ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC;
  }

  public void setACTIVITYSTREAMENABLEDFORINVENTORYSYNC(Boolean ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC) {
    this.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC = ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC;
  }

  public SettingSingleton ORG_ADMINS_CAN_SEE_ALL_USERS(Boolean ORG_ADMINS_CAN_SEE_ALL_USERS) {
    this.ORG_ADMINS_CAN_SEE_ALL_USERS = ORG_ADMINS_CAN_SEE_ALL_USERS;
    return this;
  }

   /**
   * Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization.
   * @return ORG_ADMINS_CAN_SEE_ALL_USERS
  **/
  @Schema(required = true, description = "Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization.")
  public Boolean isORGADMINSCANSEEALLUSERS() {
    return ORG_ADMINS_CAN_SEE_ALL_USERS;
  }

  public void setORGADMINSCANSEEALLUSERS(Boolean ORG_ADMINS_CAN_SEE_ALL_USERS) {
    this.ORG_ADMINS_CAN_SEE_ALL_USERS = ORG_ADMINS_CAN_SEE_ALL_USERS;
  }

  public SettingSingleton MANAGE_ORGANIZATION_AUTH(Boolean MANAGE_ORGANIZATION_AUTH) {
    this.MANAGE_ORGANIZATION_AUTH = MANAGE_ORGANIZATION_AUTH;
    return this;
  }

   /**
   * Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration.
   * @return MANAGE_ORGANIZATION_AUTH
  **/
  @Schema(required = true, description = "Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration.")
  public Boolean isMANAGEORGANIZATIONAUTH() {
    return MANAGE_ORGANIZATION_AUTH;
  }

  public void setMANAGEORGANIZATIONAUTH(Boolean MANAGE_ORGANIZATION_AUTH) {
    this.MANAGE_ORGANIZATION_AUTH = MANAGE_ORGANIZATION_AUTH;
  }

  public SettingSingleton TOWER_URL_BASE(String TOWER_URL_BASE) {
    this.TOWER_URL_BASE = TOWER_URL_BASE;
    return this;
  }

   /**
   * This setting is used by services like notifications to render a valid url to the service.
   * @return TOWER_URL_BASE
  **/
  @Schema(required = true, description = "This setting is used by services like notifications to render a valid url to the service.")
  public String getTOWERURLBASE() {
    return TOWER_URL_BASE;
  }

  public void setTOWERURLBASE(String TOWER_URL_BASE) {
    this.TOWER_URL_BASE = TOWER_URL_BASE;
  }

  public SettingSingleton REMOTE_HOST_HEADERS(List<String> REMOTE_HOST_HEADERS) {
    this.REMOTE_HOST_HEADERS = REMOTE_HOST_HEADERS;
    return this;
  }

  public SettingSingleton addREMOTEHOSTHEADERSItem(String REMOTE_HOST_HEADERSItem) {
    this.REMOTE_HOST_HEADERS.add(REMOTE_HOST_HEADERSItem);
    return this;
  }

   /**
   * HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as \&quot;HTTP_X_FORWARDED_FOR\&quot;, if behind a reverse proxy. See the \&quot;Proxy Support\&quot; section of the AAP Installation guide for more details.
   * @return REMOTE_HOST_HEADERS
  **/
  @Schema(required = true, description = "HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as \"HTTP_X_FORWARDED_FOR\", if behind a reverse proxy. See the \"Proxy Support\" section of the AAP Installation guide for more details.")
  public List<String> getREMOTEHOSTHEADERS() {
    return REMOTE_HOST_HEADERS;
  }

  public void setREMOTEHOSTHEADERS(List<String> REMOTE_HOST_HEADERS) {
    this.REMOTE_HOST_HEADERS = REMOTE_HOST_HEADERS;
  }

  public SettingSingleton PROXY_IP_ALLOWED_LIST(List<String> PROXY_IP_ALLOWED_LIST) {
    this.PROXY_IP_ALLOWED_LIST = PROXY_IP_ALLOWED_LIST;
    return this;
  }

  public SettingSingleton addPROXYIPALLOWEDLISTItem(String PROXY_IP_ALLOWED_LISTItem) {
    this.PROXY_IP_ALLOWED_LIST.add(PROXY_IP_ALLOWED_LISTItem);
    return this;
  }

   /**
   * If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally&#x27;)
   * @return PROXY_IP_ALLOWED_LIST
  **/
  @Schema(required = true, description = "If the service is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which the service should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally')")
  public List<String> getPROXYIPALLOWEDLIST() {
    return PROXY_IP_ALLOWED_LIST;
  }

  public void setPROXYIPALLOWEDLIST(List<String> PROXY_IP_ALLOWED_LIST) {
    this.PROXY_IP_ALLOWED_LIST = PROXY_IP_ALLOWED_LIST;
  }

   /**
   * The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license.
   * @return LICENSE
  **/
  @Schema(description = "The license controls which features and functionality are enabled. Use /api/v2/config/ to update or change the license.")
  public Map<String, String> getLICENSE() {
    return LICENSE;
  }

  public SettingSingleton REDHAT_USERNAME(String REDHAT_USERNAME) {
    this.REDHAT_USERNAME = REDHAT_USERNAME;
    return this;
  }

   /**
   * This username is used to send data to Insights for Ansible Automation Platform
   * @return REDHAT_USERNAME
  **/
  @Schema(description = "This username is used to send data to Insights for Ansible Automation Platform")
  public String getREDHATUSERNAME() {
    return REDHAT_USERNAME;
  }

  public void setREDHATUSERNAME(String REDHAT_USERNAME) {
    this.REDHAT_USERNAME = REDHAT_USERNAME;
  }

  public SettingSingleton REDHAT_PASSWORD(String REDHAT_PASSWORD) {
    this.REDHAT_PASSWORD = REDHAT_PASSWORD;
    return this;
  }

   /**
   * This password is used to send data to Insights for Ansible Automation Platform
   * @return REDHAT_PASSWORD
  **/
  @Schema(description = "This password is used to send data to Insights for Ansible Automation Platform")
  public String getREDHATPASSWORD() {
    return REDHAT_PASSWORD;
  }

  public void setREDHATPASSWORD(String REDHAT_PASSWORD) {
    this.REDHAT_PASSWORD = REDHAT_PASSWORD;
  }

  public SettingSingleton SUBSCRIPTIONS_USERNAME(String SUBSCRIPTIONS_USERNAME) {
    this.SUBSCRIPTIONS_USERNAME = SUBSCRIPTIONS_USERNAME;
    return this;
  }

   /**
   * This username is used to retrieve subscription and content information
   * @return SUBSCRIPTIONS_USERNAME
  **/
  @Schema(description = "This username is used to retrieve subscription and content information")
  public String getSUBSCRIPTIONSUSERNAME() {
    return SUBSCRIPTIONS_USERNAME;
  }

  public void setSUBSCRIPTIONSUSERNAME(String SUBSCRIPTIONS_USERNAME) {
    this.SUBSCRIPTIONS_USERNAME = SUBSCRIPTIONS_USERNAME;
  }

  public SettingSingleton SUBSCRIPTIONS_PASSWORD(String SUBSCRIPTIONS_PASSWORD) {
    this.SUBSCRIPTIONS_PASSWORD = SUBSCRIPTIONS_PASSWORD;
    return this;
  }

   /**
   * This password is used to retrieve subscription and content information
   * @return SUBSCRIPTIONS_PASSWORD
  **/
  @Schema(description = "This password is used to retrieve subscription and content information")
  public String getSUBSCRIPTIONSPASSWORD() {
    return SUBSCRIPTIONS_PASSWORD;
  }

  public void setSUBSCRIPTIONSPASSWORD(String SUBSCRIPTIONS_PASSWORD) {
    this.SUBSCRIPTIONS_PASSWORD = SUBSCRIPTIONS_PASSWORD;
  }

  public SettingSingleton AUTOMATION_ANALYTICS_URL(String AUTOMATION_ANALYTICS_URL) {
    this.AUTOMATION_ANALYTICS_URL = AUTOMATION_ANALYTICS_URL;
    return this;
  }

   /**
   * This setting is used to to configure the upload URL for data collection for Red Hat Insights.
   * @return AUTOMATION_ANALYTICS_URL
  **/
  @Schema(description = "This setting is used to to configure the upload URL for data collection for Red Hat Insights.")
  public String getAUTOMATIONANALYTICSURL() {
    return AUTOMATION_ANALYTICS_URL;
  }

  public void setAUTOMATIONANALYTICSURL(String AUTOMATION_ANALYTICS_URL) {
    this.AUTOMATION_ANALYTICS_URL = AUTOMATION_ANALYTICS_URL;
  }

   /**
   * Get INSTALL_UUID
   * @return INSTALL_UUID
  **/
  @Schema(description = "")
  public String getINSTALLUUID() {
    return INSTALL_UUID;
  }

   /**
   * Get DEFAULT_CONTROL_PLANE_QUEUE_NAME
   * @return DEFAULT_CONTROL_PLANE_QUEUE_NAME
  **/
  @Schema(description = "")
  public String getDEFAULTCONTROLPLANEQUEUENAME() {
    return DEFAULT_CONTROL_PLANE_QUEUE_NAME;
  }

   /**
   * Get DEFAULT_EXECUTION_QUEUE_NAME
   * @return DEFAULT_EXECUTION_QUEUE_NAME
  **/
  @Schema(description = "")
  public String getDEFAULTEXECUTIONQUEUENAME() {
    return DEFAULT_EXECUTION_QUEUE_NAME;
  }

  public SettingSingleton DEFAULT_EXECUTION_ENVIRONMENT(Integer DEFAULT_EXECUTION_ENVIRONMENT) {
    this.DEFAULT_EXECUTION_ENVIRONMENT = DEFAULT_EXECUTION_ENVIRONMENT;
    return this;
  }

   /**
   * The Execution Environment to be used when one has not been configured for a job template.
   * @return DEFAULT_EXECUTION_ENVIRONMENT
  **/
  @Schema(description = "The Execution Environment to be used when one has not been configured for a job template.")
  public Integer getDEFAULTEXECUTIONENVIRONMENT() {
    return DEFAULT_EXECUTION_ENVIRONMENT;
  }

  public void setDEFAULTEXECUTIONENVIRONMENT(Integer DEFAULT_EXECUTION_ENVIRONMENT) {
    this.DEFAULT_EXECUTION_ENVIRONMENT = DEFAULT_EXECUTION_ENVIRONMENT;
  }

  public SettingSingleton CUSTOM_VENV_PATHS(List<String> CUSTOM_VENV_PATHS) {
    this.CUSTOM_VENV_PATHS = CUSTOM_VENV_PATHS;
    return this;
  }

  public SettingSingleton addCUSTOMVENVPATHSItem(String CUSTOM_VENV_PATHSItem) {
    if (this.CUSTOM_VENV_PATHS == null) {
      this.CUSTOM_VENV_PATHS = new ArrayList<String>();
    }
    this.CUSTOM_VENV_PATHS.add(CUSTOM_VENV_PATHSItem);
    return this;
  }

   /**
   * Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line.
   * @return CUSTOM_VENV_PATHS
  **/
  @Schema(description = "Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line.")
  public List<String> getCUSTOMVENVPATHS() {
    return CUSTOM_VENV_PATHS;
  }

  public void setCUSTOMVENVPATHS(List<String> CUSTOM_VENV_PATHS) {
    this.CUSTOM_VENV_PATHS = CUSTOM_VENV_PATHS;
  }

  public SettingSingleton AD_HOC_COMMANDS(List<String> AD_HOC_COMMANDS) {
    this.AD_HOC_COMMANDS = AD_HOC_COMMANDS;
    return this;
  }

  public SettingSingleton addADHOCCOMMANDSItem(String AD_HOC_COMMANDSItem) {
    if (this.AD_HOC_COMMANDS == null) {
      this.AD_HOC_COMMANDS = new ArrayList<String>();
    }
    this.AD_HOC_COMMANDS.add(AD_HOC_COMMANDSItem);
    return this;
  }

   /**
   * List of modules allowed to be used by ad-hoc jobs.
   * @return AD_HOC_COMMANDS
  **/
  @Schema(description = "List of modules allowed to be used by ad-hoc jobs.")
  public List<String> getADHOCCOMMANDS() {
    return AD_HOC_COMMANDS;
  }

  public void setADHOCCOMMANDS(List<String> AD_HOC_COMMANDS) {
    this.AD_HOC_COMMANDS = AD_HOC_COMMANDS;
  }

  public SettingSingleton ALLOW_JINJA_IN_EXTRA_VARS(ALLOWJINJAINEXTRAVARSEnum ALLOW_JINJA_IN_EXTRA_VARS) {
    this.ALLOW_JINJA_IN_EXTRA_VARS = ALLOW_JINJA_IN_EXTRA_VARS;
    return this;
  }

   /**
   * Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to \&quot;template\&quot; or \&quot;never\&quot;.
   * @return ALLOW_JINJA_IN_EXTRA_VARS
  **/
  @Schema(required = true, description = "Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to \"template\" or \"never\".")
  public ALLOWJINJAINEXTRAVARSEnum getALLOWJINJAINEXTRAVARS() {
    return ALLOW_JINJA_IN_EXTRA_VARS;
  }

  public void setALLOWJINJAINEXTRAVARS(ALLOWJINJAINEXTRAVARSEnum ALLOW_JINJA_IN_EXTRA_VARS) {
    this.ALLOW_JINJA_IN_EXTRA_VARS = ALLOW_JINJA_IN_EXTRA_VARS;
  }

  public SettingSingleton AWX_ISOLATION_BASE_PATH(String AWX_ISOLATION_BASE_PATH) {
    this.AWX_ISOLATION_BASE_PATH = AWX_ISOLATION_BASE_PATH;
    return this;
  }

   /**
   * The directory in which the service will create new temporary directories for job execution and isolation (such as credential files).
   * @return AWX_ISOLATION_BASE_PATH
  **/
  @Schema(required = true, description = "The directory in which the service will create new temporary directories for job execution and isolation (such as credential files).")
  public String getAWXISOLATIONBASEPATH() {
    return AWX_ISOLATION_BASE_PATH;
  }

  public void setAWXISOLATIONBASEPATH(String AWX_ISOLATION_BASE_PATH) {
    this.AWX_ISOLATION_BASE_PATH = AWX_ISOLATION_BASE_PATH;
  }

  public SettingSingleton AWX_ISOLATION_SHOW_PATHS(List<String> AWX_ISOLATION_SHOW_PATHS) {
    this.AWX_ISOLATION_SHOW_PATHS = AWX_ISOLATION_SHOW_PATHS;
    return this;
  }

  public SettingSingleton addAWXISOLATIONSHOWPATHSItem(String AWX_ISOLATION_SHOW_PATHSItem) {
    if (this.AWX_ISOLATION_SHOW_PATHS == null) {
      this.AWX_ISOLATION_SHOW_PATHS = new ArrayList<String>();
    }
    this.AWX_ISOLATION_SHOW_PATHS.add(AWX_ISOLATION_SHOW_PATHSItem);
    return this;
  }

   /**
   * List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]]. 
   * @return AWX_ISOLATION_SHOW_PATHS
  **/
  @Schema(description = "List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line. Volumes will be mounted from the execution node to the container. The supported format is HOST-DIR[:CONTAINER-DIR[:OPTIONS]]. ")
  public List<String> getAWXISOLATIONSHOWPATHS() {
    return AWX_ISOLATION_SHOW_PATHS;
  }

  public void setAWXISOLATIONSHOWPATHS(List<String> AWX_ISOLATION_SHOW_PATHS) {
    this.AWX_ISOLATION_SHOW_PATHS = AWX_ISOLATION_SHOW_PATHS;
  }

  public SettingSingleton AWX_TASK_ENV(Map<String, String> AWX_TASK_ENV) {
    this.AWX_TASK_ENV = AWX_TASK_ENV;
    return this;
  }

  public SettingSingleton putAWXTASKENVItem(String key, String AWX_TASK_ENVItem) {
    if (this.AWX_TASK_ENV == null) {
      this.AWX_TASK_ENV = new HashMap<String, String>();
    }
    this.AWX_TASK_ENV.put(key, AWX_TASK_ENVItem);
    return this;
  }

   /**
   * Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending.
   * @return AWX_TASK_ENV
  **/
  @Schema(description = "Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending.")
  public Map<String, String> getAWXTASKENV() {
    return AWX_TASK_ENV;
  }

  public void setAWXTASKENV(Map<String, String> AWX_TASK_ENV) {
    this.AWX_TASK_ENV = AWX_TASK_ENV;
  }

  public SettingSingleton INSIGHTS_TRACKING_STATE(Boolean INSIGHTS_TRACKING_STATE) {
    this.INSIGHTS_TRACKING_STATE = INSIGHTS_TRACKING_STATE;
    return this;
  }

   /**
   * Enables the service to gather data on automation and send it to Red Hat Insights.
   * @return INSIGHTS_TRACKING_STATE
  **/
  @Schema(description = "Enables the service to gather data on automation and send it to Red Hat Insights.")
  public Boolean isINSIGHTSTRACKINGSTATE() {
    return INSIGHTS_TRACKING_STATE;
  }

  public void setINSIGHTSTRACKINGSTATE(Boolean INSIGHTS_TRACKING_STATE) {
    this.INSIGHTS_TRACKING_STATE = INSIGHTS_TRACKING_STATE;
  }

  public SettingSingleton PROJECT_UPDATE_VVV(Boolean PROJECT_UPDATE_VVV) {
    this.PROJECT_UPDATE_VVV = PROJECT_UPDATE_VVV;
    return this;
  }

   /**
   * Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates.
   * @return PROJECT_UPDATE_VVV
  **/
  @Schema(required = true, description = "Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates.")
  public Boolean isPROJECTUPDATEVVV() {
    return PROJECT_UPDATE_VVV;
  }

  public void setPROJECTUPDATEVVV(Boolean PROJECT_UPDATE_VVV) {
    this.PROJECT_UPDATE_VVV = PROJECT_UPDATE_VVV;
  }

  public SettingSingleton AWX_ROLES_ENABLED(Boolean AWX_ROLES_ENABLED) {
    this.AWX_ROLES_ENABLED = AWX_ROLES_ENABLED;
    return this;
  }

   /**
   * Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects.
   * @return AWX_ROLES_ENABLED
  **/
  @Schema(description = "Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects.")
  public Boolean isAWXROLESENABLED() {
    return AWX_ROLES_ENABLED;
  }

  public void setAWXROLESENABLED(Boolean AWX_ROLES_ENABLED) {
    this.AWX_ROLES_ENABLED = AWX_ROLES_ENABLED;
  }

  public SettingSingleton AWX_COLLECTIONS_ENABLED(Boolean AWX_COLLECTIONS_ENABLED) {
    this.AWX_COLLECTIONS_ENABLED = AWX_COLLECTIONS_ENABLED;
    return this;
  }

   /**
   * Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects.
   * @return AWX_COLLECTIONS_ENABLED
  **/
  @Schema(description = "Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects.")
  public Boolean isAWXCOLLECTIONSENABLED() {
    return AWX_COLLECTIONS_ENABLED;
  }

  public void setAWXCOLLECTIONSENABLED(Boolean AWX_COLLECTIONS_ENABLED) {
    this.AWX_COLLECTIONS_ENABLED = AWX_COLLECTIONS_ENABLED;
  }

  public SettingSingleton AWX_SHOW_PLAYBOOK_LINKS(Boolean AWX_SHOW_PLAYBOOK_LINKS) {
    this.AWX_SHOW_PLAYBOOK_LINKS = AWX_SHOW_PLAYBOOK_LINKS;
    return this;
  }

   /**
   * Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself.
   * @return AWX_SHOW_PLAYBOOK_LINKS
  **/
  @Schema(description = "Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself.")
  public Boolean isAWXSHOWPLAYBOOKLINKS() {
    return AWX_SHOW_PLAYBOOK_LINKS;
  }

  public void setAWXSHOWPLAYBOOKLINKS(Boolean AWX_SHOW_PLAYBOOK_LINKS) {
    this.AWX_SHOW_PLAYBOOK_LINKS = AWX_SHOW_PLAYBOOK_LINKS;
  }

  public SettingSingleton awXMOUNTISOLATEDPATHSONK8S(Boolean awXMOUNTISOLATEDPATHSONK8S) {
    this.awXMOUNTISOLATEDPATHSONK8S = awXMOUNTISOLATEDPATHSONK8S;
    return this;
  }

   /**
   * Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible. 
   * @return awXMOUNTISOLATEDPATHSONK8S
  **/
  @Schema(description = "Expose paths via hostPath for the Pods created by a Container Group. HostPath volumes present many security risks, and it is a best practice to avoid the use of HostPaths when possible. ")
  public Boolean isAwXMOUNTISOLATEDPATHSONK8S() {
    return awXMOUNTISOLATEDPATHSONK8S;
  }

  public void setAwXMOUNTISOLATEDPATHSONK8S(Boolean awXMOUNTISOLATEDPATHSONK8S) {
    this.awXMOUNTISOLATEDPATHSONK8S = awXMOUNTISOLATEDPATHSONK8S;
  }

  public SettingSingleton GALAXY_IGNORE_CERTS(Boolean GALAXY_IGNORE_CERTS) {
    this.GALAXY_IGNORE_CERTS = GALAXY_IGNORE_CERTS;
    return this;
  }

   /**
   * If set to true, certificate validation will not be done when installing content from any Galaxy server.
   * @return GALAXY_IGNORE_CERTS
  **/
  @Schema(description = "If set to true, certificate validation will not be done when installing content from any Galaxy server.")
  public Boolean isGALAXYIGNORECERTS() {
    return GALAXY_IGNORE_CERTS;
  }

  public void setGALAXYIGNORECERTS(Boolean GALAXY_IGNORE_CERTS) {
    this.GALAXY_IGNORE_CERTS = GALAXY_IGNORE_CERTS;
  }

  public SettingSingleton STDOUT_MAX_BYTES_DISPLAY(Integer STDOUT_MAX_BYTES_DISPLAY) {
    this.STDOUT_MAX_BYTES_DISPLAY = STDOUT_MAX_BYTES_DISPLAY;
    return this;
  }

   /**
   * Maximum Size of Standard Output in bytes to display before requiring the output be downloaded.
   * minimum: 0
   * @return STDOUT_MAX_BYTES_DISPLAY
  **/
  @Schema(required = true, description = "Maximum Size of Standard Output in bytes to display before requiring the output be downloaded.")
  public Integer getSTDOUTMAXBYTESDISPLAY() {
    return STDOUT_MAX_BYTES_DISPLAY;
  }

  public void setSTDOUTMAXBYTESDISPLAY(Integer STDOUT_MAX_BYTES_DISPLAY) {
    this.STDOUT_MAX_BYTES_DISPLAY = STDOUT_MAX_BYTES_DISPLAY;
  }

  public SettingSingleton EVENT_STDOUT_MAX_BYTES_DISPLAY(Integer EVENT_STDOUT_MAX_BYTES_DISPLAY) {
    this.EVENT_STDOUT_MAX_BYTES_DISPLAY = EVENT_STDOUT_MAX_BYTES_DISPLAY;
    return this;
  }

   /**
   * Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. &#x60;stdout&#x60; will end with &#x60;…&#x60; when truncated.
   * minimum: 0
   * @return EVENT_STDOUT_MAX_BYTES_DISPLAY
  **/
  @Schema(required = true, description = "Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated.")
  public Integer getEVENTSTDOUTMAXBYTESDISPLAY() {
    return EVENT_STDOUT_MAX_BYTES_DISPLAY;
  }

  public void setEVENTSTDOUTMAXBYTESDISPLAY(Integer EVENT_STDOUT_MAX_BYTES_DISPLAY) {
    this.EVENT_STDOUT_MAX_BYTES_DISPLAY = EVENT_STDOUT_MAX_BYTES_DISPLAY;
  }

  public SettingSingleton MAX_WEBSOCKET_EVENT_RATE(Integer MAX_WEBSOCKET_EVENT_RATE) {
    this.MAX_WEBSOCKET_EVENT_RATE = MAX_WEBSOCKET_EVENT_RATE;
    return this;
  }

   /**
   * Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit.
   * minimum: 0
   * @return MAX_WEBSOCKET_EVENT_RATE
  **/
  @Schema(description = "Maximum number of messages to update the UI live job output with per second. Value of 0 means no limit.")
  public Integer getMAXWEBSOCKETEVENTRATE() {
    return MAX_WEBSOCKET_EVENT_RATE;
  }

  public void setMAXWEBSOCKETEVENTRATE(Integer MAX_WEBSOCKET_EVENT_RATE) {
    this.MAX_WEBSOCKET_EVENT_RATE = MAX_WEBSOCKET_EVENT_RATE;
  }

  public SettingSingleton SCHEDULE_MAX_JOBS(Integer SCHEDULE_MAX_JOBS) {
    this.SCHEDULE_MAX_JOBS = SCHEDULE_MAX_JOBS;
    return this;
  }

   /**
   * Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created.
   * minimum: 1
   * @return SCHEDULE_MAX_JOBS
  **/
  @Schema(required = true, description = "Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created.")
  public Integer getSCHEDULEMAXJOBS() {
    return SCHEDULE_MAX_JOBS;
  }

  public void setSCHEDULEMAXJOBS(Integer SCHEDULE_MAX_JOBS) {
    this.SCHEDULE_MAX_JOBS = SCHEDULE_MAX_JOBS;
  }

  public SettingSingleton AWX_ANSIBLE_CALLBACK_PLUGINS(List<String> AWX_ANSIBLE_CALLBACK_PLUGINS) {
    this.AWX_ANSIBLE_CALLBACK_PLUGINS = AWX_ANSIBLE_CALLBACK_PLUGINS;
    return this;
  }

  public SettingSingleton addAWXANSIBLECALLBACKPLUGINSItem(String AWX_ANSIBLE_CALLBACK_PLUGINSItem) {
    if (this.AWX_ANSIBLE_CALLBACK_PLUGINS == null) {
      this.AWX_ANSIBLE_CALLBACK_PLUGINS = new ArrayList<String>();
    }
    this.AWX_ANSIBLE_CALLBACK_PLUGINS.add(AWX_ANSIBLE_CALLBACK_PLUGINSItem);
    return this;
  }

   /**
   * List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line.
   * @return AWX_ANSIBLE_CALLBACK_PLUGINS
  **/
  @Schema(description = "List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line.")
  public List<String> getAWXANSIBLECALLBACKPLUGINS() {
    return AWX_ANSIBLE_CALLBACK_PLUGINS;
  }

  public void setAWXANSIBLECALLBACKPLUGINS(List<String> AWX_ANSIBLE_CALLBACK_PLUGINS) {
    this.AWX_ANSIBLE_CALLBACK_PLUGINS = AWX_ANSIBLE_CALLBACK_PLUGINS;
  }

  public SettingSingleton DEFAULT_JOB_TIMEOUT(Integer DEFAULT_JOB_TIMEOUT) {
    this.DEFAULT_JOB_TIMEOUT = DEFAULT_JOB_TIMEOUT;
    return this;
  }

   /**
   * Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this.
   * minimum: 0
   * @return DEFAULT_JOB_TIMEOUT
  **/
  @Schema(description = "Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this.")
  public Integer getDEFAULTJOBTIMEOUT() {
    return DEFAULT_JOB_TIMEOUT;
  }

  public void setDEFAULTJOBTIMEOUT(Integer DEFAULT_JOB_TIMEOUT) {
    this.DEFAULT_JOB_TIMEOUT = DEFAULT_JOB_TIMEOUT;
  }

  public SettingSingleton DEFAULT_JOB_IDLE_TIMEOUT(Integer DEFAULT_JOB_IDLE_TIMEOUT) {
    this.DEFAULT_JOB_IDLE_TIMEOUT = DEFAULT_JOB_IDLE_TIMEOUT;
    return this;
  }

   /**
   * If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to used default idle_timeout is 600s.
   * minimum: 0
   * @return DEFAULT_JOB_IDLE_TIMEOUT
  **/
  @Schema(description = "If no output is detected from ansible in this number of seconds the execution will be terminated. Use value of 0 to used default idle_timeout is 600s.")
  public Integer getDEFAULTJOBIDLETIMEOUT() {
    return DEFAULT_JOB_IDLE_TIMEOUT;
  }

  public void setDEFAULTJOBIDLETIMEOUT(Integer DEFAULT_JOB_IDLE_TIMEOUT) {
    this.DEFAULT_JOB_IDLE_TIMEOUT = DEFAULT_JOB_IDLE_TIMEOUT;
  }

  public SettingSingleton DEFAULT_INVENTORY_UPDATE_TIMEOUT(Integer DEFAULT_INVENTORY_UPDATE_TIMEOUT) {
    this.DEFAULT_INVENTORY_UPDATE_TIMEOUT = DEFAULT_INVENTORY_UPDATE_TIMEOUT;
    return this;
  }

   /**
   * Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this.
   * minimum: 0
   * @return DEFAULT_INVENTORY_UPDATE_TIMEOUT
  **/
  @Schema(description = "Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this.")
  public Integer getDEFAULTINVENTORYUPDATETIMEOUT() {
    return DEFAULT_INVENTORY_UPDATE_TIMEOUT;
  }

  public void setDEFAULTINVENTORYUPDATETIMEOUT(Integer DEFAULT_INVENTORY_UPDATE_TIMEOUT) {
    this.DEFAULT_INVENTORY_UPDATE_TIMEOUT = DEFAULT_INVENTORY_UPDATE_TIMEOUT;
  }

  public SettingSingleton DEFAULT_PROJECT_UPDATE_TIMEOUT(Integer DEFAULT_PROJECT_UPDATE_TIMEOUT) {
    this.DEFAULT_PROJECT_UPDATE_TIMEOUT = DEFAULT_PROJECT_UPDATE_TIMEOUT;
    return this;
  }

   /**
   * Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this.
   * minimum: 0
   * @return DEFAULT_PROJECT_UPDATE_TIMEOUT
  **/
  @Schema(description = "Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this.")
  public Integer getDEFAULTPROJECTUPDATETIMEOUT() {
    return DEFAULT_PROJECT_UPDATE_TIMEOUT;
  }

  public void setDEFAULTPROJECTUPDATETIMEOUT(Integer DEFAULT_PROJECT_UPDATE_TIMEOUT) {
    this.DEFAULT_PROJECT_UPDATE_TIMEOUT = DEFAULT_PROJECT_UPDATE_TIMEOUT;
  }

  public SettingSingleton ANSIBLE_FACT_CACHE_TIMEOUT(Integer ANSIBLE_FACT_CACHE_TIMEOUT) {
    this.ANSIBLE_FACT_CACHE_TIMEOUT = ANSIBLE_FACT_CACHE_TIMEOUT;
    return this;
  }

   /**
   * Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed.
   * minimum: 0
   * @return ANSIBLE_FACT_CACHE_TIMEOUT
  **/
  @Schema(description = "Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed.")
  public Integer getANSIBLEFACTCACHETIMEOUT() {
    return ANSIBLE_FACT_CACHE_TIMEOUT;
  }

  public void setANSIBLEFACTCACHETIMEOUT(Integer ANSIBLE_FACT_CACHE_TIMEOUT) {
    this.ANSIBLE_FACT_CACHE_TIMEOUT = ANSIBLE_FACT_CACHE_TIMEOUT;
  }

  public SettingSingleton MAX_FORKS(Integer MAX_FORKS) {
    this.MAX_FORKS = MAX_FORKS;
    return this;
  }

   /**
   * Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied.
   * @return MAX_FORKS
  **/
  @Schema(description = "Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied.")
  public Integer getMAXFORKS() {
    return MAX_FORKS;
  }

  public void setMAXFORKS(Integer MAX_FORKS) {
    this.MAX_FORKS = MAX_FORKS;
  }

  public SettingSingleton LOG_AGGREGATOR_HOST(String LOG_AGGREGATOR_HOST) {
    this.LOG_AGGREGATOR_HOST = LOG_AGGREGATOR_HOST;
    return this;
  }

   /**
   * Hostname/IP where external logs will be sent to.
   * @return LOG_AGGREGATOR_HOST
  **/
  @Schema(description = "Hostname/IP where external logs will be sent to.")
  public String getLOGAGGREGATORHOST() {
    return LOG_AGGREGATOR_HOST;
  }

  public void setLOGAGGREGATORHOST(String LOG_AGGREGATOR_HOST) {
    this.LOG_AGGREGATOR_HOST = LOG_AGGREGATOR_HOST;
  }

  public SettingSingleton LOG_AGGREGATOR_PORT(Integer LOG_AGGREGATOR_PORT) {
    this.LOG_AGGREGATOR_PORT = LOG_AGGREGATOR_PORT;
    return this;
  }

   /**
   * Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator).
   * @return LOG_AGGREGATOR_PORT
  **/
  @Schema(description = "Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator).")
  public Integer getLOGAGGREGATORPORT() {
    return LOG_AGGREGATOR_PORT;
  }

  public void setLOGAGGREGATORPORT(Integer LOG_AGGREGATOR_PORT) {
    this.LOG_AGGREGATOR_PORT = LOG_AGGREGATOR_PORT;
  }

  public SettingSingleton LOG_AGGREGATOR_TYPE(LOGAGGREGATORTYPEEnum LOG_AGGREGATOR_TYPE) {
    this.LOG_AGGREGATOR_TYPE = LOG_AGGREGATOR_TYPE;
    return this;
  }

   /**
   * Format messages for the chosen log aggregator.
   * @return LOG_AGGREGATOR_TYPE
  **/
  @Schema(description = "Format messages for the chosen log aggregator.")
  public LOGAGGREGATORTYPEEnum getLOGAGGREGATORTYPE() {
    return LOG_AGGREGATOR_TYPE;
  }

  public void setLOGAGGREGATORTYPE(LOGAGGREGATORTYPEEnum LOG_AGGREGATOR_TYPE) {
    this.LOG_AGGREGATOR_TYPE = LOG_AGGREGATOR_TYPE;
  }

  public SettingSingleton LOG_AGGREGATOR_USERNAME(String LOG_AGGREGATOR_USERNAME) {
    this.LOG_AGGREGATOR_USERNAME = LOG_AGGREGATOR_USERNAME;
    return this;
  }

   /**
   * Username for external log aggregator (if required; HTTP/s only).
   * @return LOG_AGGREGATOR_USERNAME
  **/
  @Schema(description = "Username for external log aggregator (if required; HTTP/s only).")
  public String getLOGAGGREGATORUSERNAME() {
    return LOG_AGGREGATOR_USERNAME;
  }

  public void setLOGAGGREGATORUSERNAME(String LOG_AGGREGATOR_USERNAME) {
    this.LOG_AGGREGATOR_USERNAME = LOG_AGGREGATOR_USERNAME;
  }

  public SettingSingleton LOG_AGGREGATOR_PASSWORD(String LOG_AGGREGATOR_PASSWORD) {
    this.LOG_AGGREGATOR_PASSWORD = LOG_AGGREGATOR_PASSWORD;
    return this;
  }

   /**
   * Password or authentication token for external log aggregator (if required; HTTP/s only).
   * @return LOG_AGGREGATOR_PASSWORD
  **/
  @Schema(description = "Password or authentication token for external log aggregator (if required; HTTP/s only).")
  public String getLOGAGGREGATORPASSWORD() {
    return LOG_AGGREGATOR_PASSWORD;
  }

  public void setLOGAGGREGATORPASSWORD(String LOG_AGGREGATOR_PASSWORD) {
    this.LOG_AGGREGATOR_PASSWORD = LOG_AGGREGATOR_PASSWORD;
  }

  public SettingSingleton LOG_AGGREGATOR_LOGGERS(List<String> LOG_AGGREGATOR_LOGGERS) {
    this.LOG_AGGREGATOR_LOGGERS = LOG_AGGREGATOR_LOGGERS;
    return this;
  }

  public SettingSingleton addLOGAGGREGATORLOGGERSItem(String LOG_AGGREGATOR_LOGGERSItem) {
    if (this.LOG_AGGREGATOR_LOGGERS == null) {
      this.LOG_AGGREGATOR_LOGGERS = new ArrayList<String>();
    }
    this.LOG_AGGREGATOR_LOGGERS.add(LOG_AGGREGATOR_LOGGERSItem);
    return this;
  }

   /**
   * List of loggers that will send HTTP logs to the collector, these can include any or all of:  awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs.
   * @return LOG_AGGREGATOR_LOGGERS
  **/
  @Schema(description = "List of loggers that will send HTTP logs to the collector, these can include any or all of:  awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs.")
  public List<String> getLOGAGGREGATORLOGGERS() {
    return LOG_AGGREGATOR_LOGGERS;
  }

  public void setLOGAGGREGATORLOGGERS(List<String> LOG_AGGREGATOR_LOGGERS) {
    this.LOG_AGGREGATOR_LOGGERS = LOG_AGGREGATOR_LOGGERS;
  }

  public SettingSingleton LOG_AGGREGATOR_INDIVIDUAL_FACTS(Boolean LOG_AGGREGATOR_INDIVIDUAL_FACTS) {
    this.LOG_AGGREGATOR_INDIVIDUAL_FACTS = LOG_AGGREGATOR_INDIVIDUAL_FACTS;
    return this;
  }

   /**
   * If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing.
   * @return LOG_AGGREGATOR_INDIVIDUAL_FACTS
  **/
  @Schema(description = "If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing.")
  public Boolean isLOGAGGREGATORINDIVIDUALFACTS() {
    return LOG_AGGREGATOR_INDIVIDUAL_FACTS;
  }

  public void setLOGAGGREGATORINDIVIDUALFACTS(Boolean LOG_AGGREGATOR_INDIVIDUAL_FACTS) {
    this.LOG_AGGREGATOR_INDIVIDUAL_FACTS = LOG_AGGREGATOR_INDIVIDUAL_FACTS;
  }

  public SettingSingleton LOG_AGGREGATOR_ENABLED(Boolean LOG_AGGREGATOR_ENABLED) {
    this.LOG_AGGREGATOR_ENABLED = LOG_AGGREGATOR_ENABLED;
    return this;
  }

   /**
   * Enable sending logs to external log aggregator.
   * @return LOG_AGGREGATOR_ENABLED
  **/
  @Schema(description = "Enable sending logs to external log aggregator.")
  public Boolean isLOGAGGREGATORENABLED() {
    return LOG_AGGREGATOR_ENABLED;
  }

  public void setLOGAGGREGATORENABLED(Boolean LOG_AGGREGATOR_ENABLED) {
    this.LOG_AGGREGATOR_ENABLED = LOG_AGGREGATOR_ENABLED;
  }

  public SettingSingleton LOG_AGGREGATOR_TOWER_UUID(String LOG_AGGREGATOR_TOWER_UUID) {
    this.LOG_AGGREGATOR_TOWER_UUID = LOG_AGGREGATOR_TOWER_UUID;
    return this;
  }

   /**
   * Useful to uniquely identify instances.
   * @return LOG_AGGREGATOR_TOWER_UUID
  **/
  @Schema(description = "Useful to uniquely identify instances.")
  public String getLOGAGGREGATORTOWERUUID() {
    return LOG_AGGREGATOR_TOWER_UUID;
  }

  public void setLOGAGGREGATORTOWERUUID(String LOG_AGGREGATOR_TOWER_UUID) {
    this.LOG_AGGREGATOR_TOWER_UUID = LOG_AGGREGATOR_TOWER_UUID;
  }

  public SettingSingleton LOG_AGGREGATOR_PROTOCOL(LOGAGGREGATORPROTOCOLEnum LOG_AGGREGATOR_PROTOCOL) {
    this.LOG_AGGREGATOR_PROTOCOL = LOG_AGGREGATOR_PROTOCOL;
    return this;
  }

   /**
   * Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.
   * @return LOG_AGGREGATOR_PROTOCOL
  **/
  @Schema(description = "Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.")
  public LOGAGGREGATORPROTOCOLEnum getLOGAGGREGATORPROTOCOL() {
    return LOG_AGGREGATOR_PROTOCOL;
  }

  public void setLOGAGGREGATORPROTOCOL(LOGAGGREGATORPROTOCOLEnum LOG_AGGREGATOR_PROTOCOL) {
    this.LOG_AGGREGATOR_PROTOCOL = LOG_AGGREGATOR_PROTOCOL;
  }

  public SettingSingleton LOG_AGGREGATOR_TCP_TIMEOUT(Integer LOG_AGGREGATOR_TCP_TIMEOUT) {
    this.LOG_AGGREGATOR_TCP_TIMEOUT = LOG_AGGREGATOR_TCP_TIMEOUT;
    return this;
  }

   /**
   * Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols.
   * @return LOG_AGGREGATOR_TCP_TIMEOUT
  **/
  @Schema(description = "Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols.")
  public Integer getLOGAGGREGATORTCPTIMEOUT() {
    return LOG_AGGREGATOR_TCP_TIMEOUT;
  }

  public void setLOGAGGREGATORTCPTIMEOUT(Integer LOG_AGGREGATOR_TCP_TIMEOUT) {
    this.LOG_AGGREGATOR_TCP_TIMEOUT = LOG_AGGREGATOR_TCP_TIMEOUT;
  }

  public SettingSingleton LOG_AGGREGATOR_VERIFY_CERT(Boolean LOG_AGGREGATOR_VERIFY_CERT) {
    this.LOG_AGGREGATOR_VERIFY_CERT = LOG_AGGREGATOR_VERIFY_CERT;
    return this;
  }

   /**
   * Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is \&quot;https\&quot;. If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection.
   * @return LOG_AGGREGATOR_VERIFY_CERT
  **/
  @Schema(description = "Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is \"https\". If enabled, the log handler will verify certificate sent by external log aggregator before establishing connection.")
  public Boolean isLOGAGGREGATORVERIFYCERT() {
    return LOG_AGGREGATOR_VERIFY_CERT;
  }

  public void setLOGAGGREGATORVERIFYCERT(Boolean LOG_AGGREGATOR_VERIFY_CERT) {
    this.LOG_AGGREGATOR_VERIFY_CERT = LOG_AGGREGATOR_VERIFY_CERT;
  }

  public SettingSingleton LOG_AGGREGATOR_LEVEL(LOGAGGREGATORLEVELEnum LOG_AGGREGATOR_LEVEL) {
    this.LOG_AGGREGATOR_LEVEL = LOG_AGGREGATOR_LEVEL;
    return this;
  }

   /**
   * Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)
   * @return LOG_AGGREGATOR_LEVEL
  **/
  @Schema(description = "Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)")
  public LOGAGGREGATORLEVELEnum getLOGAGGREGATORLEVEL() {
    return LOG_AGGREGATOR_LEVEL;
  }

  public void setLOGAGGREGATORLEVEL(LOGAGGREGATORLEVELEnum LOG_AGGREGATOR_LEVEL) {
    this.LOG_AGGREGATOR_LEVEL = LOG_AGGREGATOR_LEVEL;
  }

  public SettingSingleton LOG_AGGREGATOR_MAX_DISK_USAGE_GB(Integer LOG_AGGREGATOR_MAX_DISK_USAGE_GB) {
    this.LOG_AGGREGATOR_MAX_DISK_USAGE_GB = LOG_AGGREGATOR_MAX_DISK_USAGE_GB;
    return this;
  }

   /**
   * Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting.
   * minimum: 1
   * @return LOG_AGGREGATOR_MAX_DISK_USAGE_GB
  **/
  @Schema(description = "Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting.")
  public Integer getLOGAGGREGATORMAXDISKUSAGEGB() {
    return LOG_AGGREGATOR_MAX_DISK_USAGE_GB;
  }

  public void setLOGAGGREGATORMAXDISKUSAGEGB(Integer LOG_AGGREGATOR_MAX_DISK_USAGE_GB) {
    this.LOG_AGGREGATOR_MAX_DISK_USAGE_GB = LOG_AGGREGATOR_MAX_DISK_USAGE_GB;
  }

  public SettingSingleton LOG_AGGREGATOR_MAX_DISK_USAGE_PATH(String LOG_AGGREGATOR_MAX_DISK_USAGE_PATH) {
    this.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH = LOG_AGGREGATOR_MAX_DISK_USAGE_PATH;
    return this;
  }

   /**
   * Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting.
   * @return LOG_AGGREGATOR_MAX_DISK_USAGE_PATH
  **/
  @Schema(description = "Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting.")
  public String getLOGAGGREGATORMAXDISKUSAGEPATH() {
    return LOG_AGGREGATOR_MAX_DISK_USAGE_PATH;
  }

  public void setLOGAGGREGATORMAXDISKUSAGEPATH(String LOG_AGGREGATOR_MAX_DISK_USAGE_PATH) {
    this.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH = LOG_AGGREGATOR_MAX_DISK_USAGE_PATH;
  }

  public SettingSingleton LOG_AGGREGATOR_RSYSLOGD_DEBUG(Boolean LOG_AGGREGATOR_RSYSLOGD_DEBUG) {
    this.LOG_AGGREGATOR_RSYSLOGD_DEBUG = LOG_AGGREGATOR_RSYSLOGD_DEBUG;
    return this;
  }

   /**
   * Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation.
   * @return LOG_AGGREGATOR_RSYSLOGD_DEBUG
  **/
  @Schema(description = "Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation.")
  public Boolean isLOGAGGREGATORRSYSLOGDDEBUG() {
    return LOG_AGGREGATOR_RSYSLOGD_DEBUG;
  }

  public void setLOGAGGREGATORRSYSLOGDDEBUG(Boolean LOG_AGGREGATOR_RSYSLOGD_DEBUG) {
    this.LOG_AGGREGATOR_RSYSLOGD_DEBUG = LOG_AGGREGATOR_RSYSLOGD_DEBUG;
  }

  public SettingSingleton apI400ERRORLOGFORMAT(String apI400ERRORLOGFORMAT) {
    this.apI400ERRORLOGFORMAT = apI400ERRORLOGFORMAT;
    return this;
  }

   /**
   * The format of logged messages when an API 4XX error occurs, the following variables will be substituted:  status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {&lt;variable name&gt;}.
   * @return apI400ERRORLOGFORMAT
  **/
  @Schema(description = "The format of logged messages when an API 4XX error occurs, the following variables will be substituted:  status_code - The HTTP status code of the error user_name - The user name attempting to use the API url_path - The URL path to the API endpoint called remote_addr - The remote address seen for the user error - The error set by the api endpoint Variables need to be in the format {<variable name>}.")
  public String getApI400ERRORLOGFORMAT() {
    return apI400ERRORLOGFORMAT;
  }

  public void setApI400ERRORLOGFORMAT(String apI400ERRORLOGFORMAT) {
    this.apI400ERRORLOGFORMAT = apI400ERRORLOGFORMAT;
  }

  public SettingSingleton AUTOMATION_ANALYTICS_LAST_GATHER(OffsetDateTime AUTOMATION_ANALYTICS_LAST_GATHER) {
    this.AUTOMATION_ANALYTICS_LAST_GATHER = AUTOMATION_ANALYTICS_LAST_GATHER;
    return this;
  }

   /**
   * Get AUTOMATION_ANALYTICS_LAST_GATHER
   * @return AUTOMATION_ANALYTICS_LAST_GATHER
  **/
  @Schema(required = true, description = "")
  public OffsetDateTime getAUTOMATIONANALYTICSLASTGATHER() {
    return AUTOMATION_ANALYTICS_LAST_GATHER;
  }

  public void setAUTOMATIONANALYTICSLASTGATHER(OffsetDateTime AUTOMATION_ANALYTICS_LAST_GATHER) {
    this.AUTOMATION_ANALYTICS_LAST_GATHER = AUTOMATION_ANALYTICS_LAST_GATHER;
  }

  public SettingSingleton AUTOMATION_ANALYTICS_LAST_ENTRIES(String AUTOMATION_ANALYTICS_LAST_ENTRIES) {
    this.AUTOMATION_ANALYTICS_LAST_ENTRIES = AUTOMATION_ANALYTICS_LAST_ENTRIES;
    return this;
  }

   /**
   * Get AUTOMATION_ANALYTICS_LAST_ENTRIES
   * @return AUTOMATION_ANALYTICS_LAST_ENTRIES
  **/
  @Schema(description = "")
  public String getAUTOMATIONANALYTICSLASTENTRIES() {
    return AUTOMATION_ANALYTICS_LAST_ENTRIES;
  }

  public void setAUTOMATIONANALYTICSLASTENTRIES(String AUTOMATION_ANALYTICS_LAST_ENTRIES) {
    this.AUTOMATION_ANALYTICS_LAST_ENTRIES = AUTOMATION_ANALYTICS_LAST_ENTRIES;
  }

  public SettingSingleton AUTOMATION_ANALYTICS_GATHER_INTERVAL(Integer AUTOMATION_ANALYTICS_GATHER_INTERVAL) {
    this.AUTOMATION_ANALYTICS_GATHER_INTERVAL = AUTOMATION_ANALYTICS_GATHER_INTERVAL;
    return this;
  }

   /**
   * Interval (in seconds) between data gathering.
   * minimum: 1800
   * @return AUTOMATION_ANALYTICS_GATHER_INTERVAL
  **/
  @Schema(description = "Interval (in seconds) between data gathering.")
  public Integer getAUTOMATIONANALYTICSGATHERINTERVAL() {
    return AUTOMATION_ANALYTICS_GATHER_INTERVAL;
  }

  public void setAUTOMATIONANALYTICSGATHERINTERVAL(Integer AUTOMATION_ANALYTICS_GATHER_INTERVAL) {
    this.AUTOMATION_ANALYTICS_GATHER_INTERVAL = AUTOMATION_ANALYTICS_GATHER_INTERVAL;
  }

   /**
   * Indicates whether the instance is part of a kubernetes-based deployment.
   * @return isK8S
  **/
  @Schema(description = "Indicates whether the instance is part of a kubernetes-based deployment.")
  public Boolean isIsK8S() {
    return isK8S;
  }

  public SettingSingleton SESSION_COOKIE_AGE(Integer SESSION_COOKIE_AGE) {
    this.SESSION_COOKIE_AGE = SESSION_COOKIE_AGE;
    return this;
  }

   /**
   * Number of seconds that a user is inactive before they will need to login again.
   * minimum: 60
   * maximum: 30000000000
   * @return SESSION_COOKIE_AGE
  **/
  @Schema(required = true, description = "Number of seconds that a user is inactive before they will need to login again.")
  public Integer getSESSIONCOOKIEAGE() {
    return SESSION_COOKIE_AGE;
  }

  public void setSESSIONCOOKIEAGE(Integer SESSION_COOKIE_AGE) {
    this.SESSION_COOKIE_AGE = SESSION_COOKIE_AGE;
  }

  public SettingSingleton SESSIONS_PER_USER(Integer SESSIONS_PER_USER) {
    this.SESSIONS_PER_USER = SESSIONS_PER_USER;
    return this;
  }

   /**
   * Maximum number of simultaneous logged in sessions a user may have. To disable enter -1.
   * minimum: -1
   * @return SESSIONS_PER_USER
  **/
  @Schema(required = true, description = "Maximum number of simultaneous logged in sessions a user may have. To disable enter -1.")
  public Integer getSESSIONSPERUSER() {
    return SESSIONS_PER_USER;
  }

  public void setSESSIONSPERUSER(Integer SESSIONS_PER_USER) {
    this.SESSIONS_PER_USER = SESSIONS_PER_USER;
  }

  public SettingSingleton DISABLE_LOCAL_AUTH(Boolean DISABLE_LOCAL_AUTH) {
    this.DISABLE_LOCAL_AUTH = DISABLE_LOCAL_AUTH;
    return this;
  }

   /**
   * Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration.
   * @return DISABLE_LOCAL_AUTH
  **/
  @Schema(required = true, description = "Controls whether users are prevented from using the built-in authentication system. You probably want to do this if you are using an LDAP or SAML integration.")
  public Boolean isDISABLELOCALAUTH() {
    return DISABLE_LOCAL_AUTH;
  }

  public void setDISABLELOCALAUTH(Boolean DISABLE_LOCAL_AUTH) {
    this.DISABLE_LOCAL_AUTH = DISABLE_LOCAL_AUTH;
  }

  public SettingSingleton AUTH_BASIC_ENABLED(Boolean AUTH_BASIC_ENABLED) {
    this.AUTH_BASIC_ENABLED = AUTH_BASIC_ENABLED;
    return this;
  }

   /**
   * Enable HTTP Basic Auth for the API Browser.
   * @return AUTH_BASIC_ENABLED
  **/
  @Schema(required = true, description = "Enable HTTP Basic Auth for the API Browser.")
  public Boolean isAUTHBASICENABLED() {
    return AUTH_BASIC_ENABLED;
  }

  public void setAUTHBASICENABLED(Boolean AUTH_BASIC_ENABLED) {
    this.AUTH_BASIC_ENABLED = AUTH_BASIC_ENABLED;
  }

  public SettingSingleton oaUTH2PROVIDER(Map<String, Integer> oaUTH2PROVIDER) {
    this.oaUTH2PROVIDER = oaUTH2PROVIDER;
    return this;
  }

  public SettingSingleton putOaUTH2PROVIDERItem(String key, Integer oaUTH2PROVIDERItem) {
    if (this.oaUTH2PROVIDER == null) {
      this.oaUTH2PROVIDER = new HashMap<String, Integer>();
    }
    this.oaUTH2PROVIDER.put(key, oaUTH2PROVIDERItem);
    return this;
  }

   /**
   * Dictionary for customizing OAuth 2 timeouts, available items are &#x60;ACCESS_TOKEN_EXPIRE_SECONDS&#x60;, the duration of access tokens in the number of seconds, &#x60;AUTHORIZATION_CODE_EXPIRE_SECONDS&#x60;, the duration of authorization codes in the number of seconds, and &#x60;REFRESH_TOKEN_EXPIRE_SECONDS&#x60;, the duration of refresh tokens, after expired access tokens, in the number of seconds.
   * @return oaUTH2PROVIDER
  **/
  @Schema(description = "Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds.")
  public Map<String, Integer> getOaUTH2PROVIDER() {
    return oaUTH2PROVIDER;
  }

  public void setOaUTH2PROVIDER(Map<String, Integer> oaUTH2PROVIDER) {
    this.oaUTH2PROVIDER = oaUTH2PROVIDER;
  }

  public SettingSingleton alLOWOAUTH2FOREXTERNALUSERS(Boolean alLOWOAUTH2FOREXTERNALUSERS) {
    this.alLOWOAUTH2FOREXTERNALUSERS = alLOWOAUTH2FOREXTERNALUSERS;
    return this;
  }

   /**
   * For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off.
   * @return alLOWOAUTH2FOREXTERNALUSERS
  **/
  @Schema(description = "For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off.")
  public Boolean isAlLOWOAUTH2FOREXTERNALUSERS() {
    return alLOWOAUTH2FOREXTERNALUSERS;
  }

  public void setAlLOWOAUTH2FOREXTERNALUSERS(Boolean alLOWOAUTH2FOREXTERNALUSERS) {
    this.alLOWOAUTH2FOREXTERNALUSERS = alLOWOAUTH2FOREXTERNALUSERS;
  }

  public SettingSingleton LOGIN_REDIRECT_OVERRIDE(String LOGIN_REDIRECT_OVERRIDE) {
    this.LOGIN_REDIRECT_OVERRIDE = LOGIN_REDIRECT_OVERRIDE;
    return this;
  }

   /**
   * URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page.
   * @return LOGIN_REDIRECT_OVERRIDE
  **/
  @Schema(description = "URL to which unauthorized users will be redirected to log in.  If blank, users will be sent to the login page.")
  public String getLOGINREDIRECTOVERRIDE() {
    return LOGIN_REDIRECT_OVERRIDE;
  }

  public void setLOGINREDIRECTOVERRIDE(String LOGIN_REDIRECT_OVERRIDE) {
    this.LOGIN_REDIRECT_OVERRIDE = LOGIN_REDIRECT_OVERRIDE;
  }

   /**
   * Enable or Disable User Analytics Tracking.
   * @return PENDO_TRACKING_STATE
  **/
  @Schema(description = "Enable or Disable User Analytics Tracking.")
  public PENDOTRACKINGSTATEEnum getPENDOTRACKINGSTATE() {
    return PENDO_TRACKING_STATE;
  }

  public SettingSingleton CUSTOM_LOGIN_INFO(String CUSTOM_LOGIN_INFO) {
    this.CUSTOM_LOGIN_INFO = CUSTOM_LOGIN_INFO;
    return this;
  }

   /**
   * If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported.
   * @return CUSTOM_LOGIN_INFO
  **/
  @Schema(description = "If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported.")
  public String getCUSTOMLOGININFO() {
    return CUSTOM_LOGIN_INFO;
  }

  public void setCUSTOMLOGININFO(String CUSTOM_LOGIN_INFO) {
    this.CUSTOM_LOGIN_INFO = CUSTOM_LOGIN_INFO;
  }

  public SettingSingleton CUSTOM_LOGO(String CUSTOM_LOGO) {
    this.CUSTOM_LOGO = CUSTOM_LOGO;
    return this;
  }

   /**
   * To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported.
   * @return CUSTOM_LOGO
  **/
  @Schema(description = "To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported.")
  public String getCUSTOMLOGO() {
    return CUSTOM_LOGO;
  }

  public void setCUSTOMLOGO(String CUSTOM_LOGO) {
    this.CUSTOM_LOGO = CUSTOM_LOGO;
  }

  public SettingSingleton MAX_UI_JOB_EVENTS(Integer MAX_UI_JOB_EVENTS) {
    this.MAX_UI_JOB_EVENTS = MAX_UI_JOB_EVENTS;
    return this;
  }

   /**
   * Maximum number of job events for the UI to retrieve within a single request.
   * minimum: 100
   * @return MAX_UI_JOB_EVENTS
  **/
  @Schema(required = true, description = "Maximum number of job events for the UI to retrieve within a single request.")
  public Integer getMAXUIJOBEVENTS() {
    return MAX_UI_JOB_EVENTS;
  }

  public void setMAXUIJOBEVENTS(Integer MAX_UI_JOB_EVENTS) {
    this.MAX_UI_JOB_EVENTS = MAX_UI_JOB_EVENTS;
  }

  public SettingSingleton UI_LIVE_UPDATES_ENABLED(Boolean UI_LIVE_UPDATES_ENABLED) {
    this.UI_LIVE_UPDATES_ENABLED = UI_LIVE_UPDATES_ENABLED;
    return this;
  }

   /**
   * If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details.
   * @return UI_LIVE_UPDATES_ENABLED
  **/
  @Schema(required = true, description = "If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details.")
  public Boolean isUILIVEUPDATESENABLED() {
    return UI_LIVE_UPDATES_ENABLED;
  }

  public void setUILIVEUPDATESENABLED(Boolean UI_LIVE_UPDATES_ENABLED) {
    this.UI_LIVE_UPDATES_ENABLED = UI_LIVE_UPDATES_ENABLED;
  }

   /**
   * List of authentication backends that are enabled based on license features and other authentication settings.
   * @return AUTHENTICATION_BACKENDS
  **/
  @Schema(description = "List of authentication backends that are enabled based on license features and other authentication settings.")
  public List<String> getAUTHENTICATIONBACKENDS() {
    return AUTHENTICATION_BACKENDS;
  }

  public SettingSingleton SOCIAL_AUTH_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_ORGANIZATION_MAP = SOCIAL_AUTH_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHORGANIZATIONMAP() {
    return SOCIAL_AUTH_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_ORGANIZATION_MAP = SOCIAL_AUTH_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_TEAM_MAP) {
    this.SOCIAL_AUTH_TEAM_MAP = SOCIAL_AUTH_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_TEAM_MAP == null) {
      this.SOCIAL_AUTH_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_TEAM_MAP.put(key, SOCIAL_AUTH_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHTEAMMAP() {
    return SOCIAL_AUTH_TEAM_MAP;
  }

  public void setSOCIALAUTHTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_TEAM_MAP) {
    this.SOCIAL_AUTH_TEAM_MAP = SOCIAL_AUTH_TEAM_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_USER_FIELDS(List<String> SOCIAL_AUTH_USER_FIELDS) {
    this.SOCIAL_AUTH_USER_FIELDS = SOCIAL_AUTH_USER_FIELDS;
    return this;
  }

  public SettingSingleton addSOCIALAUTHUSERFIELDSItem(String SOCIAL_AUTH_USER_FIELDSItem) {
    if (this.SOCIAL_AUTH_USER_FIELDS == null) {
      this.SOCIAL_AUTH_USER_FIELDS = new ArrayList<String>();
    }
    this.SOCIAL_AUTH_USER_FIELDS.add(SOCIAL_AUTH_USER_FIELDSItem);
    return this;
  }

   /**
   * When set to an empty list &#x60;[]&#x60;, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login.
   * @return SOCIAL_AUTH_USER_FIELDS
  **/
  @Schema(description = "When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login.")
  public List<String> getSOCIALAUTHUSERFIELDS() {
    return SOCIAL_AUTH_USER_FIELDS;
  }

  public void setSOCIALAUTHUSERFIELDS(List<String> SOCIAL_AUTH_USER_FIELDS) {
    this.SOCIAL_AUTH_USER_FIELDS = SOCIAL_AUTH_USER_FIELDS;
  }

  public SettingSingleton AUTH_LDAP_SERVER_URI(String AUTH_LDAP_SERVER_URI) {
    this.AUTH_LDAP_SERVER_URI = AUTH_LDAP_SERVER_URI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return AUTH_LDAP_SERVER_URI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAUTHLDAPSERVERURI() {
    return AUTH_LDAP_SERVER_URI;
  }

  public void setAUTHLDAPSERVERURI(String AUTH_LDAP_SERVER_URI) {
    this.AUTH_LDAP_SERVER_URI = AUTH_LDAP_SERVER_URI;
  }

  public SettingSingleton AUTH_LDAP_BIND_DN(String AUTH_LDAP_BIND_DN) {
    this.AUTH_LDAP_BIND_DN = AUTH_LDAP_BIND_DN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return AUTH_LDAP_BIND_DN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAUTHLDAPBINDDN() {
    return AUTH_LDAP_BIND_DN;
  }

  public void setAUTHLDAPBINDDN(String AUTH_LDAP_BIND_DN) {
    this.AUTH_LDAP_BIND_DN = AUTH_LDAP_BIND_DN;
  }

  public SettingSingleton AUTH_LDAP_BIND_PASSWORD(String AUTH_LDAP_BIND_PASSWORD) {
    this.AUTH_LDAP_BIND_PASSWORD = AUTH_LDAP_BIND_PASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return AUTH_LDAP_BIND_PASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAUTHLDAPBINDPASSWORD() {
    return AUTH_LDAP_BIND_PASSWORD;
  }

  public void setAUTHLDAPBINDPASSWORD(String AUTH_LDAP_BIND_PASSWORD) {
    this.AUTH_LDAP_BIND_PASSWORD = AUTH_LDAP_BIND_PASSWORD;
  }

  public SettingSingleton AUTH_LDAP_START_TLS(Boolean AUTH_LDAP_START_TLS) {
    this.AUTH_LDAP_START_TLS = AUTH_LDAP_START_TLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return AUTH_LDAP_START_TLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAUTHLDAPSTARTTLS() {
    return AUTH_LDAP_START_TLS;
  }

  public void setAUTHLDAPSTARTTLS(Boolean AUTH_LDAP_START_TLS) {
    this.AUTH_LDAP_START_TLS = AUTH_LDAP_START_TLS;
  }

  public SettingSingleton AUTH_LDAP_CONNECTION_OPTIONS(Map<String, String> AUTH_LDAP_CONNECTION_OPTIONS) {
    this.AUTH_LDAP_CONNECTION_OPTIONS = AUTH_LDAP_CONNECTION_OPTIONS;
    return this;
  }

  public SettingSingleton putAUTHLDAPCONNECTIONOPTIONSItem(String key, String AUTH_LDAP_CONNECTION_OPTIONSItem) {
    if (this.AUTH_LDAP_CONNECTION_OPTIONS == null) {
      this.AUTH_LDAP_CONNECTION_OPTIONS = new HashMap<String, String>();
    }
    this.AUTH_LDAP_CONNECTION_OPTIONS.put(key, AUTH_LDAP_CONNECTION_OPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return AUTH_LDAP_CONNECTION_OPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAUTHLDAPCONNECTIONOPTIONS() {
    return AUTH_LDAP_CONNECTION_OPTIONS;
  }

  public void setAUTHLDAPCONNECTIONOPTIONS(Map<String, String> AUTH_LDAP_CONNECTION_OPTIONS) {
    this.AUTH_LDAP_CONNECTION_OPTIONS = AUTH_LDAP_CONNECTION_OPTIONS;
  }

  public SettingSingleton AUTH_LDAP_USER_SEARCH(List<String> AUTH_LDAP_USER_SEARCH) {
    this.AUTH_LDAP_USER_SEARCH = AUTH_LDAP_USER_SEARCH;
    return this;
  }

  public SettingSingleton addAUTHLDAPUSERSEARCHItem(String AUTH_LDAP_USER_SEARCHItem) {
    if (this.AUTH_LDAP_USER_SEARCH == null) {
      this.AUTH_LDAP_USER_SEARCH = new ArrayList<String>();
    }
    this.AUTH_LDAP_USER_SEARCH.add(AUTH_LDAP_USER_SEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return AUTH_LDAP_USER_SEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAUTHLDAPUSERSEARCH() {
    return AUTH_LDAP_USER_SEARCH;
  }

  public void setAUTHLDAPUSERSEARCH(List<String> AUTH_LDAP_USER_SEARCH) {
    this.AUTH_LDAP_USER_SEARCH = AUTH_LDAP_USER_SEARCH;
  }

  public SettingSingleton AUTH_LDAP_USER_DN_TEMPLATE(String AUTH_LDAP_USER_DN_TEMPLATE) {
    this.AUTH_LDAP_USER_DN_TEMPLATE = AUTH_LDAP_USER_DN_TEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return AUTH_LDAP_USER_DN_TEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAUTHLDAPUSERDNTEMPLATE() {
    return AUTH_LDAP_USER_DN_TEMPLATE;
  }

  public void setAUTHLDAPUSERDNTEMPLATE(String AUTH_LDAP_USER_DN_TEMPLATE) {
    this.AUTH_LDAP_USER_DN_TEMPLATE = AUTH_LDAP_USER_DN_TEMPLATE;
  }

  public SettingSingleton AUTH_LDAP_USER_ATTR_MAP(Map<String, String> AUTH_LDAP_USER_ATTR_MAP) {
    this.AUTH_LDAP_USER_ATTR_MAP = AUTH_LDAP_USER_ATTR_MAP;
    return this;
  }

  public SettingSingleton putAUTHLDAPUSERATTRMAPItem(String key, String AUTH_LDAP_USER_ATTR_MAPItem) {
    if (this.AUTH_LDAP_USER_ATTR_MAP == null) {
      this.AUTH_LDAP_USER_ATTR_MAP = new HashMap<String, String>();
    }
    this.AUTH_LDAP_USER_ATTR_MAP.put(key, AUTH_LDAP_USER_ATTR_MAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return AUTH_LDAP_USER_ATTR_MAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAUTHLDAPUSERATTRMAP() {
    return AUTH_LDAP_USER_ATTR_MAP;
  }

  public void setAUTHLDAPUSERATTRMAP(Map<String, String> AUTH_LDAP_USER_ATTR_MAP) {
    this.AUTH_LDAP_USER_ATTR_MAP = AUTH_LDAP_USER_ATTR_MAP;
  }

  public SettingSingleton AUTH_LDAP_GROUP_SEARCH(List<String> AUTH_LDAP_GROUP_SEARCH) {
    this.AUTH_LDAP_GROUP_SEARCH = AUTH_LDAP_GROUP_SEARCH;
    return this;
  }

  public SettingSingleton addAUTHLDAPGROUPSEARCHItem(String AUTH_LDAP_GROUP_SEARCHItem) {
    if (this.AUTH_LDAP_GROUP_SEARCH == null) {
      this.AUTH_LDAP_GROUP_SEARCH = new ArrayList<String>();
    }
    this.AUTH_LDAP_GROUP_SEARCH.add(AUTH_LDAP_GROUP_SEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return AUTH_LDAP_GROUP_SEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAUTHLDAPGROUPSEARCH() {
    return AUTH_LDAP_GROUP_SEARCH;
  }

  public void setAUTHLDAPGROUPSEARCH(List<String> AUTH_LDAP_GROUP_SEARCH) {
    this.AUTH_LDAP_GROUP_SEARCH = AUTH_LDAP_GROUP_SEARCH;
  }

  public SettingSingleton AUTH_LDAP_GROUP_TYPE(AUTHLDAPGROUPTYPEEnum AUTH_LDAP_GROUP_TYPE) {
    this.AUTH_LDAP_GROUP_TYPE = AUTH_LDAP_GROUP_TYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return AUTH_LDAP_GROUP_TYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AUTHLDAPGROUPTYPEEnum getAUTHLDAPGROUPTYPE() {
    return AUTH_LDAP_GROUP_TYPE;
  }

  public void setAUTHLDAPGROUPTYPE(AUTHLDAPGROUPTYPEEnum AUTH_LDAP_GROUP_TYPE) {
    this.AUTH_LDAP_GROUP_TYPE = AUTH_LDAP_GROUP_TYPE;
  }

  public SettingSingleton AUTH_LDAP_GROUP_TYPE_PARAMS(Map<String, String> AUTH_LDAP_GROUP_TYPE_PARAMS) {
    this.AUTH_LDAP_GROUP_TYPE_PARAMS = AUTH_LDAP_GROUP_TYPE_PARAMS;
    return this;
  }

  public SettingSingleton putAUTHLDAPGROUPTYPEPARAMSItem(String key, String AUTH_LDAP_GROUP_TYPE_PARAMSItem) {
    if (this.AUTH_LDAP_GROUP_TYPE_PARAMS == null) {
      this.AUTH_LDAP_GROUP_TYPE_PARAMS = new HashMap<String, String>();
    }
    this.AUTH_LDAP_GROUP_TYPE_PARAMS.put(key, AUTH_LDAP_GROUP_TYPE_PARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return AUTH_LDAP_GROUP_TYPE_PARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAUTHLDAPGROUPTYPEPARAMS() {
    return AUTH_LDAP_GROUP_TYPE_PARAMS;
  }

  public void setAUTHLDAPGROUPTYPEPARAMS(Map<String, String> AUTH_LDAP_GROUP_TYPE_PARAMS) {
    this.AUTH_LDAP_GROUP_TYPE_PARAMS = AUTH_LDAP_GROUP_TYPE_PARAMS;
  }

  public SettingSingleton AUTH_LDAP_REQUIRE_GROUP(String AUTH_LDAP_REQUIRE_GROUP) {
    this.AUTH_LDAP_REQUIRE_GROUP = AUTH_LDAP_REQUIRE_GROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return AUTH_LDAP_REQUIRE_GROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAUTHLDAPREQUIREGROUP() {
    return AUTH_LDAP_REQUIRE_GROUP;
  }

  public void setAUTHLDAPREQUIREGROUP(String AUTH_LDAP_REQUIRE_GROUP) {
    this.AUTH_LDAP_REQUIRE_GROUP = AUTH_LDAP_REQUIRE_GROUP;
  }

  public SettingSingleton AUTH_LDAP_DENY_GROUP(String AUTH_LDAP_DENY_GROUP) {
    this.AUTH_LDAP_DENY_GROUP = AUTH_LDAP_DENY_GROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return AUTH_LDAP_DENY_GROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAUTHLDAPDENYGROUP() {
    return AUTH_LDAP_DENY_GROUP;
  }

  public void setAUTHLDAPDENYGROUP(String AUTH_LDAP_DENY_GROUP) {
    this.AUTH_LDAP_DENY_GROUP = AUTH_LDAP_DENY_GROUP;
  }

  public SettingSingleton AUTH_LDAP_USER_FLAGS_BY_GROUP(Map<String, List<String>> AUTH_LDAP_USER_FLAGS_BY_GROUP) {
    this.AUTH_LDAP_USER_FLAGS_BY_GROUP = AUTH_LDAP_USER_FLAGS_BY_GROUP;
    return this;
  }

  public SettingSingleton putAUTHLDAPUSERFLAGSBYGROUPItem(String key, List<String> AUTH_LDAP_USER_FLAGS_BY_GROUPItem) {
    if (this.AUTH_LDAP_USER_FLAGS_BY_GROUP == null) {
      this.AUTH_LDAP_USER_FLAGS_BY_GROUP = new HashMap<String, List<String>>();
    }
    this.AUTH_LDAP_USER_FLAGS_BY_GROUP.put(key, AUTH_LDAP_USER_FLAGS_BY_GROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return AUTH_LDAP_USER_FLAGS_BY_GROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAUTHLDAPUSERFLAGSBYGROUP() {
    return AUTH_LDAP_USER_FLAGS_BY_GROUP;
  }

  public void setAUTHLDAPUSERFLAGSBYGROUP(Map<String, List<String>> AUTH_LDAP_USER_FLAGS_BY_GROUP) {
    this.AUTH_LDAP_USER_FLAGS_BY_GROUP = AUTH_LDAP_USER_FLAGS_BY_GROUP;
  }

  public SettingSingleton AUTH_LDAP_ORGANIZATION_MAP(Map<String, Map<String, String>> AUTH_LDAP_ORGANIZATION_MAP) {
    this.AUTH_LDAP_ORGANIZATION_MAP = AUTH_LDAP_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putAUTHLDAPORGANIZATIONMAPItem(String key, Map<String, String> AUTH_LDAP_ORGANIZATION_MAPItem) {
    if (this.AUTH_LDAP_ORGANIZATION_MAP == null) {
      this.AUTH_LDAP_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.AUTH_LDAP_ORGANIZATION_MAP.put(key, AUTH_LDAP_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return AUTH_LDAP_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAUTHLDAPORGANIZATIONMAP() {
    return AUTH_LDAP_ORGANIZATION_MAP;
  }

  public void setAUTHLDAPORGANIZATIONMAP(Map<String, Map<String, String>> AUTH_LDAP_ORGANIZATION_MAP) {
    this.AUTH_LDAP_ORGANIZATION_MAP = AUTH_LDAP_ORGANIZATION_MAP;
  }

  public SettingSingleton AUTH_LDAP_TEAM_MAP(Map<String, Map<String, String>> AUTH_LDAP_TEAM_MAP) {
    this.AUTH_LDAP_TEAM_MAP = AUTH_LDAP_TEAM_MAP;
    return this;
  }

  public SettingSingleton putAUTHLDAPTEAMMAPItem(String key, Map<String, String> AUTH_LDAP_TEAM_MAPItem) {
    if (this.AUTH_LDAP_TEAM_MAP == null) {
      this.AUTH_LDAP_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.AUTH_LDAP_TEAM_MAP.put(key, AUTH_LDAP_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return AUTH_LDAP_TEAM_MAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAUTHLDAPTEAMMAP() {
    return AUTH_LDAP_TEAM_MAP;
  }

  public void setAUTHLDAPTEAMMAP(Map<String, Map<String, String>> AUTH_LDAP_TEAM_MAP) {
    this.AUTH_LDAP_TEAM_MAP = AUTH_LDAP_TEAM_MAP;
  }

  public SettingSingleton auTHLDAP1SERVERURI(String auTHLDAP1SERVERURI) {
    this.auTHLDAP1SERVERURI = auTHLDAP1SERVERURI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return auTHLDAP1SERVERURI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAuTHLDAP1SERVERURI() {
    return auTHLDAP1SERVERURI;
  }

  public void setAuTHLDAP1SERVERURI(String auTHLDAP1SERVERURI) {
    this.auTHLDAP1SERVERURI = auTHLDAP1SERVERURI;
  }

  public SettingSingleton auTHLDAP1BINDDN(String auTHLDAP1BINDDN) {
    this.auTHLDAP1BINDDN = auTHLDAP1BINDDN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return auTHLDAP1BINDDN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAuTHLDAP1BINDDN() {
    return auTHLDAP1BINDDN;
  }

  public void setAuTHLDAP1BINDDN(String auTHLDAP1BINDDN) {
    this.auTHLDAP1BINDDN = auTHLDAP1BINDDN;
  }

  public SettingSingleton auTHLDAP1BINDPASSWORD(String auTHLDAP1BINDPASSWORD) {
    this.auTHLDAP1BINDPASSWORD = auTHLDAP1BINDPASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return auTHLDAP1BINDPASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAuTHLDAP1BINDPASSWORD() {
    return auTHLDAP1BINDPASSWORD;
  }

  public void setAuTHLDAP1BINDPASSWORD(String auTHLDAP1BINDPASSWORD) {
    this.auTHLDAP1BINDPASSWORD = auTHLDAP1BINDPASSWORD;
  }

  public SettingSingleton auTHLDAP1STARTTLS(Boolean auTHLDAP1STARTTLS) {
    this.auTHLDAP1STARTTLS = auTHLDAP1STARTTLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return auTHLDAP1STARTTLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAuTHLDAP1STARTTLS() {
    return auTHLDAP1STARTTLS;
  }

  public void setAuTHLDAP1STARTTLS(Boolean auTHLDAP1STARTTLS) {
    this.auTHLDAP1STARTTLS = auTHLDAP1STARTTLS;
  }

  public SettingSingleton auTHLDAP1CONNECTIONOPTIONS(Map<String, String> auTHLDAP1CONNECTIONOPTIONS) {
    this.auTHLDAP1CONNECTIONOPTIONS = auTHLDAP1CONNECTIONOPTIONS;
    return this;
  }

  public SettingSingleton putAuTHLDAP1CONNECTIONOPTIONSItem(String key, String auTHLDAP1CONNECTIONOPTIONSItem) {
    if (this.auTHLDAP1CONNECTIONOPTIONS == null) {
      this.auTHLDAP1CONNECTIONOPTIONS = new HashMap<String, String>();
    }
    this.auTHLDAP1CONNECTIONOPTIONS.put(key, auTHLDAP1CONNECTIONOPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return auTHLDAP1CONNECTIONOPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAuTHLDAP1CONNECTIONOPTIONS() {
    return auTHLDAP1CONNECTIONOPTIONS;
  }

  public void setAuTHLDAP1CONNECTIONOPTIONS(Map<String, String> auTHLDAP1CONNECTIONOPTIONS) {
    this.auTHLDAP1CONNECTIONOPTIONS = auTHLDAP1CONNECTIONOPTIONS;
  }

  public SettingSingleton auTHLDAP1USERSEARCH(List<String> auTHLDAP1USERSEARCH) {
    this.auTHLDAP1USERSEARCH = auTHLDAP1USERSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP1USERSEARCHItem(String auTHLDAP1USERSEARCHItem) {
    if (this.auTHLDAP1USERSEARCH == null) {
      this.auTHLDAP1USERSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP1USERSEARCH.add(auTHLDAP1USERSEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return auTHLDAP1USERSEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAuTHLDAP1USERSEARCH() {
    return auTHLDAP1USERSEARCH;
  }

  public void setAuTHLDAP1USERSEARCH(List<String> auTHLDAP1USERSEARCH) {
    this.auTHLDAP1USERSEARCH = auTHLDAP1USERSEARCH;
  }

  public SettingSingleton auTHLDAP1USERDNTEMPLATE(String auTHLDAP1USERDNTEMPLATE) {
    this.auTHLDAP1USERDNTEMPLATE = auTHLDAP1USERDNTEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return auTHLDAP1USERDNTEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAuTHLDAP1USERDNTEMPLATE() {
    return auTHLDAP1USERDNTEMPLATE;
  }

  public void setAuTHLDAP1USERDNTEMPLATE(String auTHLDAP1USERDNTEMPLATE) {
    this.auTHLDAP1USERDNTEMPLATE = auTHLDAP1USERDNTEMPLATE;
  }

  public SettingSingleton auTHLDAP1USERATTRMAP(Map<String, String> auTHLDAP1USERATTRMAP) {
    this.auTHLDAP1USERATTRMAP = auTHLDAP1USERATTRMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP1USERATTRMAPItem(String key, String auTHLDAP1USERATTRMAPItem) {
    if (this.auTHLDAP1USERATTRMAP == null) {
      this.auTHLDAP1USERATTRMAP = new HashMap<String, String>();
    }
    this.auTHLDAP1USERATTRMAP.put(key, auTHLDAP1USERATTRMAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return auTHLDAP1USERATTRMAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAuTHLDAP1USERATTRMAP() {
    return auTHLDAP1USERATTRMAP;
  }

  public void setAuTHLDAP1USERATTRMAP(Map<String, String> auTHLDAP1USERATTRMAP) {
    this.auTHLDAP1USERATTRMAP = auTHLDAP1USERATTRMAP;
  }

  public SettingSingleton auTHLDAP1GROUPSEARCH(List<String> auTHLDAP1GROUPSEARCH) {
    this.auTHLDAP1GROUPSEARCH = auTHLDAP1GROUPSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP1GROUPSEARCHItem(String auTHLDAP1GROUPSEARCHItem) {
    if (this.auTHLDAP1GROUPSEARCH == null) {
      this.auTHLDAP1GROUPSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP1GROUPSEARCH.add(auTHLDAP1GROUPSEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return auTHLDAP1GROUPSEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAuTHLDAP1GROUPSEARCH() {
    return auTHLDAP1GROUPSEARCH;
  }

  public void setAuTHLDAP1GROUPSEARCH(List<String> auTHLDAP1GROUPSEARCH) {
    this.auTHLDAP1GROUPSEARCH = auTHLDAP1GROUPSEARCH;
  }

  public SettingSingleton auTHLDAP1GROUPTYPE(AuTHLDAP1GROUPTYPEEnum auTHLDAP1GROUPTYPE) {
    this.auTHLDAP1GROUPTYPE = auTHLDAP1GROUPTYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return auTHLDAP1GROUPTYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AuTHLDAP1GROUPTYPEEnum getAuTHLDAP1GROUPTYPE() {
    return auTHLDAP1GROUPTYPE;
  }

  public void setAuTHLDAP1GROUPTYPE(AuTHLDAP1GROUPTYPEEnum auTHLDAP1GROUPTYPE) {
    this.auTHLDAP1GROUPTYPE = auTHLDAP1GROUPTYPE;
  }

  public SettingSingleton auTHLDAP1GROUPTYPEPARAMS(Map<String, String> auTHLDAP1GROUPTYPEPARAMS) {
    this.auTHLDAP1GROUPTYPEPARAMS = auTHLDAP1GROUPTYPEPARAMS;
    return this;
  }

  public SettingSingleton putAuTHLDAP1GROUPTYPEPARAMSItem(String key, String auTHLDAP1GROUPTYPEPARAMSItem) {
    if (this.auTHLDAP1GROUPTYPEPARAMS == null) {
      this.auTHLDAP1GROUPTYPEPARAMS = new HashMap<String, String>();
    }
    this.auTHLDAP1GROUPTYPEPARAMS.put(key, auTHLDAP1GROUPTYPEPARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return auTHLDAP1GROUPTYPEPARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAuTHLDAP1GROUPTYPEPARAMS() {
    return auTHLDAP1GROUPTYPEPARAMS;
  }

  public void setAuTHLDAP1GROUPTYPEPARAMS(Map<String, String> auTHLDAP1GROUPTYPEPARAMS) {
    this.auTHLDAP1GROUPTYPEPARAMS = auTHLDAP1GROUPTYPEPARAMS;
  }

  public SettingSingleton auTHLDAP1REQUIREGROUP(String auTHLDAP1REQUIREGROUP) {
    this.auTHLDAP1REQUIREGROUP = auTHLDAP1REQUIREGROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return auTHLDAP1REQUIREGROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAuTHLDAP1REQUIREGROUP() {
    return auTHLDAP1REQUIREGROUP;
  }

  public void setAuTHLDAP1REQUIREGROUP(String auTHLDAP1REQUIREGROUP) {
    this.auTHLDAP1REQUIREGROUP = auTHLDAP1REQUIREGROUP;
  }

  public SettingSingleton auTHLDAP1DENYGROUP(String auTHLDAP1DENYGROUP) {
    this.auTHLDAP1DENYGROUP = auTHLDAP1DENYGROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return auTHLDAP1DENYGROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAuTHLDAP1DENYGROUP() {
    return auTHLDAP1DENYGROUP;
  }

  public void setAuTHLDAP1DENYGROUP(String auTHLDAP1DENYGROUP) {
    this.auTHLDAP1DENYGROUP = auTHLDAP1DENYGROUP;
  }

  public SettingSingleton auTHLDAP1USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP1USERFLAGSBYGROUP) {
    this.auTHLDAP1USERFLAGSBYGROUP = auTHLDAP1USERFLAGSBYGROUP;
    return this;
  }

  public SettingSingleton putAuTHLDAP1USERFLAGSBYGROUPItem(String key, List<String> auTHLDAP1USERFLAGSBYGROUPItem) {
    if (this.auTHLDAP1USERFLAGSBYGROUP == null) {
      this.auTHLDAP1USERFLAGSBYGROUP = new HashMap<String, List<String>>();
    }
    this.auTHLDAP1USERFLAGSBYGROUP.put(key, auTHLDAP1USERFLAGSBYGROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return auTHLDAP1USERFLAGSBYGROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAuTHLDAP1USERFLAGSBYGROUP() {
    return auTHLDAP1USERFLAGSBYGROUP;
  }

  public void setAuTHLDAP1USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP1USERFLAGSBYGROUP) {
    this.auTHLDAP1USERFLAGSBYGROUP = auTHLDAP1USERFLAGSBYGROUP;
  }

  public SettingSingleton auTHLDAP1ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP1ORGANIZATIONMAP) {
    this.auTHLDAP1ORGANIZATIONMAP = auTHLDAP1ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP1ORGANIZATIONMAPItem(String key, Map<String, String> auTHLDAP1ORGANIZATIONMAPItem) {
    if (this.auTHLDAP1ORGANIZATIONMAP == null) {
      this.auTHLDAP1ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP1ORGANIZATIONMAP.put(key, auTHLDAP1ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return auTHLDAP1ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP1ORGANIZATIONMAP() {
    return auTHLDAP1ORGANIZATIONMAP;
  }

  public void setAuTHLDAP1ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP1ORGANIZATIONMAP) {
    this.auTHLDAP1ORGANIZATIONMAP = auTHLDAP1ORGANIZATIONMAP;
  }

  public SettingSingleton auTHLDAP1TEAMMAP(Map<String, Map<String, String>> auTHLDAP1TEAMMAP) {
    this.auTHLDAP1TEAMMAP = auTHLDAP1TEAMMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP1TEAMMAPItem(String key, Map<String, String> auTHLDAP1TEAMMAPItem) {
    if (this.auTHLDAP1TEAMMAP == null) {
      this.auTHLDAP1TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP1TEAMMAP.put(key, auTHLDAP1TEAMMAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return auTHLDAP1TEAMMAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP1TEAMMAP() {
    return auTHLDAP1TEAMMAP;
  }

  public void setAuTHLDAP1TEAMMAP(Map<String, Map<String, String>> auTHLDAP1TEAMMAP) {
    this.auTHLDAP1TEAMMAP = auTHLDAP1TEAMMAP;
  }

  public SettingSingleton auTHLDAP2SERVERURI(String auTHLDAP2SERVERURI) {
    this.auTHLDAP2SERVERURI = auTHLDAP2SERVERURI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return auTHLDAP2SERVERURI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAuTHLDAP2SERVERURI() {
    return auTHLDAP2SERVERURI;
  }

  public void setAuTHLDAP2SERVERURI(String auTHLDAP2SERVERURI) {
    this.auTHLDAP2SERVERURI = auTHLDAP2SERVERURI;
  }

  public SettingSingleton auTHLDAP2BINDDN(String auTHLDAP2BINDDN) {
    this.auTHLDAP2BINDDN = auTHLDAP2BINDDN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return auTHLDAP2BINDDN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAuTHLDAP2BINDDN() {
    return auTHLDAP2BINDDN;
  }

  public void setAuTHLDAP2BINDDN(String auTHLDAP2BINDDN) {
    this.auTHLDAP2BINDDN = auTHLDAP2BINDDN;
  }

  public SettingSingleton auTHLDAP2BINDPASSWORD(String auTHLDAP2BINDPASSWORD) {
    this.auTHLDAP2BINDPASSWORD = auTHLDAP2BINDPASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return auTHLDAP2BINDPASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAuTHLDAP2BINDPASSWORD() {
    return auTHLDAP2BINDPASSWORD;
  }

  public void setAuTHLDAP2BINDPASSWORD(String auTHLDAP2BINDPASSWORD) {
    this.auTHLDAP2BINDPASSWORD = auTHLDAP2BINDPASSWORD;
  }

  public SettingSingleton auTHLDAP2STARTTLS(Boolean auTHLDAP2STARTTLS) {
    this.auTHLDAP2STARTTLS = auTHLDAP2STARTTLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return auTHLDAP2STARTTLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAuTHLDAP2STARTTLS() {
    return auTHLDAP2STARTTLS;
  }

  public void setAuTHLDAP2STARTTLS(Boolean auTHLDAP2STARTTLS) {
    this.auTHLDAP2STARTTLS = auTHLDAP2STARTTLS;
  }

  public SettingSingleton auTHLDAP2CONNECTIONOPTIONS(Map<String, String> auTHLDAP2CONNECTIONOPTIONS) {
    this.auTHLDAP2CONNECTIONOPTIONS = auTHLDAP2CONNECTIONOPTIONS;
    return this;
  }

  public SettingSingleton putAuTHLDAP2CONNECTIONOPTIONSItem(String key, String auTHLDAP2CONNECTIONOPTIONSItem) {
    if (this.auTHLDAP2CONNECTIONOPTIONS == null) {
      this.auTHLDAP2CONNECTIONOPTIONS = new HashMap<String, String>();
    }
    this.auTHLDAP2CONNECTIONOPTIONS.put(key, auTHLDAP2CONNECTIONOPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return auTHLDAP2CONNECTIONOPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAuTHLDAP2CONNECTIONOPTIONS() {
    return auTHLDAP2CONNECTIONOPTIONS;
  }

  public void setAuTHLDAP2CONNECTIONOPTIONS(Map<String, String> auTHLDAP2CONNECTIONOPTIONS) {
    this.auTHLDAP2CONNECTIONOPTIONS = auTHLDAP2CONNECTIONOPTIONS;
  }

  public SettingSingleton auTHLDAP2USERSEARCH(List<String> auTHLDAP2USERSEARCH) {
    this.auTHLDAP2USERSEARCH = auTHLDAP2USERSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP2USERSEARCHItem(String auTHLDAP2USERSEARCHItem) {
    if (this.auTHLDAP2USERSEARCH == null) {
      this.auTHLDAP2USERSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP2USERSEARCH.add(auTHLDAP2USERSEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return auTHLDAP2USERSEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAuTHLDAP2USERSEARCH() {
    return auTHLDAP2USERSEARCH;
  }

  public void setAuTHLDAP2USERSEARCH(List<String> auTHLDAP2USERSEARCH) {
    this.auTHLDAP2USERSEARCH = auTHLDAP2USERSEARCH;
  }

  public SettingSingleton auTHLDAP2USERDNTEMPLATE(String auTHLDAP2USERDNTEMPLATE) {
    this.auTHLDAP2USERDNTEMPLATE = auTHLDAP2USERDNTEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return auTHLDAP2USERDNTEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAuTHLDAP2USERDNTEMPLATE() {
    return auTHLDAP2USERDNTEMPLATE;
  }

  public void setAuTHLDAP2USERDNTEMPLATE(String auTHLDAP2USERDNTEMPLATE) {
    this.auTHLDAP2USERDNTEMPLATE = auTHLDAP2USERDNTEMPLATE;
  }

  public SettingSingleton auTHLDAP2USERATTRMAP(Map<String, String> auTHLDAP2USERATTRMAP) {
    this.auTHLDAP2USERATTRMAP = auTHLDAP2USERATTRMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP2USERATTRMAPItem(String key, String auTHLDAP2USERATTRMAPItem) {
    if (this.auTHLDAP2USERATTRMAP == null) {
      this.auTHLDAP2USERATTRMAP = new HashMap<String, String>();
    }
    this.auTHLDAP2USERATTRMAP.put(key, auTHLDAP2USERATTRMAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return auTHLDAP2USERATTRMAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAuTHLDAP2USERATTRMAP() {
    return auTHLDAP2USERATTRMAP;
  }

  public void setAuTHLDAP2USERATTRMAP(Map<String, String> auTHLDAP2USERATTRMAP) {
    this.auTHLDAP2USERATTRMAP = auTHLDAP2USERATTRMAP;
  }

  public SettingSingleton auTHLDAP2GROUPSEARCH(List<String> auTHLDAP2GROUPSEARCH) {
    this.auTHLDAP2GROUPSEARCH = auTHLDAP2GROUPSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP2GROUPSEARCHItem(String auTHLDAP2GROUPSEARCHItem) {
    if (this.auTHLDAP2GROUPSEARCH == null) {
      this.auTHLDAP2GROUPSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP2GROUPSEARCH.add(auTHLDAP2GROUPSEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return auTHLDAP2GROUPSEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAuTHLDAP2GROUPSEARCH() {
    return auTHLDAP2GROUPSEARCH;
  }

  public void setAuTHLDAP2GROUPSEARCH(List<String> auTHLDAP2GROUPSEARCH) {
    this.auTHLDAP2GROUPSEARCH = auTHLDAP2GROUPSEARCH;
  }

  public SettingSingleton auTHLDAP2GROUPTYPE(AuTHLDAP2GROUPTYPEEnum auTHLDAP2GROUPTYPE) {
    this.auTHLDAP2GROUPTYPE = auTHLDAP2GROUPTYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return auTHLDAP2GROUPTYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AuTHLDAP2GROUPTYPEEnum getAuTHLDAP2GROUPTYPE() {
    return auTHLDAP2GROUPTYPE;
  }

  public void setAuTHLDAP2GROUPTYPE(AuTHLDAP2GROUPTYPEEnum auTHLDAP2GROUPTYPE) {
    this.auTHLDAP2GROUPTYPE = auTHLDAP2GROUPTYPE;
  }

  public SettingSingleton auTHLDAP2GROUPTYPEPARAMS(Map<String, String> auTHLDAP2GROUPTYPEPARAMS) {
    this.auTHLDAP2GROUPTYPEPARAMS = auTHLDAP2GROUPTYPEPARAMS;
    return this;
  }

  public SettingSingleton putAuTHLDAP2GROUPTYPEPARAMSItem(String key, String auTHLDAP2GROUPTYPEPARAMSItem) {
    if (this.auTHLDAP2GROUPTYPEPARAMS == null) {
      this.auTHLDAP2GROUPTYPEPARAMS = new HashMap<String, String>();
    }
    this.auTHLDAP2GROUPTYPEPARAMS.put(key, auTHLDAP2GROUPTYPEPARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return auTHLDAP2GROUPTYPEPARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAuTHLDAP2GROUPTYPEPARAMS() {
    return auTHLDAP2GROUPTYPEPARAMS;
  }

  public void setAuTHLDAP2GROUPTYPEPARAMS(Map<String, String> auTHLDAP2GROUPTYPEPARAMS) {
    this.auTHLDAP2GROUPTYPEPARAMS = auTHLDAP2GROUPTYPEPARAMS;
  }

  public SettingSingleton auTHLDAP2REQUIREGROUP(String auTHLDAP2REQUIREGROUP) {
    this.auTHLDAP2REQUIREGROUP = auTHLDAP2REQUIREGROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return auTHLDAP2REQUIREGROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAuTHLDAP2REQUIREGROUP() {
    return auTHLDAP2REQUIREGROUP;
  }

  public void setAuTHLDAP2REQUIREGROUP(String auTHLDAP2REQUIREGROUP) {
    this.auTHLDAP2REQUIREGROUP = auTHLDAP2REQUIREGROUP;
  }

  public SettingSingleton auTHLDAP2DENYGROUP(String auTHLDAP2DENYGROUP) {
    this.auTHLDAP2DENYGROUP = auTHLDAP2DENYGROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return auTHLDAP2DENYGROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAuTHLDAP2DENYGROUP() {
    return auTHLDAP2DENYGROUP;
  }

  public void setAuTHLDAP2DENYGROUP(String auTHLDAP2DENYGROUP) {
    this.auTHLDAP2DENYGROUP = auTHLDAP2DENYGROUP;
  }

  public SettingSingleton auTHLDAP2USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP2USERFLAGSBYGROUP) {
    this.auTHLDAP2USERFLAGSBYGROUP = auTHLDAP2USERFLAGSBYGROUP;
    return this;
  }

  public SettingSingleton putAuTHLDAP2USERFLAGSBYGROUPItem(String key, List<String> auTHLDAP2USERFLAGSBYGROUPItem) {
    if (this.auTHLDAP2USERFLAGSBYGROUP == null) {
      this.auTHLDAP2USERFLAGSBYGROUP = new HashMap<String, List<String>>();
    }
    this.auTHLDAP2USERFLAGSBYGROUP.put(key, auTHLDAP2USERFLAGSBYGROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return auTHLDAP2USERFLAGSBYGROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAuTHLDAP2USERFLAGSBYGROUP() {
    return auTHLDAP2USERFLAGSBYGROUP;
  }

  public void setAuTHLDAP2USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP2USERFLAGSBYGROUP) {
    this.auTHLDAP2USERFLAGSBYGROUP = auTHLDAP2USERFLAGSBYGROUP;
  }

  public SettingSingleton auTHLDAP2ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP2ORGANIZATIONMAP) {
    this.auTHLDAP2ORGANIZATIONMAP = auTHLDAP2ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP2ORGANIZATIONMAPItem(String key, Map<String, String> auTHLDAP2ORGANIZATIONMAPItem) {
    if (this.auTHLDAP2ORGANIZATIONMAP == null) {
      this.auTHLDAP2ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP2ORGANIZATIONMAP.put(key, auTHLDAP2ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return auTHLDAP2ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP2ORGANIZATIONMAP() {
    return auTHLDAP2ORGANIZATIONMAP;
  }

  public void setAuTHLDAP2ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP2ORGANIZATIONMAP) {
    this.auTHLDAP2ORGANIZATIONMAP = auTHLDAP2ORGANIZATIONMAP;
  }

  public SettingSingleton auTHLDAP2TEAMMAP(Map<String, Map<String, String>> auTHLDAP2TEAMMAP) {
    this.auTHLDAP2TEAMMAP = auTHLDAP2TEAMMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP2TEAMMAPItem(String key, Map<String, String> auTHLDAP2TEAMMAPItem) {
    if (this.auTHLDAP2TEAMMAP == null) {
      this.auTHLDAP2TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP2TEAMMAP.put(key, auTHLDAP2TEAMMAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return auTHLDAP2TEAMMAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP2TEAMMAP() {
    return auTHLDAP2TEAMMAP;
  }

  public void setAuTHLDAP2TEAMMAP(Map<String, Map<String, String>> auTHLDAP2TEAMMAP) {
    this.auTHLDAP2TEAMMAP = auTHLDAP2TEAMMAP;
  }

  public SettingSingleton auTHLDAP3SERVERURI(String auTHLDAP3SERVERURI) {
    this.auTHLDAP3SERVERURI = auTHLDAP3SERVERURI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return auTHLDAP3SERVERURI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAuTHLDAP3SERVERURI() {
    return auTHLDAP3SERVERURI;
  }

  public void setAuTHLDAP3SERVERURI(String auTHLDAP3SERVERURI) {
    this.auTHLDAP3SERVERURI = auTHLDAP3SERVERURI;
  }

  public SettingSingleton auTHLDAP3BINDDN(String auTHLDAP3BINDDN) {
    this.auTHLDAP3BINDDN = auTHLDAP3BINDDN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return auTHLDAP3BINDDN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAuTHLDAP3BINDDN() {
    return auTHLDAP3BINDDN;
  }

  public void setAuTHLDAP3BINDDN(String auTHLDAP3BINDDN) {
    this.auTHLDAP3BINDDN = auTHLDAP3BINDDN;
  }

  public SettingSingleton auTHLDAP3BINDPASSWORD(String auTHLDAP3BINDPASSWORD) {
    this.auTHLDAP3BINDPASSWORD = auTHLDAP3BINDPASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return auTHLDAP3BINDPASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAuTHLDAP3BINDPASSWORD() {
    return auTHLDAP3BINDPASSWORD;
  }

  public void setAuTHLDAP3BINDPASSWORD(String auTHLDAP3BINDPASSWORD) {
    this.auTHLDAP3BINDPASSWORD = auTHLDAP3BINDPASSWORD;
  }

  public SettingSingleton auTHLDAP3STARTTLS(Boolean auTHLDAP3STARTTLS) {
    this.auTHLDAP3STARTTLS = auTHLDAP3STARTTLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return auTHLDAP3STARTTLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAuTHLDAP3STARTTLS() {
    return auTHLDAP3STARTTLS;
  }

  public void setAuTHLDAP3STARTTLS(Boolean auTHLDAP3STARTTLS) {
    this.auTHLDAP3STARTTLS = auTHLDAP3STARTTLS;
  }

  public SettingSingleton auTHLDAP3CONNECTIONOPTIONS(Map<String, String> auTHLDAP3CONNECTIONOPTIONS) {
    this.auTHLDAP3CONNECTIONOPTIONS = auTHLDAP3CONNECTIONOPTIONS;
    return this;
  }

  public SettingSingleton putAuTHLDAP3CONNECTIONOPTIONSItem(String key, String auTHLDAP3CONNECTIONOPTIONSItem) {
    if (this.auTHLDAP3CONNECTIONOPTIONS == null) {
      this.auTHLDAP3CONNECTIONOPTIONS = new HashMap<String, String>();
    }
    this.auTHLDAP3CONNECTIONOPTIONS.put(key, auTHLDAP3CONNECTIONOPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return auTHLDAP3CONNECTIONOPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAuTHLDAP3CONNECTIONOPTIONS() {
    return auTHLDAP3CONNECTIONOPTIONS;
  }

  public void setAuTHLDAP3CONNECTIONOPTIONS(Map<String, String> auTHLDAP3CONNECTIONOPTIONS) {
    this.auTHLDAP3CONNECTIONOPTIONS = auTHLDAP3CONNECTIONOPTIONS;
  }

  public SettingSingleton auTHLDAP3USERSEARCH(List<String> auTHLDAP3USERSEARCH) {
    this.auTHLDAP3USERSEARCH = auTHLDAP3USERSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP3USERSEARCHItem(String auTHLDAP3USERSEARCHItem) {
    if (this.auTHLDAP3USERSEARCH == null) {
      this.auTHLDAP3USERSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP3USERSEARCH.add(auTHLDAP3USERSEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return auTHLDAP3USERSEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAuTHLDAP3USERSEARCH() {
    return auTHLDAP3USERSEARCH;
  }

  public void setAuTHLDAP3USERSEARCH(List<String> auTHLDAP3USERSEARCH) {
    this.auTHLDAP3USERSEARCH = auTHLDAP3USERSEARCH;
  }

  public SettingSingleton auTHLDAP3USERDNTEMPLATE(String auTHLDAP3USERDNTEMPLATE) {
    this.auTHLDAP3USERDNTEMPLATE = auTHLDAP3USERDNTEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return auTHLDAP3USERDNTEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAuTHLDAP3USERDNTEMPLATE() {
    return auTHLDAP3USERDNTEMPLATE;
  }

  public void setAuTHLDAP3USERDNTEMPLATE(String auTHLDAP3USERDNTEMPLATE) {
    this.auTHLDAP3USERDNTEMPLATE = auTHLDAP3USERDNTEMPLATE;
  }

  public SettingSingleton auTHLDAP3USERATTRMAP(Map<String, String> auTHLDAP3USERATTRMAP) {
    this.auTHLDAP3USERATTRMAP = auTHLDAP3USERATTRMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP3USERATTRMAPItem(String key, String auTHLDAP3USERATTRMAPItem) {
    if (this.auTHLDAP3USERATTRMAP == null) {
      this.auTHLDAP3USERATTRMAP = new HashMap<String, String>();
    }
    this.auTHLDAP3USERATTRMAP.put(key, auTHLDAP3USERATTRMAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return auTHLDAP3USERATTRMAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAuTHLDAP3USERATTRMAP() {
    return auTHLDAP3USERATTRMAP;
  }

  public void setAuTHLDAP3USERATTRMAP(Map<String, String> auTHLDAP3USERATTRMAP) {
    this.auTHLDAP3USERATTRMAP = auTHLDAP3USERATTRMAP;
  }

  public SettingSingleton auTHLDAP3GROUPSEARCH(List<String> auTHLDAP3GROUPSEARCH) {
    this.auTHLDAP3GROUPSEARCH = auTHLDAP3GROUPSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP3GROUPSEARCHItem(String auTHLDAP3GROUPSEARCHItem) {
    if (this.auTHLDAP3GROUPSEARCH == null) {
      this.auTHLDAP3GROUPSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP3GROUPSEARCH.add(auTHLDAP3GROUPSEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return auTHLDAP3GROUPSEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAuTHLDAP3GROUPSEARCH() {
    return auTHLDAP3GROUPSEARCH;
  }

  public void setAuTHLDAP3GROUPSEARCH(List<String> auTHLDAP3GROUPSEARCH) {
    this.auTHLDAP3GROUPSEARCH = auTHLDAP3GROUPSEARCH;
  }

  public SettingSingleton auTHLDAP3GROUPTYPE(AuTHLDAP3GROUPTYPEEnum auTHLDAP3GROUPTYPE) {
    this.auTHLDAP3GROUPTYPE = auTHLDAP3GROUPTYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return auTHLDAP3GROUPTYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AuTHLDAP3GROUPTYPEEnum getAuTHLDAP3GROUPTYPE() {
    return auTHLDAP3GROUPTYPE;
  }

  public void setAuTHLDAP3GROUPTYPE(AuTHLDAP3GROUPTYPEEnum auTHLDAP3GROUPTYPE) {
    this.auTHLDAP3GROUPTYPE = auTHLDAP3GROUPTYPE;
  }

  public SettingSingleton auTHLDAP3GROUPTYPEPARAMS(Map<String, String> auTHLDAP3GROUPTYPEPARAMS) {
    this.auTHLDAP3GROUPTYPEPARAMS = auTHLDAP3GROUPTYPEPARAMS;
    return this;
  }

  public SettingSingleton putAuTHLDAP3GROUPTYPEPARAMSItem(String key, String auTHLDAP3GROUPTYPEPARAMSItem) {
    if (this.auTHLDAP3GROUPTYPEPARAMS == null) {
      this.auTHLDAP3GROUPTYPEPARAMS = new HashMap<String, String>();
    }
    this.auTHLDAP3GROUPTYPEPARAMS.put(key, auTHLDAP3GROUPTYPEPARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return auTHLDAP3GROUPTYPEPARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAuTHLDAP3GROUPTYPEPARAMS() {
    return auTHLDAP3GROUPTYPEPARAMS;
  }

  public void setAuTHLDAP3GROUPTYPEPARAMS(Map<String, String> auTHLDAP3GROUPTYPEPARAMS) {
    this.auTHLDAP3GROUPTYPEPARAMS = auTHLDAP3GROUPTYPEPARAMS;
  }

  public SettingSingleton auTHLDAP3REQUIREGROUP(String auTHLDAP3REQUIREGROUP) {
    this.auTHLDAP3REQUIREGROUP = auTHLDAP3REQUIREGROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return auTHLDAP3REQUIREGROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAuTHLDAP3REQUIREGROUP() {
    return auTHLDAP3REQUIREGROUP;
  }

  public void setAuTHLDAP3REQUIREGROUP(String auTHLDAP3REQUIREGROUP) {
    this.auTHLDAP3REQUIREGROUP = auTHLDAP3REQUIREGROUP;
  }

  public SettingSingleton auTHLDAP3DENYGROUP(String auTHLDAP3DENYGROUP) {
    this.auTHLDAP3DENYGROUP = auTHLDAP3DENYGROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return auTHLDAP3DENYGROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAuTHLDAP3DENYGROUP() {
    return auTHLDAP3DENYGROUP;
  }

  public void setAuTHLDAP3DENYGROUP(String auTHLDAP3DENYGROUP) {
    this.auTHLDAP3DENYGROUP = auTHLDAP3DENYGROUP;
  }

  public SettingSingleton auTHLDAP3USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP3USERFLAGSBYGROUP) {
    this.auTHLDAP3USERFLAGSBYGROUP = auTHLDAP3USERFLAGSBYGROUP;
    return this;
  }

  public SettingSingleton putAuTHLDAP3USERFLAGSBYGROUPItem(String key, List<String> auTHLDAP3USERFLAGSBYGROUPItem) {
    if (this.auTHLDAP3USERFLAGSBYGROUP == null) {
      this.auTHLDAP3USERFLAGSBYGROUP = new HashMap<String, List<String>>();
    }
    this.auTHLDAP3USERFLAGSBYGROUP.put(key, auTHLDAP3USERFLAGSBYGROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return auTHLDAP3USERFLAGSBYGROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAuTHLDAP3USERFLAGSBYGROUP() {
    return auTHLDAP3USERFLAGSBYGROUP;
  }

  public void setAuTHLDAP3USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP3USERFLAGSBYGROUP) {
    this.auTHLDAP3USERFLAGSBYGROUP = auTHLDAP3USERFLAGSBYGROUP;
  }

  public SettingSingleton auTHLDAP3ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP3ORGANIZATIONMAP) {
    this.auTHLDAP3ORGANIZATIONMAP = auTHLDAP3ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP3ORGANIZATIONMAPItem(String key, Map<String, String> auTHLDAP3ORGANIZATIONMAPItem) {
    if (this.auTHLDAP3ORGANIZATIONMAP == null) {
      this.auTHLDAP3ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP3ORGANIZATIONMAP.put(key, auTHLDAP3ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return auTHLDAP3ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP3ORGANIZATIONMAP() {
    return auTHLDAP3ORGANIZATIONMAP;
  }

  public void setAuTHLDAP3ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP3ORGANIZATIONMAP) {
    this.auTHLDAP3ORGANIZATIONMAP = auTHLDAP3ORGANIZATIONMAP;
  }

  public SettingSingleton auTHLDAP3TEAMMAP(Map<String, Map<String, String>> auTHLDAP3TEAMMAP) {
    this.auTHLDAP3TEAMMAP = auTHLDAP3TEAMMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP3TEAMMAPItem(String key, Map<String, String> auTHLDAP3TEAMMAPItem) {
    if (this.auTHLDAP3TEAMMAP == null) {
      this.auTHLDAP3TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP3TEAMMAP.put(key, auTHLDAP3TEAMMAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return auTHLDAP3TEAMMAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP3TEAMMAP() {
    return auTHLDAP3TEAMMAP;
  }

  public void setAuTHLDAP3TEAMMAP(Map<String, Map<String, String>> auTHLDAP3TEAMMAP) {
    this.auTHLDAP3TEAMMAP = auTHLDAP3TEAMMAP;
  }

  public SettingSingleton auTHLDAP4SERVERURI(String auTHLDAP4SERVERURI) {
    this.auTHLDAP4SERVERURI = auTHLDAP4SERVERURI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return auTHLDAP4SERVERURI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAuTHLDAP4SERVERURI() {
    return auTHLDAP4SERVERURI;
  }

  public void setAuTHLDAP4SERVERURI(String auTHLDAP4SERVERURI) {
    this.auTHLDAP4SERVERURI = auTHLDAP4SERVERURI;
  }

  public SettingSingleton auTHLDAP4BINDDN(String auTHLDAP4BINDDN) {
    this.auTHLDAP4BINDDN = auTHLDAP4BINDDN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return auTHLDAP4BINDDN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAuTHLDAP4BINDDN() {
    return auTHLDAP4BINDDN;
  }

  public void setAuTHLDAP4BINDDN(String auTHLDAP4BINDDN) {
    this.auTHLDAP4BINDDN = auTHLDAP4BINDDN;
  }

  public SettingSingleton auTHLDAP4BINDPASSWORD(String auTHLDAP4BINDPASSWORD) {
    this.auTHLDAP4BINDPASSWORD = auTHLDAP4BINDPASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return auTHLDAP4BINDPASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAuTHLDAP4BINDPASSWORD() {
    return auTHLDAP4BINDPASSWORD;
  }

  public void setAuTHLDAP4BINDPASSWORD(String auTHLDAP4BINDPASSWORD) {
    this.auTHLDAP4BINDPASSWORD = auTHLDAP4BINDPASSWORD;
  }

  public SettingSingleton auTHLDAP4STARTTLS(Boolean auTHLDAP4STARTTLS) {
    this.auTHLDAP4STARTTLS = auTHLDAP4STARTTLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return auTHLDAP4STARTTLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAuTHLDAP4STARTTLS() {
    return auTHLDAP4STARTTLS;
  }

  public void setAuTHLDAP4STARTTLS(Boolean auTHLDAP4STARTTLS) {
    this.auTHLDAP4STARTTLS = auTHLDAP4STARTTLS;
  }

  public SettingSingleton auTHLDAP4CONNECTIONOPTIONS(Map<String, String> auTHLDAP4CONNECTIONOPTIONS) {
    this.auTHLDAP4CONNECTIONOPTIONS = auTHLDAP4CONNECTIONOPTIONS;
    return this;
  }

  public SettingSingleton putAuTHLDAP4CONNECTIONOPTIONSItem(String key, String auTHLDAP4CONNECTIONOPTIONSItem) {
    if (this.auTHLDAP4CONNECTIONOPTIONS == null) {
      this.auTHLDAP4CONNECTIONOPTIONS = new HashMap<String, String>();
    }
    this.auTHLDAP4CONNECTIONOPTIONS.put(key, auTHLDAP4CONNECTIONOPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return auTHLDAP4CONNECTIONOPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAuTHLDAP4CONNECTIONOPTIONS() {
    return auTHLDAP4CONNECTIONOPTIONS;
  }

  public void setAuTHLDAP4CONNECTIONOPTIONS(Map<String, String> auTHLDAP4CONNECTIONOPTIONS) {
    this.auTHLDAP4CONNECTIONOPTIONS = auTHLDAP4CONNECTIONOPTIONS;
  }

  public SettingSingleton auTHLDAP4USERSEARCH(List<String> auTHLDAP4USERSEARCH) {
    this.auTHLDAP4USERSEARCH = auTHLDAP4USERSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP4USERSEARCHItem(String auTHLDAP4USERSEARCHItem) {
    if (this.auTHLDAP4USERSEARCH == null) {
      this.auTHLDAP4USERSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP4USERSEARCH.add(auTHLDAP4USERSEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return auTHLDAP4USERSEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAuTHLDAP4USERSEARCH() {
    return auTHLDAP4USERSEARCH;
  }

  public void setAuTHLDAP4USERSEARCH(List<String> auTHLDAP4USERSEARCH) {
    this.auTHLDAP4USERSEARCH = auTHLDAP4USERSEARCH;
  }

  public SettingSingleton auTHLDAP4USERDNTEMPLATE(String auTHLDAP4USERDNTEMPLATE) {
    this.auTHLDAP4USERDNTEMPLATE = auTHLDAP4USERDNTEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return auTHLDAP4USERDNTEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAuTHLDAP4USERDNTEMPLATE() {
    return auTHLDAP4USERDNTEMPLATE;
  }

  public void setAuTHLDAP4USERDNTEMPLATE(String auTHLDAP4USERDNTEMPLATE) {
    this.auTHLDAP4USERDNTEMPLATE = auTHLDAP4USERDNTEMPLATE;
  }

  public SettingSingleton auTHLDAP4USERATTRMAP(Map<String, String> auTHLDAP4USERATTRMAP) {
    this.auTHLDAP4USERATTRMAP = auTHLDAP4USERATTRMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP4USERATTRMAPItem(String key, String auTHLDAP4USERATTRMAPItem) {
    if (this.auTHLDAP4USERATTRMAP == null) {
      this.auTHLDAP4USERATTRMAP = new HashMap<String, String>();
    }
    this.auTHLDAP4USERATTRMAP.put(key, auTHLDAP4USERATTRMAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return auTHLDAP4USERATTRMAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAuTHLDAP4USERATTRMAP() {
    return auTHLDAP4USERATTRMAP;
  }

  public void setAuTHLDAP4USERATTRMAP(Map<String, String> auTHLDAP4USERATTRMAP) {
    this.auTHLDAP4USERATTRMAP = auTHLDAP4USERATTRMAP;
  }

  public SettingSingleton auTHLDAP4GROUPSEARCH(List<String> auTHLDAP4GROUPSEARCH) {
    this.auTHLDAP4GROUPSEARCH = auTHLDAP4GROUPSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP4GROUPSEARCHItem(String auTHLDAP4GROUPSEARCHItem) {
    if (this.auTHLDAP4GROUPSEARCH == null) {
      this.auTHLDAP4GROUPSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP4GROUPSEARCH.add(auTHLDAP4GROUPSEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return auTHLDAP4GROUPSEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAuTHLDAP4GROUPSEARCH() {
    return auTHLDAP4GROUPSEARCH;
  }

  public void setAuTHLDAP4GROUPSEARCH(List<String> auTHLDAP4GROUPSEARCH) {
    this.auTHLDAP4GROUPSEARCH = auTHLDAP4GROUPSEARCH;
  }

  public SettingSingleton auTHLDAP4GROUPTYPE(AuTHLDAP4GROUPTYPEEnum auTHLDAP4GROUPTYPE) {
    this.auTHLDAP4GROUPTYPE = auTHLDAP4GROUPTYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return auTHLDAP4GROUPTYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AuTHLDAP4GROUPTYPEEnum getAuTHLDAP4GROUPTYPE() {
    return auTHLDAP4GROUPTYPE;
  }

  public void setAuTHLDAP4GROUPTYPE(AuTHLDAP4GROUPTYPEEnum auTHLDAP4GROUPTYPE) {
    this.auTHLDAP4GROUPTYPE = auTHLDAP4GROUPTYPE;
  }

  public SettingSingleton auTHLDAP4GROUPTYPEPARAMS(Map<String, String> auTHLDAP4GROUPTYPEPARAMS) {
    this.auTHLDAP4GROUPTYPEPARAMS = auTHLDAP4GROUPTYPEPARAMS;
    return this;
  }

  public SettingSingleton putAuTHLDAP4GROUPTYPEPARAMSItem(String key, String auTHLDAP4GROUPTYPEPARAMSItem) {
    if (this.auTHLDAP4GROUPTYPEPARAMS == null) {
      this.auTHLDAP4GROUPTYPEPARAMS = new HashMap<String, String>();
    }
    this.auTHLDAP4GROUPTYPEPARAMS.put(key, auTHLDAP4GROUPTYPEPARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return auTHLDAP4GROUPTYPEPARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAuTHLDAP4GROUPTYPEPARAMS() {
    return auTHLDAP4GROUPTYPEPARAMS;
  }

  public void setAuTHLDAP4GROUPTYPEPARAMS(Map<String, String> auTHLDAP4GROUPTYPEPARAMS) {
    this.auTHLDAP4GROUPTYPEPARAMS = auTHLDAP4GROUPTYPEPARAMS;
  }

  public SettingSingleton auTHLDAP4REQUIREGROUP(String auTHLDAP4REQUIREGROUP) {
    this.auTHLDAP4REQUIREGROUP = auTHLDAP4REQUIREGROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return auTHLDAP4REQUIREGROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAuTHLDAP4REQUIREGROUP() {
    return auTHLDAP4REQUIREGROUP;
  }

  public void setAuTHLDAP4REQUIREGROUP(String auTHLDAP4REQUIREGROUP) {
    this.auTHLDAP4REQUIREGROUP = auTHLDAP4REQUIREGROUP;
  }

  public SettingSingleton auTHLDAP4DENYGROUP(String auTHLDAP4DENYGROUP) {
    this.auTHLDAP4DENYGROUP = auTHLDAP4DENYGROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return auTHLDAP4DENYGROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAuTHLDAP4DENYGROUP() {
    return auTHLDAP4DENYGROUP;
  }

  public void setAuTHLDAP4DENYGROUP(String auTHLDAP4DENYGROUP) {
    this.auTHLDAP4DENYGROUP = auTHLDAP4DENYGROUP;
  }

  public SettingSingleton auTHLDAP4USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP4USERFLAGSBYGROUP) {
    this.auTHLDAP4USERFLAGSBYGROUP = auTHLDAP4USERFLAGSBYGROUP;
    return this;
  }

  public SettingSingleton putAuTHLDAP4USERFLAGSBYGROUPItem(String key, List<String> auTHLDAP4USERFLAGSBYGROUPItem) {
    if (this.auTHLDAP4USERFLAGSBYGROUP == null) {
      this.auTHLDAP4USERFLAGSBYGROUP = new HashMap<String, List<String>>();
    }
    this.auTHLDAP4USERFLAGSBYGROUP.put(key, auTHLDAP4USERFLAGSBYGROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return auTHLDAP4USERFLAGSBYGROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAuTHLDAP4USERFLAGSBYGROUP() {
    return auTHLDAP4USERFLAGSBYGROUP;
  }

  public void setAuTHLDAP4USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP4USERFLAGSBYGROUP) {
    this.auTHLDAP4USERFLAGSBYGROUP = auTHLDAP4USERFLAGSBYGROUP;
  }

  public SettingSingleton auTHLDAP4ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP4ORGANIZATIONMAP) {
    this.auTHLDAP4ORGANIZATIONMAP = auTHLDAP4ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP4ORGANIZATIONMAPItem(String key, Map<String, String> auTHLDAP4ORGANIZATIONMAPItem) {
    if (this.auTHLDAP4ORGANIZATIONMAP == null) {
      this.auTHLDAP4ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP4ORGANIZATIONMAP.put(key, auTHLDAP4ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return auTHLDAP4ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP4ORGANIZATIONMAP() {
    return auTHLDAP4ORGANIZATIONMAP;
  }

  public void setAuTHLDAP4ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP4ORGANIZATIONMAP) {
    this.auTHLDAP4ORGANIZATIONMAP = auTHLDAP4ORGANIZATIONMAP;
  }

  public SettingSingleton auTHLDAP4TEAMMAP(Map<String, Map<String, String>> auTHLDAP4TEAMMAP) {
    this.auTHLDAP4TEAMMAP = auTHLDAP4TEAMMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP4TEAMMAPItem(String key, Map<String, String> auTHLDAP4TEAMMAPItem) {
    if (this.auTHLDAP4TEAMMAP == null) {
      this.auTHLDAP4TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP4TEAMMAP.put(key, auTHLDAP4TEAMMAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return auTHLDAP4TEAMMAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP4TEAMMAP() {
    return auTHLDAP4TEAMMAP;
  }

  public void setAuTHLDAP4TEAMMAP(Map<String, Map<String, String>> auTHLDAP4TEAMMAP) {
    this.auTHLDAP4TEAMMAP = auTHLDAP4TEAMMAP;
  }

  public SettingSingleton auTHLDAP5SERVERURI(String auTHLDAP5SERVERURI) {
    this.auTHLDAP5SERVERURI = auTHLDAP5SERVERURI;
    return this;
  }

   /**
   * URI to connect to LDAP server, such as \&quot;ldap://ldap.example.com:389\&quot; (non-SSL) or \&quot;ldaps://ldap.example.com:636\&quot; (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
   * @return auTHLDAP5SERVERURI
  **/
  @Schema(description = "URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.")
  public String getAuTHLDAP5SERVERURI() {
    return auTHLDAP5SERVERURI;
  }

  public void setAuTHLDAP5SERVERURI(String auTHLDAP5SERVERURI) {
    this.auTHLDAP5SERVERURI = auTHLDAP5SERVERURI;
  }

  public SettingSingleton auTHLDAP5BINDDN(String auTHLDAP5BINDDN) {
    this.auTHLDAP5BINDDN = auTHLDAP5BINDDN;
    return this;
  }

   /**
   * DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.
   * @return auTHLDAP5BINDDN
  **/
  @Schema(description = "DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the documentation for example syntax.")
  public String getAuTHLDAP5BINDDN() {
    return auTHLDAP5BINDDN;
  }

  public void setAuTHLDAP5BINDDN(String auTHLDAP5BINDDN) {
    this.auTHLDAP5BINDDN = auTHLDAP5BINDDN;
  }

  public SettingSingleton auTHLDAP5BINDPASSWORD(String auTHLDAP5BINDPASSWORD) {
    this.auTHLDAP5BINDPASSWORD = auTHLDAP5BINDPASSWORD;
    return this;
  }

   /**
   * Password used to bind LDAP user account.
   * @return auTHLDAP5BINDPASSWORD
  **/
  @Schema(description = "Password used to bind LDAP user account.")
  public String getAuTHLDAP5BINDPASSWORD() {
    return auTHLDAP5BINDPASSWORD;
  }

  public void setAuTHLDAP5BINDPASSWORD(String auTHLDAP5BINDPASSWORD) {
    this.auTHLDAP5BINDPASSWORD = auTHLDAP5BINDPASSWORD;
  }

  public SettingSingleton auTHLDAP5STARTTLS(Boolean auTHLDAP5STARTTLS) {
    this.auTHLDAP5STARTTLS = auTHLDAP5STARTTLS;
    return this;
  }

   /**
   * Whether to enable TLS when the LDAP connection is not using SSL.
   * @return auTHLDAP5STARTTLS
  **/
  @Schema(description = "Whether to enable TLS when the LDAP connection is not using SSL.")
  public Boolean isAuTHLDAP5STARTTLS() {
    return auTHLDAP5STARTTLS;
  }

  public void setAuTHLDAP5STARTTLS(Boolean auTHLDAP5STARTTLS) {
    this.auTHLDAP5STARTTLS = auTHLDAP5STARTTLS;
  }

  public SettingSingleton auTHLDAP5CONNECTIONOPTIONS(Map<String, String> auTHLDAP5CONNECTIONOPTIONS) {
    this.auTHLDAP5CONNECTIONOPTIONS = auTHLDAP5CONNECTIONOPTIONS;
    return this;
  }

  public SettingSingleton putAuTHLDAP5CONNECTIONOPTIONSItem(String key, String auTHLDAP5CONNECTIONOPTIONSItem) {
    if (this.auTHLDAP5CONNECTIONOPTIONS == null) {
      this.auTHLDAP5CONNECTIONOPTIONS = new HashMap<String, String>();
    }
    this.auTHLDAP5CONNECTIONOPTIONS.put(key, auTHLDAP5CONNECTIONOPTIONSItem);
    return this;
  }

   /**
   * Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \&quot;OPT_REFERRALS\&quot;). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
   * @return auTHLDAP5CONNECTIONOPTIONS
  **/
  @Schema(description = "Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.")
  public Map<String, String> getAuTHLDAP5CONNECTIONOPTIONS() {
    return auTHLDAP5CONNECTIONOPTIONS;
  }

  public void setAuTHLDAP5CONNECTIONOPTIONS(Map<String, String> auTHLDAP5CONNECTIONOPTIONS) {
    this.auTHLDAP5CONNECTIONOPTIONS = auTHLDAP5CONNECTIONOPTIONS;
  }

  public SettingSingleton auTHLDAP5USERSEARCH(List<String> auTHLDAP5USERSEARCH) {
    this.auTHLDAP5USERSEARCH = auTHLDAP5USERSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP5USERSEARCHItem(String auTHLDAP5USERSEARCHItem) {
    if (this.auTHLDAP5USERSEARCH == null) {
      this.auTHLDAP5USERSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP5USERSEARCH.add(auTHLDAP5USERSEARCHItem);
    return this;
  }

   /**
   * LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \&quot;LDAPUnion\&quot; is possible. See the documentation for details.
   * @return auTHLDAP5USERSEARCH
  **/
  @Schema(description = "LDAP search query to find users.  Any user that matches the given pattern will be able to login to the service.  The user should also be mapped into an organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See the documentation for details.")
  public List<String> getAuTHLDAP5USERSEARCH() {
    return auTHLDAP5USERSEARCH;
  }

  public void setAuTHLDAP5USERSEARCH(List<String> auTHLDAP5USERSEARCH) {
    this.auTHLDAP5USERSEARCH = auTHLDAP5USERSEARCH;
  }

  public SettingSingleton auTHLDAP5USERDNTEMPLATE(String auTHLDAP5USERDNTEMPLATE) {
    this.auTHLDAP5USERDNTEMPLATE = auTHLDAP5USERDNTEMPLATE;
    return this;
  }

   /**
   * Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
   * @return auTHLDAP5USERDNTEMPLATE
  **/
  @Schema(description = "Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.")
  public String getAuTHLDAP5USERDNTEMPLATE() {
    return auTHLDAP5USERDNTEMPLATE;
  }

  public void setAuTHLDAP5USERDNTEMPLATE(String auTHLDAP5USERDNTEMPLATE) {
    this.auTHLDAP5USERDNTEMPLATE = auTHLDAP5USERDNTEMPLATE;
  }

  public SettingSingleton auTHLDAP5USERATTRMAP(Map<String, String> auTHLDAP5USERATTRMAP) {
    this.auTHLDAP5USERATTRMAP = auTHLDAP5USERATTRMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP5USERATTRMAPItem(String key, String auTHLDAP5USERATTRMAPItem) {
    if (this.auTHLDAP5USERATTRMAP == null) {
      this.auTHLDAP5USERATTRMAP = new HashMap<String, String>();
    }
    this.auTHLDAP5USERATTRMAP.put(key, auTHLDAP5USERATTRMAPItem);
    return this;
  }

   /**
   * Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.
   * @return auTHLDAP5USERATTRMAP
  **/
  @Schema(description = "Mapping of LDAP user schema to API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the documentation for additional details.")
  public Map<String, String> getAuTHLDAP5USERATTRMAP() {
    return auTHLDAP5USERATTRMAP;
  }

  public void setAuTHLDAP5USERATTRMAP(Map<String, String> auTHLDAP5USERATTRMAP) {
    this.auTHLDAP5USERATTRMAP = auTHLDAP5USERATTRMAP;
  }

  public SettingSingleton auTHLDAP5GROUPSEARCH(List<String> auTHLDAP5GROUPSEARCH) {
    this.auTHLDAP5GROUPSEARCH = auTHLDAP5GROUPSEARCH;
    return this;
  }

  public SettingSingleton addAuTHLDAP5GROUPSEARCHItem(String auTHLDAP5GROUPSEARCHItem) {
    if (this.auTHLDAP5GROUPSEARCH == null) {
      this.auTHLDAP5GROUPSEARCH = new ArrayList<String>();
    }
    this.auTHLDAP5GROUPSEARCH.add(auTHLDAP5GROUPSEARCHItem);
    return this;
  }

   /**
   * Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
   * @return auTHLDAP5GROUPSEARCH
  **/
  @Schema(description = "Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.")
  public List<String> getAuTHLDAP5GROUPSEARCH() {
    return auTHLDAP5GROUPSEARCH;
  }

  public void setAuTHLDAP5GROUPSEARCH(List<String> auTHLDAP5GROUPSEARCH) {
    this.auTHLDAP5GROUPSEARCH = auTHLDAP5GROUPSEARCH;
  }

  public SettingSingleton auTHLDAP5GROUPTYPE(AuTHLDAP5GROUPTYPEEnum auTHLDAP5GROUPTYPE) {
    this.auTHLDAP5GROUPTYPE = auTHLDAP5GROUPTYPE;
    return this;
  }

   /**
   * The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
   * @return auTHLDAP5GROUPTYPE
  **/
  @Schema(description = "The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups")
  public AuTHLDAP5GROUPTYPEEnum getAuTHLDAP5GROUPTYPE() {
    return auTHLDAP5GROUPTYPE;
  }

  public void setAuTHLDAP5GROUPTYPE(AuTHLDAP5GROUPTYPEEnum auTHLDAP5GROUPTYPE) {
    this.auTHLDAP5GROUPTYPE = auTHLDAP5GROUPTYPE;
  }

  public SettingSingleton auTHLDAP5GROUPTYPEPARAMS(Map<String, String> auTHLDAP5GROUPTYPEPARAMS) {
    this.auTHLDAP5GROUPTYPEPARAMS = auTHLDAP5GROUPTYPEPARAMS;
    return this;
  }

  public SettingSingleton putAuTHLDAP5GROUPTYPEPARAMSItem(String key, String auTHLDAP5GROUPTYPEPARAMSItem) {
    if (this.auTHLDAP5GROUPTYPEPARAMS == null) {
      this.auTHLDAP5GROUPTYPEPARAMS = new HashMap<String, String>();
    }
    this.auTHLDAP5GROUPTYPEPARAMS.put(key, auTHLDAP5GROUPTYPEPARAMSItem);
    return this;
  }

   /**
   * Key value parameters to send the chosen group type init method.
   * @return auTHLDAP5GROUPTYPEPARAMS
  **/
  @Schema(description = "Key value parameters to send the chosen group type init method.")
  public Map<String, String> getAuTHLDAP5GROUPTYPEPARAMS() {
    return auTHLDAP5GROUPTYPEPARAMS;
  }

  public void setAuTHLDAP5GROUPTYPEPARAMS(Map<String, String> auTHLDAP5GROUPTYPEPARAMS) {
    this.auTHLDAP5GROUPTYPEPARAMS = auTHLDAP5GROUPTYPEPARAMS;
  }

  public SettingSingleton auTHLDAP5REQUIREGROUP(String auTHLDAP5REQUIREGROUP) {
    this.auTHLDAP5REQUIREGROUP = auTHLDAP5REQUIREGROUP;
    return this;
  }

   /**
   * Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.
   * @return auTHLDAP5REQUIREGROUP
  **/
  @Schema(description = "Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login to the service. Only one require group is supported.")
  public String getAuTHLDAP5REQUIREGROUP() {
    return auTHLDAP5REQUIREGROUP;
  }

  public void setAuTHLDAP5REQUIREGROUP(String auTHLDAP5REQUIREGROUP) {
    this.auTHLDAP5REQUIREGROUP = auTHLDAP5REQUIREGROUP;
  }

  public SettingSingleton auTHLDAP5DENYGROUP(String auTHLDAP5DENYGROUP) {
    this.auTHLDAP5DENYGROUP = auTHLDAP5DENYGROUP;
    return this;
  }

   /**
   * Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
   * @return auTHLDAP5DENYGROUP
  **/
  @Schema(description = "Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.")
  public String getAuTHLDAP5DENYGROUP() {
    return auTHLDAP5DENYGROUP;
  }

  public void setAuTHLDAP5DENYGROUP(String auTHLDAP5DENYGROUP) {
    this.auTHLDAP5DENYGROUP = auTHLDAP5DENYGROUP;
  }

  public SettingSingleton auTHLDAP5USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP5USERFLAGSBYGROUP) {
    this.auTHLDAP5USERFLAGSBYGROUP = auTHLDAP5USERFLAGSBYGROUP;
    return this;
  }

  public SettingSingleton putAuTHLDAP5USERFLAGSBYGROUPItem(String key, List<String> auTHLDAP5USERFLAGSBYGROUPItem) {
    if (this.auTHLDAP5USERFLAGSBYGROUP == null) {
      this.auTHLDAP5USERFLAGSBYGROUP = new HashMap<String, List<String>>();
    }
    this.auTHLDAP5USERFLAGSBYGROUP.put(key, auTHLDAP5USERFLAGSBYGROUPItem);
    return this;
  }

   /**
   * Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.
   * @return auTHLDAP5USERFLAGSBYGROUP
  **/
  @Schema(description = "Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the documentation for more detail.")
  public Map<String, List<String>> getAuTHLDAP5USERFLAGSBYGROUP() {
    return auTHLDAP5USERFLAGSBYGROUP;
  }

  public void setAuTHLDAP5USERFLAGSBYGROUP(Map<String, List<String>> auTHLDAP5USERFLAGSBYGROUP) {
    this.auTHLDAP5USERFLAGSBYGROUP = auTHLDAP5USERFLAGSBYGROUP;
  }

  public SettingSingleton auTHLDAP5ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP5ORGANIZATIONMAP) {
    this.auTHLDAP5ORGANIZATIONMAP = auTHLDAP5ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP5ORGANIZATIONMAPItem(String key, Map<String, String> auTHLDAP5ORGANIZATIONMAPItem) {
    if (this.auTHLDAP5ORGANIZATIONMAP == null) {
      this.auTHLDAP5ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP5ORGANIZATIONMAP.put(key, auTHLDAP5ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.
   * @return auTHLDAP5ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping between organization admins/users and LDAP groups. This controls which users are placed into which organizations relative to their LDAP group memberships. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP5ORGANIZATIONMAP() {
    return auTHLDAP5ORGANIZATIONMAP;
  }

  public void setAuTHLDAP5ORGANIZATIONMAP(Map<String, Map<String, String>> auTHLDAP5ORGANIZATIONMAP) {
    this.auTHLDAP5ORGANIZATIONMAP = auTHLDAP5ORGANIZATIONMAP;
  }

  public SettingSingleton auTHLDAP5TEAMMAP(Map<String, Map<String, String>> auTHLDAP5TEAMMAP) {
    this.auTHLDAP5TEAMMAP = auTHLDAP5TEAMMAP;
    return this;
  }

  public SettingSingleton putAuTHLDAP5TEAMMAPItem(String key, Map<String, String> auTHLDAP5TEAMMAPItem) {
    if (this.auTHLDAP5TEAMMAP == null) {
      this.auTHLDAP5TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.auTHLDAP5TEAMMAP.put(key, auTHLDAP5TEAMMAPItem);
    return this;
  }

   /**
   * Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.
   * @return auTHLDAP5TEAMMAP
  **/
  @Schema(description = "Mapping between team members (users) and LDAP groups. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getAuTHLDAP5TEAMMAP() {
    return auTHLDAP5TEAMMAP;
  }

  public void setAuTHLDAP5TEAMMAP(Map<String, Map<String, String>> auTHLDAP5TEAMMAP) {
    this.auTHLDAP5TEAMMAP = auTHLDAP5TEAMMAP;
  }

  public SettingSingleton RADIUS_SERVER(String RADIUS_SERVER) {
    this.RADIUS_SERVER = RADIUS_SERVER;
    return this;
  }

   /**
   * Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty.
   * @return RADIUS_SERVER
  **/
  @Schema(description = "Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty.")
  public String getRADIUSSERVER() {
    return RADIUS_SERVER;
  }

  public void setRADIUSSERVER(String RADIUS_SERVER) {
    this.RADIUS_SERVER = RADIUS_SERVER;
  }

  public SettingSingleton RADIUS_PORT(Integer RADIUS_PORT) {
    this.RADIUS_PORT = RADIUS_PORT;
    return this;
  }

   /**
   * Port of RADIUS server.
   * minimum: 1
   * maximum: 65535
   * @return RADIUS_PORT
  **/
  @Schema(description = "Port of RADIUS server.")
  public Integer getRADIUSPORT() {
    return RADIUS_PORT;
  }

  public void setRADIUSPORT(Integer RADIUS_PORT) {
    this.RADIUS_PORT = RADIUS_PORT;
  }

  public SettingSingleton RADIUS_SECRET(String RADIUS_SECRET) {
    this.RADIUS_SECRET = RADIUS_SECRET;
    return this;
  }

   /**
   * Shared secret for authenticating to RADIUS server.
   * @return RADIUS_SECRET
  **/
  @Schema(description = "Shared secret for authenticating to RADIUS server.")
  public String getRADIUSSECRET() {
    return RADIUS_SECRET;
  }

  public void setRADIUSSECRET(String RADIUS_SECRET) {
    this.RADIUS_SECRET = RADIUS_SECRET;
  }

  public SettingSingleton TACACSPLUS_HOST(String TACACSPLUS_HOST) {
    this.TACACSPLUS_HOST = TACACSPLUS_HOST;
    return this;
  }

   /**
   * Hostname of TACACS+ server.
   * @return TACACSPLUS_HOST
  **/
  @Schema(description = "Hostname of TACACS+ server.")
  public String getTACACSPLUSHOST() {
    return TACACSPLUS_HOST;
  }

  public void setTACACSPLUSHOST(String TACACSPLUS_HOST) {
    this.TACACSPLUS_HOST = TACACSPLUS_HOST;
  }

  public SettingSingleton TACACSPLUS_PORT(Integer TACACSPLUS_PORT) {
    this.TACACSPLUS_PORT = TACACSPLUS_PORT;
    return this;
  }

   /**
   * Port number of TACACS+ server.
   * minimum: 1
   * maximum: 65535
   * @return TACACSPLUS_PORT
  **/
  @Schema(description = "Port number of TACACS+ server.")
  public Integer getTACACSPLUSPORT() {
    return TACACSPLUS_PORT;
  }

  public void setTACACSPLUSPORT(Integer TACACSPLUS_PORT) {
    this.TACACSPLUS_PORT = TACACSPLUS_PORT;
  }

  public SettingSingleton TACACSPLUS_SECRET(String TACACSPLUS_SECRET) {
    this.TACACSPLUS_SECRET = TACACSPLUS_SECRET;
    return this;
  }

   /**
   * Shared secret for authenticating to TACACS+ server.
   * @return TACACSPLUS_SECRET
  **/
  @Schema(description = "Shared secret for authenticating to TACACS+ server.")
  public String getTACACSPLUSSECRET() {
    return TACACSPLUS_SECRET;
  }

  public void setTACACSPLUSSECRET(String TACACSPLUS_SECRET) {
    this.TACACSPLUS_SECRET = TACACSPLUS_SECRET;
  }

  public SettingSingleton TACACSPLUS_SESSION_TIMEOUT(Integer TACACSPLUS_SESSION_TIMEOUT) {
    this.TACACSPLUS_SESSION_TIMEOUT = TACACSPLUS_SESSION_TIMEOUT;
    return this;
  }

   /**
   * TACACS+ session timeout value in seconds, 0 disables timeout.
   * minimum: 0
   * @return TACACSPLUS_SESSION_TIMEOUT
  **/
  @Schema(description = "TACACS+ session timeout value in seconds, 0 disables timeout.")
  public Integer getTACACSPLUSSESSIONTIMEOUT() {
    return TACACSPLUS_SESSION_TIMEOUT;
  }

  public void setTACACSPLUSSESSIONTIMEOUT(Integer TACACSPLUS_SESSION_TIMEOUT) {
    this.TACACSPLUS_SESSION_TIMEOUT = TACACSPLUS_SESSION_TIMEOUT;
  }

  public SettingSingleton TACACSPLUS_AUTH_PROTOCOL(TACACSPLUSAUTHPROTOCOLEnum TACACSPLUS_AUTH_PROTOCOL) {
    this.TACACSPLUS_AUTH_PROTOCOL = TACACSPLUS_AUTH_PROTOCOL;
    return this;
  }

   /**
   * Choose the authentication protocol used by TACACS+ client.
   * @return TACACSPLUS_AUTH_PROTOCOL
  **/
  @Schema(description = "Choose the authentication protocol used by TACACS+ client.")
  public TACACSPLUSAUTHPROTOCOLEnum getTACACSPLUSAUTHPROTOCOL() {
    return TACACSPLUS_AUTH_PROTOCOL;
  }

  public void setTACACSPLUSAUTHPROTOCOL(TACACSPLUSAUTHPROTOCOLEnum TACACSPLUS_AUTH_PROTOCOL) {
    this.TACACSPLUS_AUTH_PROTOCOL = TACACSPLUS_AUTH_PROTOCOL;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @return soCIALAUTHGOOGLEOAUTH2CALLBACKURL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.")
  public String getSoCIALAUTHGOOGLEOAUTH2CALLBACKURL() {
    return soCIALAUTHGOOGLEOAUTH2CALLBACKURL;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2KEY(String soCIALAUTHGOOGLEOAUTH2KEY) {
    this.soCIALAUTHGOOGLEOAUTH2KEY = soCIALAUTHGOOGLEOAUTH2KEY;
    return this;
  }

   /**
   * The OAuth2 key from your web application.
   * @return soCIALAUTHGOOGLEOAUTH2KEY
  **/
  @Schema(description = "The OAuth2 key from your web application.")
  public String getSoCIALAUTHGOOGLEOAUTH2KEY() {
    return soCIALAUTHGOOGLEOAUTH2KEY;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2KEY(String soCIALAUTHGOOGLEOAUTH2KEY) {
    this.soCIALAUTHGOOGLEOAUTH2KEY = soCIALAUTHGOOGLEOAUTH2KEY;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2SECRET(String soCIALAUTHGOOGLEOAUTH2SECRET) {
    this.soCIALAUTHGOOGLEOAUTH2SECRET = soCIALAUTHGOOGLEOAUTH2SECRET;
    return this;
  }

   /**
   * The OAuth2 secret from your web application.
   * @return soCIALAUTHGOOGLEOAUTH2SECRET
  **/
  @Schema(description = "The OAuth2 secret from your web application.")
  public String getSoCIALAUTHGOOGLEOAUTH2SECRET() {
    return soCIALAUTHGOOGLEOAUTH2SECRET;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2SECRET(String soCIALAUTHGOOGLEOAUTH2SECRET) {
    this.soCIALAUTHGOOGLEOAUTH2SECRET = soCIALAUTHGOOGLEOAUTH2SECRET;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS(List<String> soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS) {
    this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS = soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS;
    return this;
  }

  public SettingSingleton addSoCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINSItem(String soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINSItem) {
    if (this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS == null) {
      this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS = new ArrayList<String>();
    }
    this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS.add(soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINSItem);
    return this;
  }

   /**
   * Update this setting to restrict the domains who are allowed to login using Google OAuth2.
   * @return soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS
  **/
  @Schema(description = "Update this setting to restrict the domains who are allowed to login using Google OAuth2.")
  public List<String> getSoCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS() {
    return soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS(List<String> soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS) {
    this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS = soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS(Map<String, String> soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS) {
    this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS = soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS;
    return this;
  }

  public SettingSingleton putSoCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTSItem(String key, String soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTSItem) {
    if (this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS == null) {
      this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS = new HashMap<String, String>();
    }
    this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS.put(key, soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTSItem);
    return this;
  }

   /**
   * Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail.
   * @return soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS
  **/
  @Schema(description = "Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the documentation for more detail.")
  public Map<String, String> getSoCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS() {
    return soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS(Map<String, String> soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS) {
    this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS = soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP(Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP) {
    this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP = soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putSoCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAPItem(String key, Map<String, String> soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAPItem) {
    if (this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP == null) {
      this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP.put(key, soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSoCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP() {
    return soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP(Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP) {
    this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP = soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP;
  }

  public SettingSingleton soCIALAUTHGOOGLEOAUTH2TEAMMAP(Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2TEAMMAP) {
    this.soCIALAUTHGOOGLEOAUTH2TEAMMAP = soCIALAUTHGOOGLEOAUTH2TEAMMAP;
    return this;
  }

  public SettingSingleton putSoCIALAUTHGOOGLEOAUTH2TEAMMAPItem(String key, Map<String, String> soCIALAUTHGOOGLEOAUTH2TEAMMAPItem) {
    if (this.soCIALAUTHGOOGLEOAUTH2TEAMMAP == null) {
      this.soCIALAUTHGOOGLEOAUTH2TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.soCIALAUTHGOOGLEOAUTH2TEAMMAP.put(key, soCIALAUTHGOOGLEOAUTH2TEAMMAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return soCIALAUTHGOOGLEOAUTH2TEAMMAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSoCIALAUTHGOOGLEOAUTH2TEAMMAP() {
    return soCIALAUTHGOOGLEOAUTH2TEAMMAP;
  }

  public void setSoCIALAUTHGOOGLEOAUTH2TEAMMAP(Map<String, Map<String, String>> soCIALAUTHGOOGLEOAUTH2TEAMMAP) {
    this.soCIALAUTHGOOGLEOAUTH2TEAMMAP = soCIALAUTHGOOGLEOAUTH2TEAMMAP;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @return SOCIAL_AUTH_GITHUB_CALLBACK_URL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.")
  public String getSOCIALAUTHGITHUBCALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_KEY(String SOCIAL_AUTH_GITHUB_KEY) {
    this.SOCIAL_AUTH_GITHUB_KEY = SOCIAL_AUTH_GITHUB_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub developer application.
   * @return SOCIAL_AUTH_GITHUB_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub developer application.")
  public String getSOCIALAUTHGITHUBKEY() {
    return SOCIAL_AUTH_GITHUB_KEY;
  }

  public void setSOCIALAUTHGITHUBKEY(String SOCIAL_AUTH_GITHUB_KEY) {
    this.SOCIAL_AUTH_GITHUB_KEY = SOCIAL_AUTH_GITHUB_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_SECRET(String SOCIAL_AUTH_GITHUB_SECRET) {
    this.SOCIAL_AUTH_GITHUB_SECRET = SOCIAL_AUTH_GITHUB_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub developer application.
   * @return SOCIAL_AUTH_GITHUB_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub developer application.")
  public String getSOCIALAUTHGITHUBSECRET() {
    return SOCIAL_AUTH_GITHUB_SECRET;
  }

  public void setSOCIALAUTHGITHUBSECRET(String SOCIAL_AUTH_GITHUB_SECRET) {
    this.SOCIAL_AUTH_GITHUB_SECRET = SOCIAL_AUTH_GITHUB_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_MAP = SOCIAL_AUTH_GITHUB_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBTEAMMAP() {
    return SOCIAL_AUTH_GITHUB_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_MAP = SOCIAL_AUTH_GITHUB_TEAM_MAP;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @return SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.")
  public String getSOCIALAUTHGITHUBORGCALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORG_KEY(String SOCIAL_AUTH_GITHUB_ORG_KEY) {
    this.SOCIAL_AUTH_GITHUB_ORG_KEY = SOCIAL_AUTH_GITHUB_ORG_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub organization application.
   * @return SOCIAL_AUTH_GITHUB_ORG_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub organization application.")
  public String getSOCIALAUTHGITHUBORGKEY() {
    return SOCIAL_AUTH_GITHUB_ORG_KEY;
  }

  public void setSOCIALAUTHGITHUBORGKEY(String SOCIAL_AUTH_GITHUB_ORG_KEY) {
    this.SOCIAL_AUTH_GITHUB_ORG_KEY = SOCIAL_AUTH_GITHUB_ORG_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORG_SECRET(String SOCIAL_AUTH_GITHUB_ORG_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ORG_SECRET = SOCIAL_AUTH_GITHUB_ORG_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub organization application.
   * @return SOCIAL_AUTH_GITHUB_ORG_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub organization application.")
  public String getSOCIALAUTHGITHUBORGSECRET() {
    return SOCIAL_AUTH_GITHUB_ORG_SECRET;
  }

  public void setSOCIALAUTHGITHUBORGSECRET(String SOCIAL_AUTH_GITHUB_ORG_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ORG_SECRET = SOCIAL_AUTH_GITHUB_ORG_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORG_NAME(String SOCIAL_AUTH_GITHUB_ORG_NAME) {
    this.SOCIAL_AUTH_GITHUB_ORG_NAME = SOCIAL_AUTH_GITHUB_ORG_NAME;
    return this;
  }

   /**
   * The name of your GitHub organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/.
   * @return SOCIAL_AUTH_GITHUB_ORG_NAME
  **/
  @Schema(description = "The name of your GitHub organization, as used in your organization's URL: https://github.com/<yourorg>/.")
  public String getSOCIALAUTHGITHUBORGNAME() {
    return SOCIAL_AUTH_GITHUB_ORG_NAME;
  }

  public void setSOCIALAUTHGITHUBORGNAME(String SOCIAL_AUTH_GITHUB_ORG_NAME) {
    this.SOCIAL_AUTH_GITHUB_ORG_NAME = SOCIAL_AUTH_GITHUB_ORG_NAME;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBORGORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBORGORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBORGORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP = SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBORGTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ORG_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_ORG_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBORGTEAMMAP() {
    return SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBORGTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP = SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP;
  }

   /**
   * Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.
   * @return SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL
  **/
  @Schema(description = "Create an organization-owned application at https://github.com/organizations/<yourorg>/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.")
  public String getSOCIALAUTHGITHUBTEAMCALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_KEY(String SOCIAL_AUTH_GITHUB_TEAM_KEY) {
    this.SOCIAL_AUTH_GITHUB_TEAM_KEY = SOCIAL_AUTH_GITHUB_TEAM_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub organization application.
   * @return SOCIAL_AUTH_GITHUB_TEAM_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub organization application.")
  public String getSOCIALAUTHGITHUBTEAMKEY() {
    return SOCIAL_AUTH_GITHUB_TEAM_KEY;
  }

  public void setSOCIALAUTHGITHUBTEAMKEY(String SOCIAL_AUTH_GITHUB_TEAM_KEY) {
    this.SOCIAL_AUTH_GITHUB_TEAM_KEY = SOCIAL_AUTH_GITHUB_TEAM_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_SECRET(String SOCIAL_AUTH_GITHUB_TEAM_SECRET) {
    this.SOCIAL_AUTH_GITHUB_TEAM_SECRET = SOCIAL_AUTH_GITHUB_TEAM_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub organization application.
   * @return SOCIAL_AUTH_GITHUB_TEAM_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub organization application.")
  public String getSOCIALAUTHGITHUBTEAMSECRET() {
    return SOCIAL_AUTH_GITHUB_TEAM_SECRET;
  }

  public void setSOCIALAUTHGITHUBTEAMSECRET(String SOCIAL_AUTH_GITHUB_TEAM_SECRET) {
    this.SOCIAL_AUTH_GITHUB_TEAM_SECRET = SOCIAL_AUTH_GITHUB_TEAM_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_ID(String SOCIAL_AUTH_GITHUB_TEAM_ID) {
    this.SOCIAL_AUTH_GITHUB_TEAM_ID = SOCIAL_AUTH_GITHUB_TEAM_ID;
    return this;
  }

   /**
   * Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
   * @return SOCIAL_AUTH_GITHUB_TEAM_ID
  **/
  @Schema(description = "Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.")
  public String getSOCIALAUTHGITHUBTEAMID() {
    return SOCIAL_AUTH_GITHUB_TEAM_ID;
  }

  public void setSOCIALAUTHGITHUBTEAMID(String SOCIAL_AUTH_GITHUB_TEAM_ID) {
    this.SOCIAL_AUTH_GITHUB_TEAM_ID = SOCIAL_AUTH_GITHUB_TEAM_ID;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBTEAMORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBTEAMORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBTEAMORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP = SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBTEAMTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBTEAMTEAMMAP() {
    return SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBTEAMTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP = SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.")
  public String getSOCIALAUTHGITHUBENTERPRISECALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_URL;
    return this;
  }

   /**
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_URL
  **/
  @Schema(description = "The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISEURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL;
    return this;
  }

   /**
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL
  **/
  @Schema(description = "The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISEAPIURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEAPIURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub Enterprise developer application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub Enterprise developer application.")
  public String getSOCIALAUTHGITHUBENTERPRISEKEY() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEKEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub Enterprise developer application.")
  public String getSOCIALAUTHGITHUBENTERPRISESECRET() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET;
  }

  public void setSOCIALAUTHGITHUBENTERPRISESECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISEORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISEORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISETEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISETEAMMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGCALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL;
    return this;
  }

   /**
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL
  **/
  @Schema(description = "The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL;
    return this;
  }

   /**
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL
  **/
  @Schema(description = "The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGAPIURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGAPIURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub Enterprise organization application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub Enterprise organization application.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGKEY() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGKEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGSECRET() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGSECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME;
    return this;
  }

   /**
   * The name of your GitHub Enterprise organization, as used in your organization&#x27;s URL: https://github.com/&lt;yourorg&gt;/.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME
  **/
  @Schema(description = "The name of your GitHub Enterprise organization, as used in your organization's URL: https://github.com/<yourorg>/.")
  public String getSOCIALAUTHGITHUBENTERPRISEORGNAME() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGNAME(String SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISEORGORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISEORGORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISEORGTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISEORGTEAMMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISEORGTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP;
  }

   /**
   * Create an organization-owned application at https://github.com/organizations/&lt;yourorg&gt;/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL
  **/
  @Schema(description = "Create an organization-owned application at https://github.com/organizations/<yourorg>/settings/applications and obtain an OAuth2 key (Client ID) and secret (Client Secret). Provide this URL as the callback URL for your application.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMCALLBACKURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL;
    return this;
  }

   /**
   * The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL
  **/
  @Schema(description = "The URL for your Github Enterprise instance, e.g.: http(s)://hostname/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL;
    return this;
  }

   /**
   * The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL
  **/
  @Schema(description = "The API URL for your GitHub Enterprise instance, e.g.: http(s)://hostname/api/v3/. Refer to Github Enterprise documentation for more details.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMAPIURL() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMAPIURL(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your GitHub Enterprise organization application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your GitHub Enterprise organization application.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMKEY() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMKEY(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your GitHub Enterprise organization application.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMSECRET() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMSECRET(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID;
    return this;
  }

   /**
   * Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID
  **/
  @Schema(description = "Find the numeric team ID using the Github Enterprise API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.")
  public String getSOCIALAUTHGITHUBENTERPRISETEAMID() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMID(String SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISETEAMORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISETEAMORGANIZATIONMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHGITHUBENTERPRISETEAMTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP == null) {
      this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP.put(key, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHGITHUBENTERPRISETEAMTEAMMAP() {
    return SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP;
  }

  public void setSOCIALAUTHGITHUBENTERPRISETEAMTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP) {
    this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP = SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP;
  }

   /**
   * Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. 
   * @return soCIALAUTHAZUREADOAUTH2CALLBACKURL
  **/
  @Schema(description = "Provide this URL as the callback URL for your application as part of your registration process. Refer to the documentation for more detail. ")
  public String getSoCIALAUTHAZUREADOAUTH2CALLBACKURL() {
    return soCIALAUTHAZUREADOAUTH2CALLBACKURL;
  }

  public SettingSingleton soCIALAUTHAZUREADOAUTH2KEY(String soCIALAUTHAZUREADOAUTH2KEY) {
    this.soCIALAUTHAZUREADOAUTH2KEY = soCIALAUTHAZUREADOAUTH2KEY;
    return this;
  }

   /**
   * The OAuth2 key (Client ID) from your Azure AD application.
   * @return soCIALAUTHAZUREADOAUTH2KEY
  **/
  @Schema(description = "The OAuth2 key (Client ID) from your Azure AD application.")
  public String getSoCIALAUTHAZUREADOAUTH2KEY() {
    return soCIALAUTHAZUREADOAUTH2KEY;
  }

  public void setSoCIALAUTHAZUREADOAUTH2KEY(String soCIALAUTHAZUREADOAUTH2KEY) {
    this.soCIALAUTHAZUREADOAUTH2KEY = soCIALAUTHAZUREADOAUTH2KEY;
  }

  public SettingSingleton soCIALAUTHAZUREADOAUTH2SECRET(String soCIALAUTHAZUREADOAUTH2SECRET) {
    this.soCIALAUTHAZUREADOAUTH2SECRET = soCIALAUTHAZUREADOAUTH2SECRET;
    return this;
  }

   /**
   * The OAuth2 secret (Client Secret) from your Azure AD application.
   * @return soCIALAUTHAZUREADOAUTH2SECRET
  **/
  @Schema(description = "The OAuth2 secret (Client Secret) from your Azure AD application.")
  public String getSoCIALAUTHAZUREADOAUTH2SECRET() {
    return soCIALAUTHAZUREADOAUTH2SECRET;
  }

  public void setSoCIALAUTHAZUREADOAUTH2SECRET(String soCIALAUTHAZUREADOAUTH2SECRET) {
    this.soCIALAUTHAZUREADOAUTH2SECRET = soCIALAUTHAZUREADOAUTH2SECRET;
  }

  public SettingSingleton soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP(Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP) {
    this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP = soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP;
    return this;
  }

  public SettingSingleton putSoCIALAUTHAZUREADOAUTH2ORGANIZATIONMAPItem(String key, Map<String, String> soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAPItem) {
    if (this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP == null) {
      this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP = new HashMap<String, Map<String, String>>();
    }
    this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP.put(key, soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSoCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP() {
    return soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP;
  }

  public void setSoCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP(Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP) {
    this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP = soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP;
  }

  public SettingSingleton soCIALAUTHAZUREADOAUTH2TEAMMAP(Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2TEAMMAP) {
    this.soCIALAUTHAZUREADOAUTH2TEAMMAP = soCIALAUTHAZUREADOAUTH2TEAMMAP;
    return this;
  }

  public SettingSingleton putSoCIALAUTHAZUREADOAUTH2TEAMMAPItem(String key, Map<String, String> soCIALAUTHAZUREADOAUTH2TEAMMAPItem) {
    if (this.soCIALAUTHAZUREADOAUTH2TEAMMAP == null) {
      this.soCIALAUTHAZUREADOAUTH2TEAMMAP = new HashMap<String, Map<String, String>>();
    }
    this.soCIALAUTHAZUREADOAUTH2TEAMMAP.put(key, soCIALAUTHAZUREADOAUTH2TEAMMAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return soCIALAUTHAZUREADOAUTH2TEAMMAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSoCIALAUTHAZUREADOAUTH2TEAMMAP() {
    return soCIALAUTHAZUREADOAUTH2TEAMMAP;
  }

  public void setSoCIALAUTHAZUREADOAUTH2TEAMMAP(Map<String, Map<String, String>> soCIALAUTHAZUREADOAUTH2TEAMMAP) {
    this.soCIALAUTHAZUREADOAUTH2TEAMMAP = soCIALAUTHAZUREADOAUTH2TEAMMAP;
  }

  public SettingSingleton SAML_AUTO_CREATE_OBJECTS(Boolean SAML_AUTO_CREATE_OBJECTS) {
    this.SAML_AUTO_CREATE_OBJECTS = SAML_AUTO_CREATE_OBJECTS;
    return this;
  }

   /**
   * When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login.
   * @return SAML_AUTO_CREATE_OBJECTS
  **/
  @Schema(description = "When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login.")
  public Boolean isSAMLAUTOCREATEOBJECTS() {
    return SAML_AUTO_CREATE_OBJECTS;
  }

  public void setSAMLAUTOCREATEOBJECTS(Boolean SAML_AUTO_CREATE_OBJECTS) {
    this.SAML_AUTO_CREATE_OBJECTS = SAML_AUTO_CREATE_OBJECTS;
  }

   /**
   * Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application.
   * @return SOCIAL_AUTH_SAML_CALLBACK_URL
  **/
  @Schema(description = "Register the service as a service provider (SP) with each identity provider (IdP) you have configured. Provide your SP Entity ID and this ACS URL for your application.")
  public String getSOCIALAUTHSAMLCALLBACKURL() {
    return SOCIAL_AUTH_SAML_CALLBACK_URL;
  }

   /**
   * If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL.
   * @return SOCIAL_AUTH_SAML_METADATA_URL
  **/
  @Schema(description = "If your identity provider (IdP) allows uploading an XML metadata file, you can download one from this URL.")
  public String getSOCIALAUTHSAMLMETADATAURL() {
    return SOCIAL_AUTH_SAML_METADATA_URL;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SP_ENTITY_ID(String SOCIAL_AUTH_SAML_SP_ENTITY_ID) {
    this.SOCIAL_AUTH_SAML_SP_ENTITY_ID = SOCIAL_AUTH_SAML_SP_ENTITY_ID;
    return this;
  }

   /**
   * The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service.
   * @return SOCIAL_AUTH_SAML_SP_ENTITY_ID
  **/
  @Schema(description = "The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for the service.")
  public String getSOCIALAUTHSAMLSPENTITYID() {
    return SOCIAL_AUTH_SAML_SP_ENTITY_ID;
  }

  public void setSOCIALAUTHSAMLSPENTITYID(String SOCIAL_AUTH_SAML_SP_ENTITY_ID) {
    this.SOCIAL_AUTH_SAML_SP_ENTITY_ID = SOCIAL_AUTH_SAML_SP_ENTITY_ID;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SP_PUBLIC_CERT(String SOCIAL_AUTH_SAML_SP_PUBLIC_CERT) {
    this.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = SOCIAL_AUTH_SAML_SP_PUBLIC_CERT;
    return this;
  }

   /**
   * Create a keypair to use as a service provider (SP) and include the certificate content here.
   * @return SOCIAL_AUTH_SAML_SP_PUBLIC_CERT
  **/
  @Schema(required = true, description = "Create a keypair to use as a service provider (SP) and include the certificate content here.")
  public String getSOCIALAUTHSAMLSPPUBLICCERT() {
    return SOCIAL_AUTH_SAML_SP_PUBLIC_CERT;
  }

  public void setSOCIALAUTHSAMLSPPUBLICCERT(String SOCIAL_AUTH_SAML_SP_PUBLIC_CERT) {
    this.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = SOCIAL_AUTH_SAML_SP_PUBLIC_CERT;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SP_PRIVATE_KEY(String SOCIAL_AUTH_SAML_SP_PRIVATE_KEY) {
    this.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = SOCIAL_AUTH_SAML_SP_PRIVATE_KEY;
    return this;
  }

   /**
   * Create a keypair to use as a service provider (SP) and include the private key content here.
   * @return SOCIAL_AUTH_SAML_SP_PRIVATE_KEY
  **/
  @Schema(required = true, description = "Create a keypair to use as a service provider (SP) and include the private key content here.")
  public String getSOCIALAUTHSAMLSPPRIVATEKEY() {
    return SOCIAL_AUTH_SAML_SP_PRIVATE_KEY;
  }

  public void setSOCIALAUTHSAMLSPPRIVATEKEY(String SOCIAL_AUTH_SAML_SP_PRIVATE_KEY) {
    this.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = SOCIAL_AUTH_SAML_SP_PRIVATE_KEY;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_ORG_INFO(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORG_INFO) {
    this.SOCIAL_AUTH_SAML_ORG_INFO = SOCIAL_AUTH_SAML_ORG_INFO;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLORGINFOItem(String key, Map<String, String> SOCIAL_AUTH_SAML_ORG_INFOItem) {
    this.SOCIAL_AUTH_SAML_ORG_INFO.put(key, SOCIAL_AUTH_SAML_ORG_INFOItem);
    return this;
  }

   /**
   * Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax.
   * @return SOCIAL_AUTH_SAML_ORG_INFO
  **/
  @Schema(required = true, description = "Provide the URL, display name, and the name of your app. Refer to the documentation for example syntax.")
  public Map<String, Map<String, String>> getSOCIALAUTHSAMLORGINFO() {
    return SOCIAL_AUTH_SAML_ORG_INFO;
  }

  public void setSOCIALAUTHSAMLORGINFO(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORG_INFO) {
    this.SOCIAL_AUTH_SAML_ORG_INFO = SOCIAL_AUTH_SAML_ORG_INFO;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_TECHNICAL_CONTACT(Map<String, String> SOCIAL_AUTH_SAML_TECHNICAL_CONTACT) {
    this.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = SOCIAL_AUTH_SAML_TECHNICAL_CONTACT;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLTECHNICALCONTACTItem(String key, String SOCIAL_AUTH_SAML_TECHNICAL_CONTACTItem) {
    this.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT.put(key, SOCIAL_AUTH_SAML_TECHNICAL_CONTACTItem);
    return this;
  }

   /**
   * Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax.
   * @return SOCIAL_AUTH_SAML_TECHNICAL_CONTACT
  **/
  @Schema(required = true, description = "Provide the name and email address of the technical contact for your service provider. Refer to the documentation for example syntax.")
  public Map<String, String> getSOCIALAUTHSAMLTECHNICALCONTACT() {
    return SOCIAL_AUTH_SAML_TECHNICAL_CONTACT;
  }

  public void setSOCIALAUTHSAMLTECHNICALCONTACT(Map<String, String> SOCIAL_AUTH_SAML_TECHNICAL_CONTACT) {
    this.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = SOCIAL_AUTH_SAML_TECHNICAL_CONTACT;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SUPPORT_CONTACT(Map<String, String> SOCIAL_AUTH_SAML_SUPPORT_CONTACT) {
    this.SOCIAL_AUTH_SAML_SUPPORT_CONTACT = SOCIAL_AUTH_SAML_SUPPORT_CONTACT;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLSUPPORTCONTACTItem(String key, String SOCIAL_AUTH_SAML_SUPPORT_CONTACTItem) {
    this.SOCIAL_AUTH_SAML_SUPPORT_CONTACT.put(key, SOCIAL_AUTH_SAML_SUPPORT_CONTACTItem);
    return this;
  }

   /**
   * Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax.
   * @return SOCIAL_AUTH_SAML_SUPPORT_CONTACT
  **/
  @Schema(required = true, description = "Provide the name and email address of the support contact for your service provider. Refer to the documentation for example syntax.")
  public Map<String, String> getSOCIALAUTHSAMLSUPPORTCONTACT() {
    return SOCIAL_AUTH_SAML_SUPPORT_CONTACT;
  }

  public void setSOCIALAUTHSAMLSUPPORTCONTACT(Map<String, String> SOCIAL_AUTH_SAML_SUPPORT_CONTACT) {
    this.SOCIAL_AUTH_SAML_SUPPORT_CONTACT = SOCIAL_AUTH_SAML_SUPPORT_CONTACT;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_ENABLED_IDPS(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ENABLED_IDPS) {
    this.SOCIAL_AUTH_SAML_ENABLED_IDPS = SOCIAL_AUTH_SAML_ENABLED_IDPS;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLENABLEDIDPSItem(String key, Map<String, String> SOCIAL_AUTH_SAML_ENABLED_IDPSItem) {
    if (this.SOCIAL_AUTH_SAML_ENABLED_IDPS == null) {
      this.SOCIAL_AUTH_SAML_ENABLED_IDPS = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_SAML_ENABLED_IDPS.put(key, SOCIAL_AUTH_SAML_ENABLED_IDPSItem);
    return this;
  }

   /**
   * Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax.
   * @return SOCIAL_AUTH_SAML_ENABLED_IDPS
  **/
  @Schema(description = "Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax.")
  public Map<String, Map<String, String>> getSOCIALAUTHSAMLENABLEDIDPS() {
    return SOCIAL_AUTH_SAML_ENABLED_IDPS;
  }

  public void setSOCIALAUTHSAMLENABLEDIDPS(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ENABLED_IDPS) {
    this.SOCIAL_AUTH_SAML_ENABLED_IDPS = SOCIAL_AUTH_SAML_ENABLED_IDPS;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SECURITY_CONFIG(Map<String, String> SOCIAL_AUTH_SAML_SECURITY_CONFIG) {
    this.SOCIAL_AUTH_SAML_SECURITY_CONFIG = SOCIAL_AUTH_SAML_SECURITY_CONFIG;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLSECURITYCONFIGItem(String key, String SOCIAL_AUTH_SAML_SECURITY_CONFIGItem) {
    if (this.SOCIAL_AUTH_SAML_SECURITY_CONFIG == null) {
      this.SOCIAL_AUTH_SAML_SECURITY_CONFIG = new HashMap<String, String>();
    }
    this.SOCIAL_AUTH_SAML_SECURITY_CONFIG.put(key, SOCIAL_AUTH_SAML_SECURITY_CONFIGItem);
    return this;
  }

   /**
   * A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings
   * @return SOCIAL_AUTH_SAML_SECURITY_CONFIG
  **/
  @Schema(description = "A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings")
  public Map<String, String> getSOCIALAUTHSAMLSECURITYCONFIG() {
    return SOCIAL_AUTH_SAML_SECURITY_CONFIG;
  }

  public void setSOCIALAUTHSAMLSECURITYCONFIG(Map<String, String> SOCIAL_AUTH_SAML_SECURITY_CONFIG) {
    this.SOCIAL_AUTH_SAML_SECURITY_CONFIG = SOCIAL_AUTH_SAML_SECURITY_CONFIG;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_SP_EXTRA(Map<String, String> SOCIAL_AUTH_SAML_SP_EXTRA) {
    this.SOCIAL_AUTH_SAML_SP_EXTRA = SOCIAL_AUTH_SAML_SP_EXTRA;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLSPEXTRAItem(String key, String SOCIAL_AUTH_SAML_SP_EXTRAItem) {
    if (this.SOCIAL_AUTH_SAML_SP_EXTRA == null) {
      this.SOCIAL_AUTH_SAML_SP_EXTRA = new HashMap<String, String>();
    }
    this.SOCIAL_AUTH_SAML_SP_EXTRA.put(key, SOCIAL_AUTH_SAML_SP_EXTRAItem);
    return this;
  }

   /**
   * A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting.
   * @return SOCIAL_AUTH_SAML_SP_EXTRA
  **/
  @Schema(description = "A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting.")
  public Map<String, String> getSOCIALAUTHSAMLSPEXTRA() {
    return SOCIAL_AUTH_SAML_SP_EXTRA;
  }

  public void setSOCIALAUTHSAMLSPEXTRA(Map<String, String> SOCIAL_AUTH_SAML_SP_EXTRA) {
    this.SOCIAL_AUTH_SAML_SP_EXTRA = SOCIAL_AUTH_SAML_SP_EXTRA;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_EXTRA_DATA(List<String> SOCIAL_AUTH_SAML_EXTRA_DATA) {
    this.SOCIAL_AUTH_SAML_EXTRA_DATA = SOCIAL_AUTH_SAML_EXTRA_DATA;
    return this;
  }

  public SettingSingleton addSOCIALAUTHSAMLEXTRADATAItem(String SOCIAL_AUTH_SAML_EXTRA_DATAItem) {
    if (this.SOCIAL_AUTH_SAML_EXTRA_DATA == null) {
      this.SOCIAL_AUTH_SAML_EXTRA_DATA = new ArrayList<String>();
    }
    this.SOCIAL_AUTH_SAML_EXTRA_DATA.add(SOCIAL_AUTH_SAML_EXTRA_DATAItem);
    return this;
  }

   /**
   * A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value.
   * @return SOCIAL_AUTH_SAML_EXTRA_DATA
  **/
  @Schema(description = "A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value.")
  public List<String> getSOCIALAUTHSAMLEXTRADATA() {
    return SOCIAL_AUTH_SAML_EXTRA_DATA;
  }

  public void setSOCIALAUTHSAMLEXTRADATA(List<String> SOCIAL_AUTH_SAML_EXTRA_DATA) {
    this.SOCIAL_AUTH_SAML_EXTRA_DATA = SOCIAL_AUTH_SAML_EXTRA_DATA;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_ORGANIZATION_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP = SOCIAL_AUTH_SAML_ORGANIZATION_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLORGANIZATIONMAPItem(String key, Map<String, String> SOCIAL_AUTH_SAML_ORGANIZATION_MAPItem) {
    if (this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP == null) {
      this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP.put(key, SOCIAL_AUTH_SAML_ORGANIZATION_MAPItem);
    return this;
  }

   /**
   * Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.
   * @return SOCIAL_AUTH_SAML_ORGANIZATION_MAP
  **/
  @Schema(description = "Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which organizations based on their username and email address. Configuration details are available in the  documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHSAMLORGANIZATIONMAP() {
    return SOCIAL_AUTH_SAML_ORGANIZATION_MAP;
  }

  public void setSOCIALAUTHSAMLORGANIZATIONMAP(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_ORGANIZATION_MAP) {
    this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP = SOCIAL_AUTH_SAML_ORGANIZATION_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_TEAM_MAP(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_TEAM_MAP) {
    this.SOCIAL_AUTH_SAML_TEAM_MAP = SOCIAL_AUTH_SAML_TEAM_MAP;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLTEAMMAPItem(String key, Map<String, String> SOCIAL_AUTH_SAML_TEAM_MAPItem) {
    if (this.SOCIAL_AUTH_SAML_TEAM_MAP == null) {
      this.SOCIAL_AUTH_SAML_TEAM_MAP = new HashMap<String, Map<String, String>>();
    }
    this.SOCIAL_AUTH_SAML_TEAM_MAP.put(key, SOCIAL_AUTH_SAML_TEAM_MAPItem);
    return this;
  }

   /**
   * Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.
   * @return SOCIAL_AUTH_SAML_TEAM_MAP
  **/
  @Schema(description = "Mapping of team members (users) from social auth accounts. Configuration details are available in the documentation.")
  public Map<String, Map<String, String>> getSOCIALAUTHSAMLTEAMMAP() {
    return SOCIAL_AUTH_SAML_TEAM_MAP;
  }

  public void setSOCIALAUTHSAMLTEAMMAP(Map<String, Map<String, String>> SOCIAL_AUTH_SAML_TEAM_MAP) {
    this.SOCIAL_AUTH_SAML_TEAM_MAP = SOCIAL_AUTH_SAML_TEAM_MAP;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_ORGANIZATION_ATTR(Map<String, String> SOCIAL_AUTH_SAML_ORGANIZATION_ATTR) {
    this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR = SOCIAL_AUTH_SAML_ORGANIZATION_ATTR;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLORGANIZATIONATTRItem(String key, String SOCIAL_AUTH_SAML_ORGANIZATION_ATTRItem) {
    if (this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR == null) {
      this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR = new HashMap<String, String>();
    }
    this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR.put(key, SOCIAL_AUTH_SAML_ORGANIZATION_ATTRItem);
    return this;
  }

   /**
   * Used to translate user organization membership.
   * @return SOCIAL_AUTH_SAML_ORGANIZATION_ATTR
  **/
  @Schema(description = "Used to translate user organization membership.")
  public Map<String, String> getSOCIALAUTHSAMLORGANIZATIONATTR() {
    return SOCIAL_AUTH_SAML_ORGANIZATION_ATTR;
  }

  public void setSOCIALAUTHSAMLORGANIZATIONATTR(Map<String, String> SOCIAL_AUTH_SAML_ORGANIZATION_ATTR) {
    this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR = SOCIAL_AUTH_SAML_ORGANIZATION_ATTR;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_TEAM_ATTR(Map<String, String> SOCIAL_AUTH_SAML_TEAM_ATTR) {
    this.SOCIAL_AUTH_SAML_TEAM_ATTR = SOCIAL_AUTH_SAML_TEAM_ATTR;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLTEAMATTRItem(String key, String SOCIAL_AUTH_SAML_TEAM_ATTRItem) {
    if (this.SOCIAL_AUTH_SAML_TEAM_ATTR == null) {
      this.SOCIAL_AUTH_SAML_TEAM_ATTR = new HashMap<String, String>();
    }
    this.SOCIAL_AUTH_SAML_TEAM_ATTR.put(key, SOCIAL_AUTH_SAML_TEAM_ATTRItem);
    return this;
  }

   /**
   * Used to translate user team membership.
   * @return SOCIAL_AUTH_SAML_TEAM_ATTR
  **/
  @Schema(description = "Used to translate user team membership.")
  public Map<String, String> getSOCIALAUTHSAMLTEAMATTR() {
    return SOCIAL_AUTH_SAML_TEAM_ATTR;
  }

  public void setSOCIALAUTHSAMLTEAMATTR(Map<String, String> SOCIAL_AUTH_SAML_TEAM_ATTR) {
    this.SOCIAL_AUTH_SAML_TEAM_ATTR = SOCIAL_AUTH_SAML_TEAM_ATTR;
  }

  public SettingSingleton SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR(Map<String, String> SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR) {
    this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR = SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR;
    return this;
  }

  public SettingSingleton putSOCIALAUTHSAMLUSERFLAGSBYATTRItem(String key, String SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTRItem) {
    if (this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR == null) {
      this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR = new HashMap<String, String>();
    }
    this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR.put(key, SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTRItem);
    return this;
  }

   /**
   * Used to map super users and system auditors from SAML.
   * @return SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR
  **/
  @Schema(description = "Used to map super users and system auditors from SAML.")
  public Map<String, String> getSOCIALAUTHSAMLUSERFLAGSBYATTR() {
    return SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR;
  }

  public void setSOCIALAUTHSAMLUSERFLAGSBYATTR(Map<String, String> SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR) {
    this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR = SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR;
  }

   /**
   * Read-only list of key-value pairs that shows the standard format of all available named URLs.
   * @return NAMED_URL_FORMATS
  **/
  @Schema(description = "Read-only list of key-value pairs that shows the standard format of all available named URLs.")
  public Map<String, String> getNAMEDURLFORMATS() {
    return NAMED_URL_FORMATS;
  }

   /**
   * Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources
   * @return NAMED_URL_GRAPH_NODES
  **/
  @Schema(description = "Read-only list of key-value pairs that exposes named URL graph topology. Use this list to programmatically generate named URLs for resources")
  public Map<String, String> getNAMEDURLGRAPHNODES() {
    return NAMED_URL_GRAPH_NODES;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SettingSingleton settingSingleton = (SettingSingleton) o;
    return Objects.equals(this.ACTIVITY_STREAM_ENABLED, settingSingleton.ACTIVITY_STREAM_ENABLED) &&
        Objects.equals(this.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC, settingSingleton.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC) &&
        Objects.equals(this.ORG_ADMINS_CAN_SEE_ALL_USERS, settingSingleton.ORG_ADMINS_CAN_SEE_ALL_USERS) &&
        Objects.equals(this.MANAGE_ORGANIZATION_AUTH, settingSingleton.MANAGE_ORGANIZATION_AUTH) &&
        Objects.equals(this.TOWER_URL_BASE, settingSingleton.TOWER_URL_BASE) &&
        Objects.equals(this.REMOTE_HOST_HEADERS, settingSingleton.REMOTE_HOST_HEADERS) &&
        Objects.equals(this.PROXY_IP_ALLOWED_LIST, settingSingleton.PROXY_IP_ALLOWED_LIST) &&
        Objects.equals(this.LICENSE, settingSingleton.LICENSE) &&
        Objects.equals(this.REDHAT_USERNAME, settingSingleton.REDHAT_USERNAME) &&
        Objects.equals(this.REDHAT_PASSWORD, settingSingleton.REDHAT_PASSWORD) &&
        Objects.equals(this.SUBSCRIPTIONS_USERNAME, settingSingleton.SUBSCRIPTIONS_USERNAME) &&
        Objects.equals(this.SUBSCRIPTIONS_PASSWORD, settingSingleton.SUBSCRIPTIONS_PASSWORD) &&
        Objects.equals(this.AUTOMATION_ANALYTICS_URL, settingSingleton.AUTOMATION_ANALYTICS_URL) &&
        Objects.equals(this.INSTALL_UUID, settingSingleton.INSTALL_UUID) &&
        Objects.equals(this.DEFAULT_CONTROL_PLANE_QUEUE_NAME, settingSingleton.DEFAULT_CONTROL_PLANE_QUEUE_NAME) &&
        Objects.equals(this.DEFAULT_EXECUTION_QUEUE_NAME, settingSingleton.DEFAULT_EXECUTION_QUEUE_NAME) &&
        Objects.equals(this.DEFAULT_EXECUTION_ENVIRONMENT, settingSingleton.DEFAULT_EXECUTION_ENVIRONMENT) &&
        Objects.equals(this.CUSTOM_VENV_PATHS, settingSingleton.CUSTOM_VENV_PATHS) &&
        Objects.equals(this.AD_HOC_COMMANDS, settingSingleton.AD_HOC_COMMANDS) &&
        Objects.equals(this.ALLOW_JINJA_IN_EXTRA_VARS, settingSingleton.ALLOW_JINJA_IN_EXTRA_VARS) &&
        Objects.equals(this.AWX_ISOLATION_BASE_PATH, settingSingleton.AWX_ISOLATION_BASE_PATH) &&
        Objects.equals(this.AWX_ISOLATION_SHOW_PATHS, settingSingleton.AWX_ISOLATION_SHOW_PATHS) &&
        Objects.equals(this.AWX_TASK_ENV, settingSingleton.AWX_TASK_ENV) &&
        Objects.equals(this.INSIGHTS_TRACKING_STATE, settingSingleton.INSIGHTS_TRACKING_STATE) &&
        Objects.equals(this.PROJECT_UPDATE_VVV, settingSingleton.PROJECT_UPDATE_VVV) &&
        Objects.equals(this.AWX_ROLES_ENABLED, settingSingleton.AWX_ROLES_ENABLED) &&
        Objects.equals(this.AWX_COLLECTIONS_ENABLED, settingSingleton.AWX_COLLECTIONS_ENABLED) &&
        Objects.equals(this.AWX_SHOW_PLAYBOOK_LINKS, settingSingleton.AWX_SHOW_PLAYBOOK_LINKS) &&
        Objects.equals(this.awXMOUNTISOLATEDPATHSONK8S, settingSingleton.awXMOUNTISOLATEDPATHSONK8S) &&
        Objects.equals(this.GALAXY_IGNORE_CERTS, settingSingleton.GALAXY_IGNORE_CERTS) &&
        Objects.equals(this.STDOUT_MAX_BYTES_DISPLAY, settingSingleton.STDOUT_MAX_BYTES_DISPLAY) &&
        Objects.equals(this.EVENT_STDOUT_MAX_BYTES_DISPLAY, settingSingleton.EVENT_STDOUT_MAX_BYTES_DISPLAY) &&
        Objects.equals(this.MAX_WEBSOCKET_EVENT_RATE, settingSingleton.MAX_WEBSOCKET_EVENT_RATE) &&
        Objects.equals(this.SCHEDULE_MAX_JOBS, settingSingleton.SCHEDULE_MAX_JOBS) &&
        Objects.equals(this.AWX_ANSIBLE_CALLBACK_PLUGINS, settingSingleton.AWX_ANSIBLE_CALLBACK_PLUGINS) &&
        Objects.equals(this.DEFAULT_JOB_TIMEOUT, settingSingleton.DEFAULT_JOB_TIMEOUT) &&
        Objects.equals(this.DEFAULT_JOB_IDLE_TIMEOUT, settingSingleton.DEFAULT_JOB_IDLE_TIMEOUT) &&
        Objects.equals(this.DEFAULT_INVENTORY_UPDATE_TIMEOUT, settingSingleton.DEFAULT_INVENTORY_UPDATE_TIMEOUT) &&
        Objects.equals(this.DEFAULT_PROJECT_UPDATE_TIMEOUT, settingSingleton.DEFAULT_PROJECT_UPDATE_TIMEOUT) &&
        Objects.equals(this.ANSIBLE_FACT_CACHE_TIMEOUT, settingSingleton.ANSIBLE_FACT_CACHE_TIMEOUT) &&
        Objects.equals(this.MAX_FORKS, settingSingleton.MAX_FORKS) &&
        Objects.equals(this.LOG_AGGREGATOR_HOST, settingSingleton.LOG_AGGREGATOR_HOST) &&
        Objects.equals(this.LOG_AGGREGATOR_PORT, settingSingleton.LOG_AGGREGATOR_PORT) &&
        Objects.equals(this.LOG_AGGREGATOR_TYPE, settingSingleton.LOG_AGGREGATOR_TYPE) &&
        Objects.equals(this.LOG_AGGREGATOR_USERNAME, settingSingleton.LOG_AGGREGATOR_USERNAME) &&
        Objects.equals(this.LOG_AGGREGATOR_PASSWORD, settingSingleton.LOG_AGGREGATOR_PASSWORD) &&
        Objects.equals(this.LOG_AGGREGATOR_LOGGERS, settingSingleton.LOG_AGGREGATOR_LOGGERS) &&
        Objects.equals(this.LOG_AGGREGATOR_INDIVIDUAL_FACTS, settingSingleton.LOG_AGGREGATOR_INDIVIDUAL_FACTS) &&
        Objects.equals(this.LOG_AGGREGATOR_ENABLED, settingSingleton.LOG_AGGREGATOR_ENABLED) &&
        Objects.equals(this.LOG_AGGREGATOR_TOWER_UUID, settingSingleton.LOG_AGGREGATOR_TOWER_UUID) &&
        Objects.equals(this.LOG_AGGREGATOR_PROTOCOL, settingSingleton.LOG_AGGREGATOR_PROTOCOL) &&
        Objects.equals(this.LOG_AGGREGATOR_TCP_TIMEOUT, settingSingleton.LOG_AGGREGATOR_TCP_TIMEOUT) &&
        Objects.equals(this.LOG_AGGREGATOR_VERIFY_CERT, settingSingleton.LOG_AGGREGATOR_VERIFY_CERT) &&
        Objects.equals(this.LOG_AGGREGATOR_LEVEL, settingSingleton.LOG_AGGREGATOR_LEVEL) &&
        Objects.equals(this.LOG_AGGREGATOR_MAX_DISK_USAGE_GB, settingSingleton.LOG_AGGREGATOR_MAX_DISK_USAGE_GB) &&
        Objects.equals(this.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH, settingSingleton.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH) &&
        Objects.equals(this.LOG_AGGREGATOR_RSYSLOGD_DEBUG, settingSingleton.LOG_AGGREGATOR_RSYSLOGD_DEBUG) &&
        Objects.equals(this.apI400ERRORLOGFORMAT, settingSingleton.apI400ERRORLOGFORMAT) &&
        Objects.equals(this.AUTOMATION_ANALYTICS_LAST_GATHER, settingSingleton.AUTOMATION_ANALYTICS_LAST_GATHER) &&
        Objects.equals(this.AUTOMATION_ANALYTICS_LAST_ENTRIES, settingSingleton.AUTOMATION_ANALYTICS_LAST_ENTRIES) &&
        Objects.equals(this.AUTOMATION_ANALYTICS_GATHER_INTERVAL, settingSingleton.AUTOMATION_ANALYTICS_GATHER_INTERVAL) &&
        Objects.equals(this.isK8S, settingSingleton.isK8S) &&
        Objects.equals(this.SESSION_COOKIE_AGE, settingSingleton.SESSION_COOKIE_AGE) &&
        Objects.equals(this.SESSIONS_PER_USER, settingSingleton.SESSIONS_PER_USER) &&
        Objects.equals(this.DISABLE_LOCAL_AUTH, settingSingleton.DISABLE_LOCAL_AUTH) &&
        Objects.equals(this.AUTH_BASIC_ENABLED, settingSingleton.AUTH_BASIC_ENABLED) &&
        Objects.equals(this.oaUTH2PROVIDER, settingSingleton.oaUTH2PROVIDER) &&
        Objects.equals(this.alLOWOAUTH2FOREXTERNALUSERS, settingSingleton.alLOWOAUTH2FOREXTERNALUSERS) &&
        Objects.equals(this.LOGIN_REDIRECT_OVERRIDE, settingSingleton.LOGIN_REDIRECT_OVERRIDE) &&
        Objects.equals(this.PENDO_TRACKING_STATE, settingSingleton.PENDO_TRACKING_STATE) &&
        Objects.equals(this.CUSTOM_LOGIN_INFO, settingSingleton.CUSTOM_LOGIN_INFO) &&
        Objects.equals(this.CUSTOM_LOGO, settingSingleton.CUSTOM_LOGO) &&
        Objects.equals(this.MAX_UI_JOB_EVENTS, settingSingleton.MAX_UI_JOB_EVENTS) &&
        Objects.equals(this.UI_LIVE_UPDATES_ENABLED, settingSingleton.UI_LIVE_UPDATES_ENABLED) &&
        Objects.equals(this.AUTHENTICATION_BACKENDS, settingSingleton.AUTHENTICATION_BACKENDS) &&
        Objects.equals(this.SOCIAL_AUTH_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_TEAM_MAP, settingSingleton.SOCIAL_AUTH_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_USER_FIELDS, settingSingleton.SOCIAL_AUTH_USER_FIELDS) &&
        Objects.equals(this.AUTH_LDAP_SERVER_URI, settingSingleton.AUTH_LDAP_SERVER_URI) &&
        Objects.equals(this.AUTH_LDAP_BIND_DN, settingSingleton.AUTH_LDAP_BIND_DN) &&
        Objects.equals(this.AUTH_LDAP_BIND_PASSWORD, settingSingleton.AUTH_LDAP_BIND_PASSWORD) &&
        Objects.equals(this.AUTH_LDAP_START_TLS, settingSingleton.AUTH_LDAP_START_TLS) &&
        Objects.equals(this.AUTH_LDAP_CONNECTION_OPTIONS, settingSingleton.AUTH_LDAP_CONNECTION_OPTIONS) &&
        Objects.equals(this.AUTH_LDAP_USER_SEARCH, settingSingleton.AUTH_LDAP_USER_SEARCH) &&
        Objects.equals(this.AUTH_LDAP_USER_DN_TEMPLATE, settingSingleton.AUTH_LDAP_USER_DN_TEMPLATE) &&
        Objects.equals(this.AUTH_LDAP_USER_ATTR_MAP, settingSingleton.AUTH_LDAP_USER_ATTR_MAP) &&
        Objects.equals(this.AUTH_LDAP_GROUP_SEARCH, settingSingleton.AUTH_LDAP_GROUP_SEARCH) &&
        Objects.equals(this.AUTH_LDAP_GROUP_TYPE, settingSingleton.AUTH_LDAP_GROUP_TYPE) &&
        Objects.equals(this.AUTH_LDAP_GROUP_TYPE_PARAMS, settingSingleton.AUTH_LDAP_GROUP_TYPE_PARAMS) &&
        Objects.equals(this.AUTH_LDAP_REQUIRE_GROUP, settingSingleton.AUTH_LDAP_REQUIRE_GROUP) &&
        Objects.equals(this.AUTH_LDAP_DENY_GROUP, settingSingleton.AUTH_LDAP_DENY_GROUP) &&
        Objects.equals(this.AUTH_LDAP_USER_FLAGS_BY_GROUP, settingSingleton.AUTH_LDAP_USER_FLAGS_BY_GROUP) &&
        Objects.equals(this.AUTH_LDAP_ORGANIZATION_MAP, settingSingleton.AUTH_LDAP_ORGANIZATION_MAP) &&
        Objects.equals(this.AUTH_LDAP_TEAM_MAP, settingSingleton.AUTH_LDAP_TEAM_MAP) &&
        Objects.equals(this.auTHLDAP1SERVERURI, settingSingleton.auTHLDAP1SERVERURI) &&
        Objects.equals(this.auTHLDAP1BINDDN, settingSingleton.auTHLDAP1BINDDN) &&
        Objects.equals(this.auTHLDAP1BINDPASSWORD, settingSingleton.auTHLDAP1BINDPASSWORD) &&
        Objects.equals(this.auTHLDAP1STARTTLS, settingSingleton.auTHLDAP1STARTTLS) &&
        Objects.equals(this.auTHLDAP1CONNECTIONOPTIONS, settingSingleton.auTHLDAP1CONNECTIONOPTIONS) &&
        Objects.equals(this.auTHLDAP1USERSEARCH, settingSingleton.auTHLDAP1USERSEARCH) &&
        Objects.equals(this.auTHLDAP1USERDNTEMPLATE, settingSingleton.auTHLDAP1USERDNTEMPLATE) &&
        Objects.equals(this.auTHLDAP1USERATTRMAP, settingSingleton.auTHLDAP1USERATTRMAP) &&
        Objects.equals(this.auTHLDAP1GROUPSEARCH, settingSingleton.auTHLDAP1GROUPSEARCH) &&
        Objects.equals(this.auTHLDAP1GROUPTYPE, settingSingleton.auTHLDAP1GROUPTYPE) &&
        Objects.equals(this.auTHLDAP1GROUPTYPEPARAMS, settingSingleton.auTHLDAP1GROUPTYPEPARAMS) &&
        Objects.equals(this.auTHLDAP1REQUIREGROUP, settingSingleton.auTHLDAP1REQUIREGROUP) &&
        Objects.equals(this.auTHLDAP1DENYGROUP, settingSingleton.auTHLDAP1DENYGROUP) &&
        Objects.equals(this.auTHLDAP1USERFLAGSBYGROUP, settingSingleton.auTHLDAP1USERFLAGSBYGROUP) &&
        Objects.equals(this.auTHLDAP1ORGANIZATIONMAP, settingSingleton.auTHLDAP1ORGANIZATIONMAP) &&
        Objects.equals(this.auTHLDAP1TEAMMAP, settingSingleton.auTHLDAP1TEAMMAP) &&
        Objects.equals(this.auTHLDAP2SERVERURI, settingSingleton.auTHLDAP2SERVERURI) &&
        Objects.equals(this.auTHLDAP2BINDDN, settingSingleton.auTHLDAP2BINDDN) &&
        Objects.equals(this.auTHLDAP2BINDPASSWORD, settingSingleton.auTHLDAP2BINDPASSWORD) &&
        Objects.equals(this.auTHLDAP2STARTTLS, settingSingleton.auTHLDAP2STARTTLS) &&
        Objects.equals(this.auTHLDAP2CONNECTIONOPTIONS, settingSingleton.auTHLDAP2CONNECTIONOPTIONS) &&
        Objects.equals(this.auTHLDAP2USERSEARCH, settingSingleton.auTHLDAP2USERSEARCH) &&
        Objects.equals(this.auTHLDAP2USERDNTEMPLATE, settingSingleton.auTHLDAP2USERDNTEMPLATE) &&
        Objects.equals(this.auTHLDAP2USERATTRMAP, settingSingleton.auTHLDAP2USERATTRMAP) &&
        Objects.equals(this.auTHLDAP2GROUPSEARCH, settingSingleton.auTHLDAP2GROUPSEARCH) &&
        Objects.equals(this.auTHLDAP2GROUPTYPE, settingSingleton.auTHLDAP2GROUPTYPE) &&
        Objects.equals(this.auTHLDAP2GROUPTYPEPARAMS, settingSingleton.auTHLDAP2GROUPTYPEPARAMS) &&
        Objects.equals(this.auTHLDAP2REQUIREGROUP, settingSingleton.auTHLDAP2REQUIREGROUP) &&
        Objects.equals(this.auTHLDAP2DENYGROUP, settingSingleton.auTHLDAP2DENYGROUP) &&
        Objects.equals(this.auTHLDAP2USERFLAGSBYGROUP, settingSingleton.auTHLDAP2USERFLAGSBYGROUP) &&
        Objects.equals(this.auTHLDAP2ORGANIZATIONMAP, settingSingleton.auTHLDAP2ORGANIZATIONMAP) &&
        Objects.equals(this.auTHLDAP2TEAMMAP, settingSingleton.auTHLDAP2TEAMMAP) &&
        Objects.equals(this.auTHLDAP3SERVERURI, settingSingleton.auTHLDAP3SERVERURI) &&
        Objects.equals(this.auTHLDAP3BINDDN, settingSingleton.auTHLDAP3BINDDN) &&
        Objects.equals(this.auTHLDAP3BINDPASSWORD, settingSingleton.auTHLDAP3BINDPASSWORD) &&
        Objects.equals(this.auTHLDAP3STARTTLS, settingSingleton.auTHLDAP3STARTTLS) &&
        Objects.equals(this.auTHLDAP3CONNECTIONOPTIONS, settingSingleton.auTHLDAP3CONNECTIONOPTIONS) &&
        Objects.equals(this.auTHLDAP3USERSEARCH, settingSingleton.auTHLDAP3USERSEARCH) &&
        Objects.equals(this.auTHLDAP3USERDNTEMPLATE, settingSingleton.auTHLDAP3USERDNTEMPLATE) &&
        Objects.equals(this.auTHLDAP3USERATTRMAP, settingSingleton.auTHLDAP3USERATTRMAP) &&
        Objects.equals(this.auTHLDAP3GROUPSEARCH, settingSingleton.auTHLDAP3GROUPSEARCH) &&
        Objects.equals(this.auTHLDAP3GROUPTYPE, settingSingleton.auTHLDAP3GROUPTYPE) &&
        Objects.equals(this.auTHLDAP3GROUPTYPEPARAMS, settingSingleton.auTHLDAP3GROUPTYPEPARAMS) &&
        Objects.equals(this.auTHLDAP3REQUIREGROUP, settingSingleton.auTHLDAP3REQUIREGROUP) &&
        Objects.equals(this.auTHLDAP3DENYGROUP, settingSingleton.auTHLDAP3DENYGROUP) &&
        Objects.equals(this.auTHLDAP3USERFLAGSBYGROUP, settingSingleton.auTHLDAP3USERFLAGSBYGROUP) &&
        Objects.equals(this.auTHLDAP3ORGANIZATIONMAP, settingSingleton.auTHLDAP3ORGANIZATIONMAP) &&
        Objects.equals(this.auTHLDAP3TEAMMAP, settingSingleton.auTHLDAP3TEAMMAP) &&
        Objects.equals(this.auTHLDAP4SERVERURI, settingSingleton.auTHLDAP4SERVERURI) &&
        Objects.equals(this.auTHLDAP4BINDDN, settingSingleton.auTHLDAP4BINDDN) &&
        Objects.equals(this.auTHLDAP4BINDPASSWORD, settingSingleton.auTHLDAP4BINDPASSWORD) &&
        Objects.equals(this.auTHLDAP4STARTTLS, settingSingleton.auTHLDAP4STARTTLS) &&
        Objects.equals(this.auTHLDAP4CONNECTIONOPTIONS, settingSingleton.auTHLDAP4CONNECTIONOPTIONS) &&
        Objects.equals(this.auTHLDAP4USERSEARCH, settingSingleton.auTHLDAP4USERSEARCH) &&
        Objects.equals(this.auTHLDAP4USERDNTEMPLATE, settingSingleton.auTHLDAP4USERDNTEMPLATE) &&
        Objects.equals(this.auTHLDAP4USERATTRMAP, settingSingleton.auTHLDAP4USERATTRMAP) &&
        Objects.equals(this.auTHLDAP4GROUPSEARCH, settingSingleton.auTHLDAP4GROUPSEARCH) &&
        Objects.equals(this.auTHLDAP4GROUPTYPE, settingSingleton.auTHLDAP4GROUPTYPE) &&
        Objects.equals(this.auTHLDAP4GROUPTYPEPARAMS, settingSingleton.auTHLDAP4GROUPTYPEPARAMS) &&
        Objects.equals(this.auTHLDAP4REQUIREGROUP, settingSingleton.auTHLDAP4REQUIREGROUP) &&
        Objects.equals(this.auTHLDAP4DENYGROUP, settingSingleton.auTHLDAP4DENYGROUP) &&
        Objects.equals(this.auTHLDAP4USERFLAGSBYGROUP, settingSingleton.auTHLDAP4USERFLAGSBYGROUP) &&
        Objects.equals(this.auTHLDAP4ORGANIZATIONMAP, settingSingleton.auTHLDAP4ORGANIZATIONMAP) &&
        Objects.equals(this.auTHLDAP4TEAMMAP, settingSingleton.auTHLDAP4TEAMMAP) &&
        Objects.equals(this.auTHLDAP5SERVERURI, settingSingleton.auTHLDAP5SERVERURI) &&
        Objects.equals(this.auTHLDAP5BINDDN, settingSingleton.auTHLDAP5BINDDN) &&
        Objects.equals(this.auTHLDAP5BINDPASSWORD, settingSingleton.auTHLDAP5BINDPASSWORD) &&
        Objects.equals(this.auTHLDAP5STARTTLS, settingSingleton.auTHLDAP5STARTTLS) &&
        Objects.equals(this.auTHLDAP5CONNECTIONOPTIONS, settingSingleton.auTHLDAP5CONNECTIONOPTIONS) &&
        Objects.equals(this.auTHLDAP5USERSEARCH, settingSingleton.auTHLDAP5USERSEARCH) &&
        Objects.equals(this.auTHLDAP5USERDNTEMPLATE, settingSingleton.auTHLDAP5USERDNTEMPLATE) &&
        Objects.equals(this.auTHLDAP5USERATTRMAP, settingSingleton.auTHLDAP5USERATTRMAP) &&
        Objects.equals(this.auTHLDAP5GROUPSEARCH, settingSingleton.auTHLDAP5GROUPSEARCH) &&
        Objects.equals(this.auTHLDAP5GROUPTYPE, settingSingleton.auTHLDAP5GROUPTYPE) &&
        Objects.equals(this.auTHLDAP5GROUPTYPEPARAMS, settingSingleton.auTHLDAP5GROUPTYPEPARAMS) &&
        Objects.equals(this.auTHLDAP5REQUIREGROUP, settingSingleton.auTHLDAP5REQUIREGROUP) &&
        Objects.equals(this.auTHLDAP5DENYGROUP, settingSingleton.auTHLDAP5DENYGROUP) &&
        Objects.equals(this.auTHLDAP5USERFLAGSBYGROUP, settingSingleton.auTHLDAP5USERFLAGSBYGROUP) &&
        Objects.equals(this.auTHLDAP5ORGANIZATIONMAP, settingSingleton.auTHLDAP5ORGANIZATIONMAP) &&
        Objects.equals(this.auTHLDAP5TEAMMAP, settingSingleton.auTHLDAP5TEAMMAP) &&
        Objects.equals(this.RADIUS_SERVER, settingSingleton.RADIUS_SERVER) &&
        Objects.equals(this.RADIUS_PORT, settingSingleton.RADIUS_PORT) &&
        Objects.equals(this.RADIUS_SECRET, settingSingleton.RADIUS_SECRET) &&
        Objects.equals(this.TACACSPLUS_HOST, settingSingleton.TACACSPLUS_HOST) &&
        Objects.equals(this.TACACSPLUS_PORT, settingSingleton.TACACSPLUS_PORT) &&
        Objects.equals(this.TACACSPLUS_SECRET, settingSingleton.TACACSPLUS_SECRET) &&
        Objects.equals(this.TACACSPLUS_SESSION_TIMEOUT, settingSingleton.TACACSPLUS_SESSION_TIMEOUT) &&
        Objects.equals(this.TACACSPLUS_AUTH_PROTOCOL, settingSingleton.TACACSPLUS_AUTH_PROTOCOL) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2CALLBACKURL, settingSingleton.soCIALAUTHGOOGLEOAUTH2CALLBACKURL) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2KEY, settingSingleton.soCIALAUTHGOOGLEOAUTH2KEY) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2SECRET, settingSingleton.soCIALAUTHGOOGLEOAUTH2SECRET) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS, settingSingleton.soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS, settingSingleton.soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP, settingSingleton.soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP) &&
        Objects.equals(this.soCIALAUTHGOOGLEOAUTH2TEAMMAP, settingSingleton.soCIALAUTHGOOGLEOAUTH2TEAMMAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_NAME, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_NAME) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_ID, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_ID) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP, settingSingleton.SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP) &&
        Objects.equals(this.soCIALAUTHAZUREADOAUTH2CALLBACKURL, settingSingleton.soCIALAUTHAZUREADOAUTH2CALLBACKURL) &&
        Objects.equals(this.soCIALAUTHAZUREADOAUTH2KEY, settingSingleton.soCIALAUTHAZUREADOAUTH2KEY) &&
        Objects.equals(this.soCIALAUTHAZUREADOAUTH2SECRET, settingSingleton.soCIALAUTHAZUREADOAUTH2SECRET) &&
        Objects.equals(this.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP, settingSingleton.soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP) &&
        Objects.equals(this.soCIALAUTHAZUREADOAUTH2TEAMMAP, settingSingleton.soCIALAUTHAZUREADOAUTH2TEAMMAP) &&
        Objects.equals(this.SAML_AUTO_CREATE_OBJECTS, settingSingleton.SAML_AUTO_CREATE_OBJECTS) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_CALLBACK_URL, settingSingleton.SOCIAL_AUTH_SAML_CALLBACK_URL) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_METADATA_URL, settingSingleton.SOCIAL_AUTH_SAML_METADATA_URL) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SP_ENTITY_ID, settingSingleton.SOCIAL_AUTH_SAML_SP_ENTITY_ID) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT, settingSingleton.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY, settingSingleton.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_ORG_INFO, settingSingleton.SOCIAL_AUTH_SAML_ORG_INFO) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT, settingSingleton.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SUPPORT_CONTACT, settingSingleton.SOCIAL_AUTH_SAML_SUPPORT_CONTACT) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_ENABLED_IDPS, settingSingleton.SOCIAL_AUTH_SAML_ENABLED_IDPS) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SECURITY_CONFIG, settingSingleton.SOCIAL_AUTH_SAML_SECURITY_CONFIG) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_SP_EXTRA, settingSingleton.SOCIAL_AUTH_SAML_SP_EXTRA) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_EXTRA_DATA, settingSingleton.SOCIAL_AUTH_SAML_EXTRA_DATA) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_ORGANIZATION_MAP, settingSingleton.SOCIAL_AUTH_SAML_ORGANIZATION_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_TEAM_MAP, settingSingleton.SOCIAL_AUTH_SAML_TEAM_MAP) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR, settingSingleton.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_TEAM_ATTR, settingSingleton.SOCIAL_AUTH_SAML_TEAM_ATTR) &&
        Objects.equals(this.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR, settingSingleton.SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR) &&
        Objects.equals(this.NAMED_URL_FORMATS, settingSingleton.NAMED_URL_FORMATS) &&
        Objects.equals(this.NAMED_URL_GRAPH_NODES, settingSingleton.NAMED_URL_GRAPH_NODES);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ACTIVITY_STREAM_ENABLED, ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC, ORG_ADMINS_CAN_SEE_ALL_USERS, MANAGE_ORGANIZATION_AUTH, TOWER_URL_BASE, REMOTE_HOST_HEADERS, PROXY_IP_ALLOWED_LIST, LICENSE, REDHAT_USERNAME, REDHAT_PASSWORD, SUBSCRIPTIONS_USERNAME, SUBSCRIPTIONS_PASSWORD, AUTOMATION_ANALYTICS_URL, INSTALL_UUID, DEFAULT_CONTROL_PLANE_QUEUE_NAME, DEFAULT_EXECUTION_QUEUE_NAME, DEFAULT_EXECUTION_ENVIRONMENT, CUSTOM_VENV_PATHS, AD_HOC_COMMANDS, ALLOW_JINJA_IN_EXTRA_VARS, AWX_ISOLATION_BASE_PATH, AWX_ISOLATION_SHOW_PATHS, AWX_TASK_ENV, INSIGHTS_TRACKING_STATE, PROJECT_UPDATE_VVV, AWX_ROLES_ENABLED, AWX_COLLECTIONS_ENABLED, AWX_SHOW_PLAYBOOK_LINKS, awXMOUNTISOLATEDPATHSONK8S, GALAXY_IGNORE_CERTS, STDOUT_MAX_BYTES_DISPLAY, EVENT_STDOUT_MAX_BYTES_DISPLAY, MAX_WEBSOCKET_EVENT_RATE, SCHEDULE_MAX_JOBS, AWX_ANSIBLE_CALLBACK_PLUGINS, DEFAULT_JOB_TIMEOUT, DEFAULT_JOB_IDLE_TIMEOUT, DEFAULT_INVENTORY_UPDATE_TIMEOUT, DEFAULT_PROJECT_UPDATE_TIMEOUT, ANSIBLE_FACT_CACHE_TIMEOUT, MAX_FORKS, LOG_AGGREGATOR_HOST, LOG_AGGREGATOR_PORT, LOG_AGGREGATOR_TYPE, LOG_AGGREGATOR_USERNAME, LOG_AGGREGATOR_PASSWORD, LOG_AGGREGATOR_LOGGERS, LOG_AGGREGATOR_INDIVIDUAL_FACTS, LOG_AGGREGATOR_ENABLED, LOG_AGGREGATOR_TOWER_UUID, LOG_AGGREGATOR_PROTOCOL, LOG_AGGREGATOR_TCP_TIMEOUT, LOG_AGGREGATOR_VERIFY_CERT, LOG_AGGREGATOR_LEVEL, LOG_AGGREGATOR_MAX_DISK_USAGE_GB, LOG_AGGREGATOR_MAX_DISK_USAGE_PATH, LOG_AGGREGATOR_RSYSLOGD_DEBUG, apI400ERRORLOGFORMAT, AUTOMATION_ANALYTICS_LAST_GATHER, AUTOMATION_ANALYTICS_LAST_ENTRIES, AUTOMATION_ANALYTICS_GATHER_INTERVAL, isK8S, SESSION_COOKIE_AGE, SESSIONS_PER_USER, DISABLE_LOCAL_AUTH, AUTH_BASIC_ENABLED, oaUTH2PROVIDER, alLOWOAUTH2FOREXTERNALUSERS, LOGIN_REDIRECT_OVERRIDE, PENDO_TRACKING_STATE, CUSTOM_LOGIN_INFO, CUSTOM_LOGO, MAX_UI_JOB_EVENTS, UI_LIVE_UPDATES_ENABLED, AUTHENTICATION_BACKENDS, SOCIAL_AUTH_ORGANIZATION_MAP, SOCIAL_AUTH_TEAM_MAP, SOCIAL_AUTH_USER_FIELDS, AUTH_LDAP_SERVER_URI, AUTH_LDAP_BIND_DN, AUTH_LDAP_BIND_PASSWORD, AUTH_LDAP_START_TLS, AUTH_LDAP_CONNECTION_OPTIONS, AUTH_LDAP_USER_SEARCH, AUTH_LDAP_USER_DN_TEMPLATE, AUTH_LDAP_USER_ATTR_MAP, AUTH_LDAP_GROUP_SEARCH, AUTH_LDAP_GROUP_TYPE, AUTH_LDAP_GROUP_TYPE_PARAMS, AUTH_LDAP_REQUIRE_GROUP, AUTH_LDAP_DENY_GROUP, AUTH_LDAP_USER_FLAGS_BY_GROUP, AUTH_LDAP_ORGANIZATION_MAP, AUTH_LDAP_TEAM_MAP, auTHLDAP1SERVERURI, auTHLDAP1BINDDN, auTHLDAP1BINDPASSWORD, auTHLDAP1STARTTLS, auTHLDAP1CONNECTIONOPTIONS, auTHLDAP1USERSEARCH, auTHLDAP1USERDNTEMPLATE, auTHLDAP1USERATTRMAP, auTHLDAP1GROUPSEARCH, auTHLDAP1GROUPTYPE, auTHLDAP1GROUPTYPEPARAMS, auTHLDAP1REQUIREGROUP, auTHLDAP1DENYGROUP, auTHLDAP1USERFLAGSBYGROUP, auTHLDAP1ORGANIZATIONMAP, auTHLDAP1TEAMMAP, auTHLDAP2SERVERURI, auTHLDAP2BINDDN, auTHLDAP2BINDPASSWORD, auTHLDAP2STARTTLS, auTHLDAP2CONNECTIONOPTIONS, auTHLDAP2USERSEARCH, auTHLDAP2USERDNTEMPLATE, auTHLDAP2USERATTRMAP, auTHLDAP2GROUPSEARCH, auTHLDAP2GROUPTYPE, auTHLDAP2GROUPTYPEPARAMS, auTHLDAP2REQUIREGROUP, auTHLDAP2DENYGROUP, auTHLDAP2USERFLAGSBYGROUP, auTHLDAP2ORGANIZATIONMAP, auTHLDAP2TEAMMAP, auTHLDAP3SERVERURI, auTHLDAP3BINDDN, auTHLDAP3BINDPASSWORD, auTHLDAP3STARTTLS, auTHLDAP3CONNECTIONOPTIONS, auTHLDAP3USERSEARCH, auTHLDAP3USERDNTEMPLATE, auTHLDAP3USERATTRMAP, auTHLDAP3GROUPSEARCH, auTHLDAP3GROUPTYPE, auTHLDAP3GROUPTYPEPARAMS, auTHLDAP3REQUIREGROUP, auTHLDAP3DENYGROUP, auTHLDAP3USERFLAGSBYGROUP, auTHLDAP3ORGANIZATIONMAP, auTHLDAP3TEAMMAP, auTHLDAP4SERVERURI, auTHLDAP4BINDDN, auTHLDAP4BINDPASSWORD, auTHLDAP4STARTTLS, auTHLDAP4CONNECTIONOPTIONS, auTHLDAP4USERSEARCH, auTHLDAP4USERDNTEMPLATE, auTHLDAP4USERATTRMAP, auTHLDAP4GROUPSEARCH, auTHLDAP4GROUPTYPE, auTHLDAP4GROUPTYPEPARAMS, auTHLDAP4REQUIREGROUP, auTHLDAP4DENYGROUP, auTHLDAP4USERFLAGSBYGROUP, auTHLDAP4ORGANIZATIONMAP, auTHLDAP4TEAMMAP, auTHLDAP5SERVERURI, auTHLDAP5BINDDN, auTHLDAP5BINDPASSWORD, auTHLDAP5STARTTLS, auTHLDAP5CONNECTIONOPTIONS, auTHLDAP5USERSEARCH, auTHLDAP5USERDNTEMPLATE, auTHLDAP5USERATTRMAP, auTHLDAP5GROUPSEARCH, auTHLDAP5GROUPTYPE, auTHLDAP5GROUPTYPEPARAMS, auTHLDAP5REQUIREGROUP, auTHLDAP5DENYGROUP, auTHLDAP5USERFLAGSBYGROUP, auTHLDAP5ORGANIZATIONMAP, auTHLDAP5TEAMMAP, RADIUS_SERVER, RADIUS_PORT, RADIUS_SECRET, TACACSPLUS_HOST, TACACSPLUS_PORT, TACACSPLUS_SECRET, TACACSPLUS_SESSION_TIMEOUT, TACACSPLUS_AUTH_PROTOCOL, soCIALAUTHGOOGLEOAUTH2CALLBACKURL, soCIALAUTHGOOGLEOAUTH2KEY, soCIALAUTHGOOGLEOAUTH2SECRET, soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS, soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS, soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP, soCIALAUTHGOOGLEOAUTH2TEAMMAP, SOCIAL_AUTH_GITHUB_CALLBACK_URL, SOCIAL_AUTH_GITHUB_KEY, SOCIAL_AUTH_GITHUB_SECRET, SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_TEAM_MAP, SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL, SOCIAL_AUTH_GITHUB_ORG_KEY, SOCIAL_AUTH_GITHUB_ORG_SECRET, SOCIAL_AUTH_GITHUB_ORG_NAME, SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP, SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL, SOCIAL_AUTH_GITHUB_TEAM_KEY, SOCIAL_AUTH_GITHUB_TEAM_SECRET, SOCIAL_AUTH_GITHUB_TEAM_ID, SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY, SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP, SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP, soCIALAUTHAZUREADOAUTH2CALLBACKURL, soCIALAUTHAZUREADOAUTH2KEY, soCIALAUTHAZUREADOAUTH2SECRET, soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP, soCIALAUTHAZUREADOAUTH2TEAMMAP, SAML_AUTO_CREATE_OBJECTS, SOCIAL_AUTH_SAML_CALLBACK_URL, SOCIAL_AUTH_SAML_METADATA_URL, SOCIAL_AUTH_SAML_SP_ENTITY_ID, SOCIAL_AUTH_SAML_SP_PUBLIC_CERT, SOCIAL_AUTH_SAML_SP_PRIVATE_KEY, SOCIAL_AUTH_SAML_ORG_INFO, SOCIAL_AUTH_SAML_TECHNICAL_CONTACT, SOCIAL_AUTH_SAML_SUPPORT_CONTACT, SOCIAL_AUTH_SAML_ENABLED_IDPS, SOCIAL_AUTH_SAML_SECURITY_CONFIG, SOCIAL_AUTH_SAML_SP_EXTRA, SOCIAL_AUTH_SAML_EXTRA_DATA, SOCIAL_AUTH_SAML_ORGANIZATION_MAP, SOCIAL_AUTH_SAML_TEAM_MAP, SOCIAL_AUTH_SAML_ORGANIZATION_ATTR, SOCIAL_AUTH_SAML_TEAM_ATTR, SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR, NAMED_URL_FORMATS, NAMED_URL_GRAPH_NODES);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SettingSingleton {\n");
    
    sb.append("    ACTIVITY_STREAM_ENABLED: ").append(toIndentedString(ACTIVITY_STREAM_ENABLED)).append("\n");
    sb.append("    ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC: ").append(toIndentedString(ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC)).append("\n");
    sb.append("    ORG_ADMINS_CAN_SEE_ALL_USERS: ").append(toIndentedString(ORG_ADMINS_CAN_SEE_ALL_USERS)).append("\n");
    sb.append("    MANAGE_ORGANIZATION_AUTH: ").append(toIndentedString(MANAGE_ORGANIZATION_AUTH)).append("\n");
    sb.append("    TOWER_URL_BASE: ").append(toIndentedString(TOWER_URL_BASE)).append("\n");
    sb.append("    REMOTE_HOST_HEADERS: ").append(toIndentedString(REMOTE_HOST_HEADERS)).append("\n");
    sb.append("    PROXY_IP_ALLOWED_LIST: ").append(toIndentedString(PROXY_IP_ALLOWED_LIST)).append("\n");
    sb.append("    LICENSE: ").append(toIndentedString(LICENSE)).append("\n");
    sb.append("    REDHAT_USERNAME: ").append(toIndentedString(REDHAT_USERNAME)).append("\n");
    sb.append("    REDHAT_PASSWORD: ").append(toIndentedString(REDHAT_PASSWORD)).append("\n");
    sb.append("    SUBSCRIPTIONS_USERNAME: ").append(toIndentedString(SUBSCRIPTIONS_USERNAME)).append("\n");
    sb.append("    SUBSCRIPTIONS_PASSWORD: ").append(toIndentedString(SUBSCRIPTIONS_PASSWORD)).append("\n");
    sb.append("    AUTOMATION_ANALYTICS_URL: ").append(toIndentedString(AUTOMATION_ANALYTICS_URL)).append("\n");
    sb.append("    INSTALL_UUID: ").append(toIndentedString(INSTALL_UUID)).append("\n");
    sb.append("    DEFAULT_CONTROL_PLANE_QUEUE_NAME: ").append(toIndentedString(DEFAULT_CONTROL_PLANE_QUEUE_NAME)).append("\n");
    sb.append("    DEFAULT_EXECUTION_QUEUE_NAME: ").append(toIndentedString(DEFAULT_EXECUTION_QUEUE_NAME)).append("\n");
    sb.append("    DEFAULT_EXECUTION_ENVIRONMENT: ").append(toIndentedString(DEFAULT_EXECUTION_ENVIRONMENT)).append("\n");
    sb.append("    CUSTOM_VENV_PATHS: ").append(toIndentedString(CUSTOM_VENV_PATHS)).append("\n");
    sb.append("    AD_HOC_COMMANDS: ").append(toIndentedString(AD_HOC_COMMANDS)).append("\n");
    sb.append("    ALLOW_JINJA_IN_EXTRA_VARS: ").append(toIndentedString(ALLOW_JINJA_IN_EXTRA_VARS)).append("\n");
    sb.append("    AWX_ISOLATION_BASE_PATH: ").append(toIndentedString(AWX_ISOLATION_BASE_PATH)).append("\n");
    sb.append("    AWX_ISOLATION_SHOW_PATHS: ").append(toIndentedString(AWX_ISOLATION_SHOW_PATHS)).append("\n");
    sb.append("    AWX_TASK_ENV: ").append(toIndentedString(AWX_TASK_ENV)).append("\n");
    sb.append("    INSIGHTS_TRACKING_STATE: ").append(toIndentedString(INSIGHTS_TRACKING_STATE)).append("\n");
    sb.append("    PROJECT_UPDATE_VVV: ").append(toIndentedString(PROJECT_UPDATE_VVV)).append("\n");
    sb.append("    AWX_ROLES_ENABLED: ").append(toIndentedString(AWX_ROLES_ENABLED)).append("\n");
    sb.append("    AWX_COLLECTIONS_ENABLED: ").append(toIndentedString(AWX_COLLECTIONS_ENABLED)).append("\n");
    sb.append("    AWX_SHOW_PLAYBOOK_LINKS: ").append(toIndentedString(AWX_SHOW_PLAYBOOK_LINKS)).append("\n");
    sb.append("    awXMOUNTISOLATEDPATHSONK8S: ").append(toIndentedString(awXMOUNTISOLATEDPATHSONK8S)).append("\n");
    sb.append("    GALAXY_IGNORE_CERTS: ").append(toIndentedString(GALAXY_IGNORE_CERTS)).append("\n");
    sb.append("    STDOUT_MAX_BYTES_DISPLAY: ").append(toIndentedString(STDOUT_MAX_BYTES_DISPLAY)).append("\n");
    sb.append("    EVENT_STDOUT_MAX_BYTES_DISPLAY: ").append(toIndentedString(EVENT_STDOUT_MAX_BYTES_DISPLAY)).append("\n");
    sb.append("    MAX_WEBSOCKET_EVENT_RATE: ").append(toIndentedString(MAX_WEBSOCKET_EVENT_RATE)).append("\n");
    sb.append("    SCHEDULE_MAX_JOBS: ").append(toIndentedString(SCHEDULE_MAX_JOBS)).append("\n");
    sb.append("    AWX_ANSIBLE_CALLBACK_PLUGINS: ").append(toIndentedString(AWX_ANSIBLE_CALLBACK_PLUGINS)).append("\n");
    sb.append("    DEFAULT_JOB_TIMEOUT: ").append(toIndentedString(DEFAULT_JOB_TIMEOUT)).append("\n");
    sb.append("    DEFAULT_JOB_IDLE_TIMEOUT: ").append(toIndentedString(DEFAULT_JOB_IDLE_TIMEOUT)).append("\n");
    sb.append("    DEFAULT_INVENTORY_UPDATE_TIMEOUT: ").append(toIndentedString(DEFAULT_INVENTORY_UPDATE_TIMEOUT)).append("\n");
    sb.append("    DEFAULT_PROJECT_UPDATE_TIMEOUT: ").append(toIndentedString(DEFAULT_PROJECT_UPDATE_TIMEOUT)).append("\n");
    sb.append("    ANSIBLE_FACT_CACHE_TIMEOUT: ").append(toIndentedString(ANSIBLE_FACT_CACHE_TIMEOUT)).append("\n");
    sb.append("    MAX_FORKS: ").append(toIndentedString(MAX_FORKS)).append("\n");
    sb.append("    LOG_AGGREGATOR_HOST: ").append(toIndentedString(LOG_AGGREGATOR_HOST)).append("\n");
    sb.append("    LOG_AGGREGATOR_PORT: ").append(toIndentedString(LOG_AGGREGATOR_PORT)).append("\n");
    sb.append("    LOG_AGGREGATOR_TYPE: ").append(toIndentedString(LOG_AGGREGATOR_TYPE)).append("\n");
    sb.append("    LOG_AGGREGATOR_USERNAME: ").append(toIndentedString(LOG_AGGREGATOR_USERNAME)).append("\n");
    sb.append("    LOG_AGGREGATOR_PASSWORD: ").append(toIndentedString(LOG_AGGREGATOR_PASSWORD)).append("\n");
    sb.append("    LOG_AGGREGATOR_LOGGERS: ").append(toIndentedString(LOG_AGGREGATOR_LOGGERS)).append("\n");
    sb.append("    LOG_AGGREGATOR_INDIVIDUAL_FACTS: ").append(toIndentedString(LOG_AGGREGATOR_INDIVIDUAL_FACTS)).append("\n");
    sb.append("    LOG_AGGREGATOR_ENABLED: ").append(toIndentedString(LOG_AGGREGATOR_ENABLED)).append("\n");
    sb.append("    LOG_AGGREGATOR_TOWER_UUID: ").append(toIndentedString(LOG_AGGREGATOR_TOWER_UUID)).append("\n");
    sb.append("    LOG_AGGREGATOR_PROTOCOL: ").append(toIndentedString(LOG_AGGREGATOR_PROTOCOL)).append("\n");
    sb.append("    LOG_AGGREGATOR_TCP_TIMEOUT: ").append(toIndentedString(LOG_AGGREGATOR_TCP_TIMEOUT)).append("\n");
    sb.append("    LOG_AGGREGATOR_VERIFY_CERT: ").append(toIndentedString(LOG_AGGREGATOR_VERIFY_CERT)).append("\n");
    sb.append("    LOG_AGGREGATOR_LEVEL: ").append(toIndentedString(LOG_AGGREGATOR_LEVEL)).append("\n");
    sb.append("    LOG_AGGREGATOR_MAX_DISK_USAGE_GB: ").append(toIndentedString(LOG_AGGREGATOR_MAX_DISK_USAGE_GB)).append("\n");
    sb.append("    LOG_AGGREGATOR_MAX_DISK_USAGE_PATH: ").append(toIndentedString(LOG_AGGREGATOR_MAX_DISK_USAGE_PATH)).append("\n");
    sb.append("    LOG_AGGREGATOR_RSYSLOGD_DEBUG: ").append(toIndentedString(LOG_AGGREGATOR_RSYSLOGD_DEBUG)).append("\n");
    sb.append("    apI400ERRORLOGFORMAT: ").append(toIndentedString(apI400ERRORLOGFORMAT)).append("\n");
    sb.append("    AUTOMATION_ANALYTICS_LAST_GATHER: ").append(toIndentedString(AUTOMATION_ANALYTICS_LAST_GATHER)).append("\n");
    sb.append("    AUTOMATION_ANALYTICS_LAST_ENTRIES: ").append(toIndentedString(AUTOMATION_ANALYTICS_LAST_ENTRIES)).append("\n");
    sb.append("    AUTOMATION_ANALYTICS_GATHER_INTERVAL: ").append(toIndentedString(AUTOMATION_ANALYTICS_GATHER_INTERVAL)).append("\n");
    sb.append("    isK8S: ").append(toIndentedString(isK8S)).append("\n");
    sb.append("    SESSION_COOKIE_AGE: ").append(toIndentedString(SESSION_COOKIE_AGE)).append("\n");
    sb.append("    SESSIONS_PER_USER: ").append(toIndentedString(SESSIONS_PER_USER)).append("\n");
    sb.append("    DISABLE_LOCAL_AUTH: ").append(toIndentedString(DISABLE_LOCAL_AUTH)).append("\n");
    sb.append("    AUTH_BASIC_ENABLED: ").append(toIndentedString(AUTH_BASIC_ENABLED)).append("\n");
    sb.append("    oaUTH2PROVIDER: ").append(toIndentedString(oaUTH2PROVIDER)).append("\n");
    sb.append("    alLOWOAUTH2FOREXTERNALUSERS: ").append(toIndentedString(alLOWOAUTH2FOREXTERNALUSERS)).append("\n");
    sb.append("    LOGIN_REDIRECT_OVERRIDE: ").append(toIndentedString(LOGIN_REDIRECT_OVERRIDE)).append("\n");
    sb.append("    PENDO_TRACKING_STATE: ").append(toIndentedString(PENDO_TRACKING_STATE)).append("\n");
    sb.append("    CUSTOM_LOGIN_INFO: ").append(toIndentedString(CUSTOM_LOGIN_INFO)).append("\n");
    sb.append("    CUSTOM_LOGO: ").append(toIndentedString(CUSTOM_LOGO)).append("\n");
    sb.append("    MAX_UI_JOB_EVENTS: ").append(toIndentedString(MAX_UI_JOB_EVENTS)).append("\n");
    sb.append("    UI_LIVE_UPDATES_ENABLED: ").append(toIndentedString(UI_LIVE_UPDATES_ENABLED)).append("\n");
    sb.append("    AUTHENTICATION_BACKENDS: ").append(toIndentedString(AUTHENTICATION_BACKENDS)).append("\n");
    sb.append("    SOCIAL_AUTH_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_USER_FIELDS: ").append(toIndentedString(SOCIAL_AUTH_USER_FIELDS)).append("\n");
    sb.append("    AUTH_LDAP_SERVER_URI: ").append(toIndentedString(AUTH_LDAP_SERVER_URI)).append("\n");
    sb.append("    AUTH_LDAP_BIND_DN: ").append(toIndentedString(AUTH_LDAP_BIND_DN)).append("\n");
    sb.append("    AUTH_LDAP_BIND_PASSWORD: ").append(toIndentedString(AUTH_LDAP_BIND_PASSWORD)).append("\n");
    sb.append("    AUTH_LDAP_START_TLS: ").append(toIndentedString(AUTH_LDAP_START_TLS)).append("\n");
    sb.append("    AUTH_LDAP_CONNECTION_OPTIONS: ").append(toIndentedString(AUTH_LDAP_CONNECTION_OPTIONS)).append("\n");
    sb.append("    AUTH_LDAP_USER_SEARCH: ").append(toIndentedString(AUTH_LDAP_USER_SEARCH)).append("\n");
    sb.append("    AUTH_LDAP_USER_DN_TEMPLATE: ").append(toIndentedString(AUTH_LDAP_USER_DN_TEMPLATE)).append("\n");
    sb.append("    AUTH_LDAP_USER_ATTR_MAP: ").append(toIndentedString(AUTH_LDAP_USER_ATTR_MAP)).append("\n");
    sb.append("    AUTH_LDAP_GROUP_SEARCH: ").append(toIndentedString(AUTH_LDAP_GROUP_SEARCH)).append("\n");
    sb.append("    AUTH_LDAP_GROUP_TYPE: ").append(toIndentedString(AUTH_LDAP_GROUP_TYPE)).append("\n");
    sb.append("    AUTH_LDAP_GROUP_TYPE_PARAMS: ").append(toIndentedString(AUTH_LDAP_GROUP_TYPE_PARAMS)).append("\n");
    sb.append("    AUTH_LDAP_REQUIRE_GROUP: ").append(toIndentedString(AUTH_LDAP_REQUIRE_GROUP)).append("\n");
    sb.append("    AUTH_LDAP_DENY_GROUP: ").append(toIndentedString(AUTH_LDAP_DENY_GROUP)).append("\n");
    sb.append("    AUTH_LDAP_USER_FLAGS_BY_GROUP: ").append(toIndentedString(AUTH_LDAP_USER_FLAGS_BY_GROUP)).append("\n");
    sb.append("    AUTH_LDAP_ORGANIZATION_MAP: ").append(toIndentedString(AUTH_LDAP_ORGANIZATION_MAP)).append("\n");
    sb.append("    AUTH_LDAP_TEAM_MAP: ").append(toIndentedString(AUTH_LDAP_TEAM_MAP)).append("\n");
    sb.append("    auTHLDAP1SERVERURI: ").append(toIndentedString(auTHLDAP1SERVERURI)).append("\n");
    sb.append("    auTHLDAP1BINDDN: ").append(toIndentedString(auTHLDAP1BINDDN)).append("\n");
    sb.append("    auTHLDAP1BINDPASSWORD: ").append(toIndentedString(auTHLDAP1BINDPASSWORD)).append("\n");
    sb.append("    auTHLDAP1STARTTLS: ").append(toIndentedString(auTHLDAP1STARTTLS)).append("\n");
    sb.append("    auTHLDAP1CONNECTIONOPTIONS: ").append(toIndentedString(auTHLDAP1CONNECTIONOPTIONS)).append("\n");
    sb.append("    auTHLDAP1USERSEARCH: ").append(toIndentedString(auTHLDAP1USERSEARCH)).append("\n");
    sb.append("    auTHLDAP1USERDNTEMPLATE: ").append(toIndentedString(auTHLDAP1USERDNTEMPLATE)).append("\n");
    sb.append("    auTHLDAP1USERATTRMAP: ").append(toIndentedString(auTHLDAP1USERATTRMAP)).append("\n");
    sb.append("    auTHLDAP1GROUPSEARCH: ").append(toIndentedString(auTHLDAP1GROUPSEARCH)).append("\n");
    sb.append("    auTHLDAP1GROUPTYPE: ").append(toIndentedString(auTHLDAP1GROUPTYPE)).append("\n");
    sb.append("    auTHLDAP1GROUPTYPEPARAMS: ").append(toIndentedString(auTHLDAP1GROUPTYPEPARAMS)).append("\n");
    sb.append("    auTHLDAP1REQUIREGROUP: ").append(toIndentedString(auTHLDAP1REQUIREGROUP)).append("\n");
    sb.append("    auTHLDAP1DENYGROUP: ").append(toIndentedString(auTHLDAP1DENYGROUP)).append("\n");
    sb.append("    auTHLDAP1USERFLAGSBYGROUP: ").append(toIndentedString(auTHLDAP1USERFLAGSBYGROUP)).append("\n");
    sb.append("    auTHLDAP1ORGANIZATIONMAP: ").append(toIndentedString(auTHLDAP1ORGANIZATIONMAP)).append("\n");
    sb.append("    auTHLDAP1TEAMMAP: ").append(toIndentedString(auTHLDAP1TEAMMAP)).append("\n");
    sb.append("    auTHLDAP2SERVERURI: ").append(toIndentedString(auTHLDAP2SERVERURI)).append("\n");
    sb.append("    auTHLDAP2BINDDN: ").append(toIndentedString(auTHLDAP2BINDDN)).append("\n");
    sb.append("    auTHLDAP2BINDPASSWORD: ").append(toIndentedString(auTHLDAP2BINDPASSWORD)).append("\n");
    sb.append("    auTHLDAP2STARTTLS: ").append(toIndentedString(auTHLDAP2STARTTLS)).append("\n");
    sb.append("    auTHLDAP2CONNECTIONOPTIONS: ").append(toIndentedString(auTHLDAP2CONNECTIONOPTIONS)).append("\n");
    sb.append("    auTHLDAP2USERSEARCH: ").append(toIndentedString(auTHLDAP2USERSEARCH)).append("\n");
    sb.append("    auTHLDAP2USERDNTEMPLATE: ").append(toIndentedString(auTHLDAP2USERDNTEMPLATE)).append("\n");
    sb.append("    auTHLDAP2USERATTRMAP: ").append(toIndentedString(auTHLDAP2USERATTRMAP)).append("\n");
    sb.append("    auTHLDAP2GROUPSEARCH: ").append(toIndentedString(auTHLDAP2GROUPSEARCH)).append("\n");
    sb.append("    auTHLDAP2GROUPTYPE: ").append(toIndentedString(auTHLDAP2GROUPTYPE)).append("\n");
    sb.append("    auTHLDAP2GROUPTYPEPARAMS: ").append(toIndentedString(auTHLDAP2GROUPTYPEPARAMS)).append("\n");
    sb.append("    auTHLDAP2REQUIREGROUP: ").append(toIndentedString(auTHLDAP2REQUIREGROUP)).append("\n");
    sb.append("    auTHLDAP2DENYGROUP: ").append(toIndentedString(auTHLDAP2DENYGROUP)).append("\n");
    sb.append("    auTHLDAP2USERFLAGSBYGROUP: ").append(toIndentedString(auTHLDAP2USERFLAGSBYGROUP)).append("\n");
    sb.append("    auTHLDAP2ORGANIZATIONMAP: ").append(toIndentedString(auTHLDAP2ORGANIZATIONMAP)).append("\n");
    sb.append("    auTHLDAP2TEAMMAP: ").append(toIndentedString(auTHLDAP2TEAMMAP)).append("\n");
    sb.append("    auTHLDAP3SERVERURI: ").append(toIndentedString(auTHLDAP3SERVERURI)).append("\n");
    sb.append("    auTHLDAP3BINDDN: ").append(toIndentedString(auTHLDAP3BINDDN)).append("\n");
    sb.append("    auTHLDAP3BINDPASSWORD: ").append(toIndentedString(auTHLDAP3BINDPASSWORD)).append("\n");
    sb.append("    auTHLDAP3STARTTLS: ").append(toIndentedString(auTHLDAP3STARTTLS)).append("\n");
    sb.append("    auTHLDAP3CONNECTIONOPTIONS: ").append(toIndentedString(auTHLDAP3CONNECTIONOPTIONS)).append("\n");
    sb.append("    auTHLDAP3USERSEARCH: ").append(toIndentedString(auTHLDAP3USERSEARCH)).append("\n");
    sb.append("    auTHLDAP3USERDNTEMPLATE: ").append(toIndentedString(auTHLDAP3USERDNTEMPLATE)).append("\n");
    sb.append("    auTHLDAP3USERATTRMAP: ").append(toIndentedString(auTHLDAP3USERATTRMAP)).append("\n");
    sb.append("    auTHLDAP3GROUPSEARCH: ").append(toIndentedString(auTHLDAP3GROUPSEARCH)).append("\n");
    sb.append("    auTHLDAP3GROUPTYPE: ").append(toIndentedString(auTHLDAP3GROUPTYPE)).append("\n");
    sb.append("    auTHLDAP3GROUPTYPEPARAMS: ").append(toIndentedString(auTHLDAP3GROUPTYPEPARAMS)).append("\n");
    sb.append("    auTHLDAP3REQUIREGROUP: ").append(toIndentedString(auTHLDAP3REQUIREGROUP)).append("\n");
    sb.append("    auTHLDAP3DENYGROUP: ").append(toIndentedString(auTHLDAP3DENYGROUP)).append("\n");
    sb.append("    auTHLDAP3USERFLAGSBYGROUP: ").append(toIndentedString(auTHLDAP3USERFLAGSBYGROUP)).append("\n");
    sb.append("    auTHLDAP3ORGANIZATIONMAP: ").append(toIndentedString(auTHLDAP3ORGANIZATIONMAP)).append("\n");
    sb.append("    auTHLDAP3TEAMMAP: ").append(toIndentedString(auTHLDAP3TEAMMAP)).append("\n");
    sb.append("    auTHLDAP4SERVERURI: ").append(toIndentedString(auTHLDAP4SERVERURI)).append("\n");
    sb.append("    auTHLDAP4BINDDN: ").append(toIndentedString(auTHLDAP4BINDDN)).append("\n");
    sb.append("    auTHLDAP4BINDPASSWORD: ").append(toIndentedString(auTHLDAP4BINDPASSWORD)).append("\n");
    sb.append("    auTHLDAP4STARTTLS: ").append(toIndentedString(auTHLDAP4STARTTLS)).append("\n");
    sb.append("    auTHLDAP4CONNECTIONOPTIONS: ").append(toIndentedString(auTHLDAP4CONNECTIONOPTIONS)).append("\n");
    sb.append("    auTHLDAP4USERSEARCH: ").append(toIndentedString(auTHLDAP4USERSEARCH)).append("\n");
    sb.append("    auTHLDAP4USERDNTEMPLATE: ").append(toIndentedString(auTHLDAP4USERDNTEMPLATE)).append("\n");
    sb.append("    auTHLDAP4USERATTRMAP: ").append(toIndentedString(auTHLDAP4USERATTRMAP)).append("\n");
    sb.append("    auTHLDAP4GROUPSEARCH: ").append(toIndentedString(auTHLDAP4GROUPSEARCH)).append("\n");
    sb.append("    auTHLDAP4GROUPTYPE: ").append(toIndentedString(auTHLDAP4GROUPTYPE)).append("\n");
    sb.append("    auTHLDAP4GROUPTYPEPARAMS: ").append(toIndentedString(auTHLDAP4GROUPTYPEPARAMS)).append("\n");
    sb.append("    auTHLDAP4REQUIREGROUP: ").append(toIndentedString(auTHLDAP4REQUIREGROUP)).append("\n");
    sb.append("    auTHLDAP4DENYGROUP: ").append(toIndentedString(auTHLDAP4DENYGROUP)).append("\n");
    sb.append("    auTHLDAP4USERFLAGSBYGROUP: ").append(toIndentedString(auTHLDAP4USERFLAGSBYGROUP)).append("\n");
    sb.append("    auTHLDAP4ORGANIZATIONMAP: ").append(toIndentedString(auTHLDAP4ORGANIZATIONMAP)).append("\n");
    sb.append("    auTHLDAP4TEAMMAP: ").append(toIndentedString(auTHLDAP4TEAMMAP)).append("\n");
    sb.append("    auTHLDAP5SERVERURI: ").append(toIndentedString(auTHLDAP5SERVERURI)).append("\n");
    sb.append("    auTHLDAP5BINDDN: ").append(toIndentedString(auTHLDAP5BINDDN)).append("\n");
    sb.append("    auTHLDAP5BINDPASSWORD: ").append(toIndentedString(auTHLDAP5BINDPASSWORD)).append("\n");
    sb.append("    auTHLDAP5STARTTLS: ").append(toIndentedString(auTHLDAP5STARTTLS)).append("\n");
    sb.append("    auTHLDAP5CONNECTIONOPTIONS: ").append(toIndentedString(auTHLDAP5CONNECTIONOPTIONS)).append("\n");
    sb.append("    auTHLDAP5USERSEARCH: ").append(toIndentedString(auTHLDAP5USERSEARCH)).append("\n");
    sb.append("    auTHLDAP5USERDNTEMPLATE: ").append(toIndentedString(auTHLDAP5USERDNTEMPLATE)).append("\n");
    sb.append("    auTHLDAP5USERATTRMAP: ").append(toIndentedString(auTHLDAP5USERATTRMAP)).append("\n");
    sb.append("    auTHLDAP5GROUPSEARCH: ").append(toIndentedString(auTHLDAP5GROUPSEARCH)).append("\n");
    sb.append("    auTHLDAP5GROUPTYPE: ").append(toIndentedString(auTHLDAP5GROUPTYPE)).append("\n");
    sb.append("    auTHLDAP5GROUPTYPEPARAMS: ").append(toIndentedString(auTHLDAP5GROUPTYPEPARAMS)).append("\n");
    sb.append("    auTHLDAP5REQUIREGROUP: ").append(toIndentedString(auTHLDAP5REQUIREGROUP)).append("\n");
    sb.append("    auTHLDAP5DENYGROUP: ").append(toIndentedString(auTHLDAP5DENYGROUP)).append("\n");
    sb.append("    auTHLDAP5USERFLAGSBYGROUP: ").append(toIndentedString(auTHLDAP5USERFLAGSBYGROUP)).append("\n");
    sb.append("    auTHLDAP5ORGANIZATIONMAP: ").append(toIndentedString(auTHLDAP5ORGANIZATIONMAP)).append("\n");
    sb.append("    auTHLDAP5TEAMMAP: ").append(toIndentedString(auTHLDAP5TEAMMAP)).append("\n");
    sb.append("    RADIUS_SERVER: ").append(toIndentedString(RADIUS_SERVER)).append("\n");
    sb.append("    RADIUS_PORT: ").append(toIndentedString(RADIUS_PORT)).append("\n");
    sb.append("    RADIUS_SECRET: ").append(toIndentedString(RADIUS_SECRET)).append("\n");
    sb.append("    TACACSPLUS_HOST: ").append(toIndentedString(TACACSPLUS_HOST)).append("\n");
    sb.append("    TACACSPLUS_PORT: ").append(toIndentedString(TACACSPLUS_PORT)).append("\n");
    sb.append("    TACACSPLUS_SECRET: ").append(toIndentedString(TACACSPLUS_SECRET)).append("\n");
    sb.append("    TACACSPLUS_SESSION_TIMEOUT: ").append(toIndentedString(TACACSPLUS_SESSION_TIMEOUT)).append("\n");
    sb.append("    TACACSPLUS_AUTH_PROTOCOL: ").append(toIndentedString(TACACSPLUS_AUTH_PROTOCOL)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2CALLBACKURL: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2CALLBACKURL)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2KEY: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2KEY)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2SECRET: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2SECRET)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP)).append("\n");
    sb.append("    soCIALAUTHGOOGLEOAUTH2TEAMMAP: ").append(toIndentedString(soCIALAUTHGOOGLEOAUTH2TEAMMAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_NAME: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_NAME)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_ID: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_ID)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_API_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_API_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_NAME)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_ORG_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_API_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_SECRET)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ID)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_GITHUB_ENTERPRISE_TEAM_TEAM_MAP)).append("\n");
    sb.append("    soCIALAUTHAZUREADOAUTH2CALLBACKURL: ").append(toIndentedString(soCIALAUTHAZUREADOAUTH2CALLBACKURL)).append("\n");
    sb.append("    soCIALAUTHAZUREADOAUTH2KEY: ").append(toIndentedString(soCIALAUTHAZUREADOAUTH2KEY)).append("\n");
    sb.append("    soCIALAUTHAZUREADOAUTH2SECRET: ").append(toIndentedString(soCIALAUTHAZUREADOAUTH2SECRET)).append("\n");
    sb.append("    soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP: ").append(toIndentedString(soCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP)).append("\n");
    sb.append("    soCIALAUTHAZUREADOAUTH2TEAMMAP: ").append(toIndentedString(soCIALAUTHAZUREADOAUTH2TEAMMAP)).append("\n");
    sb.append("    SAML_AUTO_CREATE_OBJECTS: ").append(toIndentedString(SAML_AUTO_CREATE_OBJECTS)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_CALLBACK_URL: ").append(toIndentedString(SOCIAL_AUTH_SAML_CALLBACK_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_METADATA_URL: ").append(toIndentedString(SOCIAL_AUTH_SAML_METADATA_URL)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SP_ENTITY_ID: ").append(toIndentedString(SOCIAL_AUTH_SAML_SP_ENTITY_ID)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SP_PUBLIC_CERT: ").append(toIndentedString(SOCIAL_AUTH_SAML_SP_PUBLIC_CERT)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SP_PRIVATE_KEY: ").append(toIndentedString(SOCIAL_AUTH_SAML_SP_PRIVATE_KEY)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_ORG_INFO: ").append(toIndentedString(SOCIAL_AUTH_SAML_ORG_INFO)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_TECHNICAL_CONTACT: ").append(toIndentedString(SOCIAL_AUTH_SAML_TECHNICAL_CONTACT)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SUPPORT_CONTACT: ").append(toIndentedString(SOCIAL_AUTH_SAML_SUPPORT_CONTACT)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_ENABLED_IDPS: ").append(toIndentedString(SOCIAL_AUTH_SAML_ENABLED_IDPS)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SECURITY_CONFIG: ").append(toIndentedString(SOCIAL_AUTH_SAML_SECURITY_CONFIG)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_SP_EXTRA: ").append(toIndentedString(SOCIAL_AUTH_SAML_SP_EXTRA)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_EXTRA_DATA: ").append(toIndentedString(SOCIAL_AUTH_SAML_EXTRA_DATA)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_ORGANIZATION_MAP: ").append(toIndentedString(SOCIAL_AUTH_SAML_ORGANIZATION_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_TEAM_MAP: ").append(toIndentedString(SOCIAL_AUTH_SAML_TEAM_MAP)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_ORGANIZATION_ATTR: ").append(toIndentedString(SOCIAL_AUTH_SAML_ORGANIZATION_ATTR)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_TEAM_ATTR: ").append(toIndentedString(SOCIAL_AUTH_SAML_TEAM_ATTR)).append("\n");
    sb.append("    SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR: ").append(toIndentedString(SOCIAL_AUTH_SAML_USER_FLAGS_BY_ATTR)).append("\n");
    sb.append("    NAMED_URL_FORMATS: ").append(toIndentedString(NAMED_URL_FORMATS)).append("\n");
    sb.append("    NAMED_URL_GRAPH_NODES: ").append(toIndentedString(NAMED_URL_GRAPH_NODES)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

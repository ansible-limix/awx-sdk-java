/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OAuth2Application
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class OAuth2Application {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = "";

  @SerializedName("client_id")
  private String clientId = null;

  @SerializedName("client_secret")
  private String clientSecret = null;

  /**
   * Set to Public or Confidential depending on how secure the client device is.
   */
  @JsonAdapter(ClientTypeEnum.Adapter.class)
  public enum ClientTypeEnum {
    CONFIDENTIAL("confidential"),
    PUBLIC("public");

    private String value;

    ClientTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ClientTypeEnum fromValue(String input) {
      for (ClientTypeEnum b : ClientTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ClientTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ClientTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ClientTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("client_type")
  private ClientTypeEnum clientType = null;

  @SerializedName("redirect_uris")
  private String redirectUris = null;

  /**
   * The Grant type the user must use for acquire tokens for this application.
   */
  @JsonAdapter(AuthorizationGrantTypeEnum.Adapter.class)
  public enum AuthorizationGrantTypeEnum {
    AUTHORIZATION_CODE("authorization-code"),
    PASSWORD("password");

    private String value;

    AuthorizationGrantTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AuthorizationGrantTypeEnum fromValue(String input) {
      for (AuthorizationGrantTypeEnum b : AuthorizationGrantTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AuthorizationGrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationGrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AuthorizationGrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AuthorizationGrantTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("authorization_grant_type")
  private AuthorizationGrantTypeEnum authorizationGrantType = null;

  @SerializedName("skip_authorization")
  private Boolean skipAuthorization = false;

  @SerializedName("organization")
  private Integer organization = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public OAuth2Application related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public OAuth2Application summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

  public OAuth2Application name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public OAuth2Application description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Get clientId
   * @return clientId
  **/
  @Schema(description = "")
  public String getClientId() {
    return clientId;
  }

   /**
   * Used for more stringent verification of access to an application when creating a token.
   * @return clientSecret
  **/
  @Schema(description = "Used for more stringent verification of access to an application when creating a token.")
  public String getClientSecret() {
    return clientSecret;
  }

  public OAuth2Application clientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
    return this;
  }

   /**
   * Set to Public or Confidential depending on how secure the client device is.
   * @return clientType
  **/
  @Schema(required = true, description = "Set to Public or Confidential depending on how secure the client device is.")
  public ClientTypeEnum getClientType() {
    return clientType;
  }

  public void setClientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
  }

  public OAuth2Application redirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

   /**
   * Allowed URIs list, space separated
   * @return redirectUris
  **/
  @Schema(description = "Allowed URIs list, space separated")
  public String getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(String redirectUris) {
    this.redirectUris = redirectUris;
  }

  public OAuth2Application authorizationGrantType(AuthorizationGrantTypeEnum authorizationGrantType) {
    this.authorizationGrantType = authorizationGrantType;
    return this;
  }

   /**
   * The Grant type the user must use for acquire tokens for this application.
   * @return authorizationGrantType
  **/
  @Schema(required = true, description = "The Grant type the user must use for acquire tokens for this application.")
  public AuthorizationGrantTypeEnum getAuthorizationGrantType() {
    return authorizationGrantType;
  }

  public void setAuthorizationGrantType(AuthorizationGrantTypeEnum authorizationGrantType) {
    this.authorizationGrantType = authorizationGrantType;
  }

  public OAuth2Application skipAuthorization(Boolean skipAuthorization) {
    this.skipAuthorization = skipAuthorization;
    return this;
  }

   /**
   * Set True to skip authorization step for completely trusted applications.
   * @return skipAuthorization
  **/
  @Schema(description = "Set True to skip authorization step for completely trusted applications.")
  public Boolean isSkipAuthorization() {
    return skipAuthorization;
  }

  public void setSkipAuthorization(Boolean skipAuthorization) {
    this.skipAuthorization = skipAuthorization;
  }

  public OAuth2Application organization(Integer organization) {
    this.organization = organization;
    return this;
  }

   /**
   * Organization containing this application.
   * @return organization
  **/
  @Schema(required = true, description = "Organization containing this application.")
  public Integer getOrganization() {
    return organization;
  }

  public void setOrganization(Integer organization) {
    this.organization = organization;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2Application oauth2Application = (OAuth2Application) o;
    return Objects.equals(this.id, oauth2Application.id) &&
        Objects.equals(this.type, oauth2Application.type) &&
        Objects.equals(this.url, oauth2Application.url) &&
        Objects.equals(this.related, oauth2Application.related) &&
        Objects.equals(this.summaryFields, oauth2Application.summaryFields) &&
        Objects.equals(this.created, oauth2Application.created) &&
        Objects.equals(this.modified, oauth2Application.modified) &&
        Objects.equals(this.name, oauth2Application.name) &&
        Objects.equals(this.description, oauth2Application.description) &&
        Objects.equals(this.clientId, oauth2Application.clientId) &&
        Objects.equals(this.clientSecret, oauth2Application.clientSecret) &&
        Objects.equals(this.clientType, oauth2Application.clientType) &&
        Objects.equals(this.redirectUris, oauth2Application.redirectUris) &&
        Objects.equals(this.authorizationGrantType, oauth2Application.authorizationGrantType) &&
        Objects.equals(this.skipAuthorization, oauth2Application.skipAuthorization) &&
        Objects.equals(this.organization, oauth2Application.organization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, name, description, clientId, clientSecret, clientType, redirectUris, authorizationGrantType, skipAuthorization, organization);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2Application {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    authorizationGrantType: ").append(toIndentedString(authorizationGrantType)).append("\n");
    sb.append("    skipAuthorization: ").append(toIndentedString(skipAuthorization)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

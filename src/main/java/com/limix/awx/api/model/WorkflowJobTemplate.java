/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * WorkflowJobTemplate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class WorkflowJobTemplate {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = "";

  @SerializedName("last_job_run")
  private OffsetDateTime lastJobRun = null;

  @SerializedName("last_job_failed")
  private Boolean lastJobFailed = null;

  @SerializedName("next_job_run")
  private OffsetDateTime nextJobRun = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("new"),
    PENDING("pending"),
    WAITING("waiting"),
    RUNNING("running"),
    SUCCESSFUL("successful"),
    FAILED("failed"),
    ERROR("error"),
    CANCELED("canceled"),
    NEVER_UPDATED("never updated"),
    OK("ok"),
    MISSING("missing"),
    NONE("none"),
    UPDATING("updating");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("extra_vars")
  private String extraVars = "";

  @SerializedName("organization")
  private Integer organization = null;

  @SerializedName("survey_enabled")
  private Boolean surveyEnabled = false;

  @SerializedName("allow_simultaneous")
  private Boolean allowSimultaneous = false;

  @SerializedName("ask_variables_on_launch")
  private Boolean askVariablesOnLaunch = false;

  @SerializedName("inventory")
  private Integer inventory = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("scm_branch")
  private String scmBranch = null;

  @SerializedName("ask_inventory_on_launch")
  private Boolean askInventoryOnLaunch = false;

  @SerializedName("ask_scm_branch_on_launch")
  private Boolean askScmBranchOnLaunch = false;

  @SerializedName("ask_limit_on_launch")
  private Boolean askLimitOnLaunch = false;

  /**
   * Service that webhook requests will be accepted from
   */
  @JsonAdapter(WebhookServiceEnum.Adapter.class)
  public enum WebhookServiceEnum {
    GITHUB("github"),
    GITLAB("gitlab");

    private String value;

    WebhookServiceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static WebhookServiceEnum fromValue(String input) {
      for (WebhookServiceEnum b : WebhookServiceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<WebhookServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookServiceEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public WebhookServiceEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return WebhookServiceEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("webhook_service")
  private WebhookServiceEnum webhookService = null;

  @SerializedName("webhook_credential")
  private Integer webhookCredential = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public WorkflowJobTemplate related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public WorkflowJobTemplate summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

  public WorkflowJobTemplate name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowJobTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Get lastJobRun
   * @return lastJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getLastJobRun() {
    return lastJobRun;
  }

   /**
   * Get lastJobFailed
   * @return lastJobFailed
  **/
  @Schema(description = "")
  public Boolean isLastJobFailed() {
    return lastJobFailed;
  }

   /**
   * Get nextJobRun
   * @return nextJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getNextJobRun() {
    return nextJobRun;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public WorkflowJobTemplate extraVars(String extraVars) {
    this.extraVars = extraVars;
    return this;
  }

   /**
   * Get extraVars
   * @return extraVars
  **/
  @Schema(description = "")
  public String getExtraVars() {
    return extraVars;
  }

  public void setExtraVars(String extraVars) {
    this.extraVars = extraVars;
  }

  public WorkflowJobTemplate organization(Integer organization) {
    this.organization = organization;
    return this;
  }

   /**
   * The organization used to determine access to this template.
   * @return organization
  **/
  @Schema(description = "The organization used to determine access to this template.")
  public Integer getOrganization() {
    return organization;
  }

  public void setOrganization(Integer organization) {
    this.organization = organization;
  }

  public WorkflowJobTemplate surveyEnabled(Boolean surveyEnabled) {
    this.surveyEnabled = surveyEnabled;
    return this;
  }

   /**
   * Get surveyEnabled
   * @return surveyEnabled
  **/
  @Schema(description = "")
  public Boolean isSurveyEnabled() {
    return surveyEnabled;
  }

  public void setSurveyEnabled(Boolean surveyEnabled) {
    this.surveyEnabled = surveyEnabled;
  }

  public WorkflowJobTemplate allowSimultaneous(Boolean allowSimultaneous) {
    this.allowSimultaneous = allowSimultaneous;
    return this;
  }

   /**
   * Get allowSimultaneous
   * @return allowSimultaneous
  **/
  @Schema(description = "")
  public Boolean isAllowSimultaneous() {
    return allowSimultaneous;
  }

  public void setAllowSimultaneous(Boolean allowSimultaneous) {
    this.allowSimultaneous = allowSimultaneous;
  }

  public WorkflowJobTemplate askVariablesOnLaunch(Boolean askVariablesOnLaunch) {
    this.askVariablesOnLaunch = askVariablesOnLaunch;
    return this;
  }

   /**
   * Get askVariablesOnLaunch
   * @return askVariablesOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskVariablesOnLaunch() {
    return askVariablesOnLaunch;
  }

  public void setAskVariablesOnLaunch(Boolean askVariablesOnLaunch) {
    this.askVariablesOnLaunch = askVariablesOnLaunch;
  }

  public WorkflowJobTemplate inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Inventory applied as a prompt, assuming job template prompts for inventory
   * @return inventory
  **/
  @Schema(description = "Inventory applied as a prompt, assuming job template prompts for inventory")
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }

  public WorkflowJobTemplate limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public WorkflowJobTemplate scmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
    return this;
  }

   /**
   * Get scmBranch
   * @return scmBranch
  **/
  @Schema(description = "")
  public String getScmBranch() {
    return scmBranch;
  }

  public void setScmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
  }

  public WorkflowJobTemplate askInventoryOnLaunch(Boolean askInventoryOnLaunch) {
    this.askInventoryOnLaunch = askInventoryOnLaunch;
    return this;
  }

   /**
   * Get askInventoryOnLaunch
   * @return askInventoryOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskInventoryOnLaunch() {
    return askInventoryOnLaunch;
  }

  public void setAskInventoryOnLaunch(Boolean askInventoryOnLaunch) {
    this.askInventoryOnLaunch = askInventoryOnLaunch;
  }

  public WorkflowJobTemplate askScmBranchOnLaunch(Boolean askScmBranchOnLaunch) {
    this.askScmBranchOnLaunch = askScmBranchOnLaunch;
    return this;
  }

   /**
   * Get askScmBranchOnLaunch
   * @return askScmBranchOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskScmBranchOnLaunch() {
    return askScmBranchOnLaunch;
  }

  public void setAskScmBranchOnLaunch(Boolean askScmBranchOnLaunch) {
    this.askScmBranchOnLaunch = askScmBranchOnLaunch;
  }

  public WorkflowJobTemplate askLimitOnLaunch(Boolean askLimitOnLaunch) {
    this.askLimitOnLaunch = askLimitOnLaunch;
    return this;
  }

   /**
   * Get askLimitOnLaunch
   * @return askLimitOnLaunch
  **/
  @Schema(description = "")
  public Boolean isAskLimitOnLaunch() {
    return askLimitOnLaunch;
  }

  public void setAskLimitOnLaunch(Boolean askLimitOnLaunch) {
    this.askLimitOnLaunch = askLimitOnLaunch;
  }

  public WorkflowJobTemplate webhookService(WebhookServiceEnum webhookService) {
    this.webhookService = webhookService;
    return this;
  }

   /**
   * Service that webhook requests will be accepted from
   * @return webhookService
  **/
  @Schema(description = "Service that webhook requests will be accepted from")
  public WebhookServiceEnum getWebhookService() {
    return webhookService;
  }

  public void setWebhookService(WebhookServiceEnum webhookService) {
    this.webhookService = webhookService;
  }

  public WorkflowJobTemplate webhookCredential(Integer webhookCredential) {
    this.webhookCredential = webhookCredential;
    return this;
  }

   /**
   * Personal Access Token for posting back the status to the service API
   * @return webhookCredential
  **/
  @Schema(description = "Personal Access Token for posting back the status to the service API")
  public Integer getWebhookCredential() {
    return webhookCredential;
  }

  public void setWebhookCredential(Integer webhookCredential) {
    this.webhookCredential = webhookCredential;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowJobTemplate workflowJobTemplate = (WorkflowJobTemplate) o;
    return Objects.equals(this.id, workflowJobTemplate.id) &&
        Objects.equals(this.type, workflowJobTemplate.type) &&
        Objects.equals(this.url, workflowJobTemplate.url) &&
        Objects.equals(this.related, workflowJobTemplate.related) &&
        Objects.equals(this.summaryFields, workflowJobTemplate.summaryFields) &&
        Objects.equals(this.created, workflowJobTemplate.created) &&
        Objects.equals(this.modified, workflowJobTemplate.modified) &&
        Objects.equals(this.name, workflowJobTemplate.name) &&
        Objects.equals(this.description, workflowJobTemplate.description) &&
        Objects.equals(this.lastJobRun, workflowJobTemplate.lastJobRun) &&
        Objects.equals(this.lastJobFailed, workflowJobTemplate.lastJobFailed) &&
        Objects.equals(this.nextJobRun, workflowJobTemplate.nextJobRun) &&
        Objects.equals(this.status, workflowJobTemplate.status) &&
        Objects.equals(this.extraVars, workflowJobTemplate.extraVars) &&
        Objects.equals(this.organization, workflowJobTemplate.organization) &&
        Objects.equals(this.surveyEnabled, workflowJobTemplate.surveyEnabled) &&
        Objects.equals(this.allowSimultaneous, workflowJobTemplate.allowSimultaneous) &&
        Objects.equals(this.askVariablesOnLaunch, workflowJobTemplate.askVariablesOnLaunch) &&
        Objects.equals(this.inventory, workflowJobTemplate.inventory) &&
        Objects.equals(this.limit, workflowJobTemplate.limit) &&
        Objects.equals(this.scmBranch, workflowJobTemplate.scmBranch) &&
        Objects.equals(this.askInventoryOnLaunch, workflowJobTemplate.askInventoryOnLaunch) &&
        Objects.equals(this.askScmBranchOnLaunch, workflowJobTemplate.askScmBranchOnLaunch) &&
        Objects.equals(this.askLimitOnLaunch, workflowJobTemplate.askLimitOnLaunch) &&
        Objects.equals(this.webhookService, workflowJobTemplate.webhookService) &&
        Objects.equals(this.webhookCredential, workflowJobTemplate.webhookCredential);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, name, description, lastJobRun, lastJobFailed, nextJobRun, status, extraVars, organization, surveyEnabled, allowSimultaneous, askVariablesOnLaunch, inventory, limit, scmBranch, askInventoryOnLaunch, askScmBranchOnLaunch, askLimitOnLaunch, webhookService, webhookCredential);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowJobTemplate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastJobRun: ").append(toIndentedString(lastJobRun)).append("\n");
    sb.append("    lastJobFailed: ").append(toIndentedString(lastJobFailed)).append("\n");
    sb.append("    nextJobRun: ").append(toIndentedString(nextJobRun)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    extraVars: ").append(toIndentedString(extraVars)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    surveyEnabled: ").append(toIndentedString(surveyEnabled)).append("\n");
    sb.append("    allowSimultaneous: ").append(toIndentedString(allowSimultaneous)).append("\n");
    sb.append("    askVariablesOnLaunch: ").append(toIndentedString(askVariablesOnLaunch)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    scmBranch: ").append(toIndentedString(scmBranch)).append("\n");
    sb.append("    askInventoryOnLaunch: ").append(toIndentedString(askInventoryOnLaunch)).append("\n");
    sb.append("    askScmBranchOnLaunch: ").append(toIndentedString(askScmBranchOnLaunch)).append("\n");
    sb.append("    askLimitOnLaunch: ").append(toIndentedString(askLimitOnLaunch)).append("\n");
    sb.append("    webhookService: ").append(toIndentedString(webhookService)).append("\n");
    sb.append("    webhookCredential: ").append(toIndentedString(webhookCredential)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

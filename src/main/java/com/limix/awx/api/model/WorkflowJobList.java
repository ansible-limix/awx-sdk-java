/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.limix.awx.api.model.LaunchedBy;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * WorkflowJobList
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class WorkflowJobList {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = "";

  @SerializedName("unified_job_template")
  private String unifiedJobTemplate = null;

  /**
   * Gets or Sets launchType
   */
  @JsonAdapter(LaunchTypeEnum.Adapter.class)
  public enum LaunchTypeEnum {
    MANUAL("manual"),
    RELAUNCH("relaunch"),
    CALLBACK("callback"),
    SCHEDULED("scheduled"),
    DEPENDENCY("dependency"),
    WORKFLOW("workflow"),
    WEBHOOK("webhook"),
    SYNC("sync"),
    SCM("scm");

    private String value;

    LaunchTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static LaunchTypeEnum fromValue(String input) {
      for (LaunchTypeEnum b : LaunchTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<LaunchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public LaunchTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return LaunchTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("launch_type")
  private LaunchTypeEnum launchType = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("new"),
    PENDING("pending"),
    WAITING("waiting"),
    RUNNING("running"),
    SUCCESSFUL("successful"),
    FAILED("failed"),
    ERROR("error"),
    CANCELED("canceled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("failed")
  private Boolean failed = null;

  @SerializedName("started")
  private OffsetDateTime started = null;

  @SerializedName("finished")
  private OffsetDateTime finished = null;

  @SerializedName("canceled_on")
  private OffsetDateTime canceledOn = null;

  @SerializedName("elapsed")
  private String elapsed = null;

  @SerializedName("job_explanation")
  private String jobExplanation = null;

  @SerializedName("launched_by")
  private LaunchedBy launchedBy = null;

  @SerializedName("work_unit_id")
  private String workUnitId = null;

  @SerializedName("workflow_job_template")
  private String workflowJobTemplate = null;

  @SerializedName("extra_vars")
  private String extraVars = "";

  @SerializedName("allow_simultaneous")
  private Boolean allowSimultaneous = false;

  @SerializedName("job_template")
  private String jobTemplate = null;

  @SerializedName("is_sliced_job")
  private Boolean isSlicedJob = false;

  @SerializedName("inventory")
  private Integer inventory = null;

  @SerializedName("limit")
  private String limit = null;

  @SerializedName("scm_branch")
  private String scmBranch = null;

  /**
   * Service that webhook requests will be accepted from
   */
  @JsonAdapter(WebhookServiceEnum.Adapter.class)
  public enum WebhookServiceEnum {
    GITHUB("github"),
    GITLAB("gitlab");

    private String value;

    WebhookServiceEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static WebhookServiceEnum fromValue(String input) {
      for (WebhookServiceEnum b : WebhookServiceEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<WebhookServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookServiceEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public WebhookServiceEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return WebhookServiceEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("webhook_service")
  private WebhookServiceEnum webhookService = null;

  @SerializedName("webhook_credential")
  private Integer webhookCredential = null;

  @SerializedName("webhook_guid")
  private String webhookGuid = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public WorkflowJobList related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public WorkflowJobList summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

  public WorkflowJobList name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowJobList description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Get unifiedJobTemplate
   * @return unifiedJobTemplate
  **/
  @Schema(description = "")
  public String getUnifiedJobTemplate() {
    return unifiedJobTemplate;
  }

   /**
   * Get launchType
   * @return launchType
  **/
  @Schema(description = "")
  public LaunchTypeEnum getLaunchType() {
    return launchType;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

   /**
   * Get failed
   * @return failed
  **/
  @Schema(description = "")
  public Boolean isFailed() {
    return failed;
  }

   /**
   * The date and time the job was queued for starting.
   * @return started
  **/
  @Schema(description = "The date and time the job was queued for starting.")
  public OffsetDateTime getStarted() {
    return started;
  }

   /**
   * The date and time the job finished execution.
   * @return finished
  **/
  @Schema(description = "The date and time the job finished execution.")
  public OffsetDateTime getFinished() {
    return finished;
  }

   /**
   * The date and time when the cancel request was sent.
   * @return canceledOn
  **/
  @Schema(description = "The date and time when the cancel request was sent.")
  public OffsetDateTime getCanceledOn() {
    return canceledOn;
  }

   /**
   * Elapsed time in seconds that the job ran.
   * @return elapsed
  **/
  @Schema(description = "Elapsed time in seconds that the job ran.")
  public String getElapsed() {
    return elapsed;
  }

   /**
   * A status field to indicate the state of the job if it wasn&#x27;t able to run and capture stdout
   * @return jobExplanation
  **/
  @Schema(description = "A status field to indicate the state of the job if it wasn't able to run and capture stdout")
  public String getJobExplanation() {
    return jobExplanation;
  }

  public WorkflowJobList launchedBy(LaunchedBy launchedBy) {
    this.launchedBy = launchedBy;
    return this;
  }

   /**
   * Get launchedBy
   * @return launchedBy
  **/
  @Schema(description = "")
  public LaunchedBy getLaunchedBy() {
    return launchedBy;
  }

  public void setLaunchedBy(LaunchedBy launchedBy) {
    this.launchedBy = launchedBy;
  }

   /**
   * The Receptor work unit ID associated with this job.
   * @return workUnitId
  **/
  @Schema(description = "The Receptor work unit ID associated with this job.")
  public String getWorkUnitId() {
    return workUnitId;
  }

  public WorkflowJobList workflowJobTemplate(String workflowJobTemplate) {
    this.workflowJobTemplate = workflowJobTemplate;
    return this;
  }

   /**
   * Get workflowJobTemplate
   * @return workflowJobTemplate
  **/
  @Schema(description = "")
  public String getWorkflowJobTemplate() {
    return workflowJobTemplate;
  }

  public void setWorkflowJobTemplate(String workflowJobTemplate) {
    this.workflowJobTemplate = workflowJobTemplate;
  }

  public WorkflowJobList extraVars(String extraVars) {
    this.extraVars = extraVars;
    return this;
  }

   /**
   * Get extraVars
   * @return extraVars
  **/
  @Schema(description = "")
  public String getExtraVars() {
    return extraVars;
  }

  public void setExtraVars(String extraVars) {
    this.extraVars = extraVars;
  }

  public WorkflowJobList allowSimultaneous(Boolean allowSimultaneous) {
    this.allowSimultaneous = allowSimultaneous;
    return this;
  }

   /**
   * Get allowSimultaneous
   * @return allowSimultaneous
  **/
  @Schema(description = "")
  public Boolean isAllowSimultaneous() {
    return allowSimultaneous;
  }

  public void setAllowSimultaneous(Boolean allowSimultaneous) {
    this.allowSimultaneous = allowSimultaneous;
  }

  public WorkflowJobList jobTemplate(String jobTemplate) {
    this.jobTemplate = jobTemplate;
    return this;
  }

   /**
   * If automatically created for a sliced job run, the job template the workflow job was created from.
   * @return jobTemplate
  **/
  @Schema(description = "If automatically created for a sliced job run, the job template the workflow job was created from.")
  public String getJobTemplate() {
    return jobTemplate;
  }

  public void setJobTemplate(String jobTemplate) {
    this.jobTemplate = jobTemplate;
  }

  public WorkflowJobList isSlicedJob(Boolean isSlicedJob) {
    this.isSlicedJob = isSlicedJob;
    return this;
  }

   /**
   * Get isSlicedJob
   * @return isSlicedJob
  **/
  @Schema(description = "")
  public Boolean isIsSlicedJob() {
    return isSlicedJob;
  }

  public void setIsSlicedJob(Boolean isSlicedJob) {
    this.isSlicedJob = isSlicedJob;
  }

  public WorkflowJobList inventory(Integer inventory) {
    this.inventory = inventory;
    return this;
  }

   /**
   * Inventory applied as a prompt, assuming job template prompts for inventory
   * @return inventory
  **/
  @Schema(description = "Inventory applied as a prompt, assuming job template prompts for inventory")
  public Integer getInventory() {
    return inventory;
  }

  public void setInventory(Integer inventory) {
    this.inventory = inventory;
  }

  public WorkflowJobList limit(String limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public String getLimit() {
    return limit;
  }

  public void setLimit(String limit) {
    this.limit = limit;
  }

  public WorkflowJobList scmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
    return this;
  }

   /**
   * Get scmBranch
   * @return scmBranch
  **/
  @Schema(description = "")
  public String getScmBranch() {
    return scmBranch;
  }

  public void setScmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
  }

  public WorkflowJobList webhookService(WebhookServiceEnum webhookService) {
    this.webhookService = webhookService;
    return this;
  }

   /**
   * Service that webhook requests will be accepted from
   * @return webhookService
  **/
  @Schema(description = "Service that webhook requests will be accepted from")
  public WebhookServiceEnum getWebhookService() {
    return webhookService;
  }

  public void setWebhookService(WebhookServiceEnum webhookService) {
    this.webhookService = webhookService;
  }

  public WorkflowJobList webhookCredential(Integer webhookCredential) {
    this.webhookCredential = webhookCredential;
    return this;
  }

   /**
   * Personal Access Token for posting back the status to the service API
   * @return webhookCredential
  **/
  @Schema(description = "Personal Access Token for posting back the status to the service API")
  public Integer getWebhookCredential() {
    return webhookCredential;
  }

  public void setWebhookCredential(Integer webhookCredential) {
    this.webhookCredential = webhookCredential;
  }

  public WorkflowJobList webhookGuid(String webhookGuid) {
    this.webhookGuid = webhookGuid;
    return this;
  }

   /**
   * Unique identifier of the event that triggered this webhook
   * @return webhookGuid
  **/
  @Schema(description = "Unique identifier of the event that triggered this webhook")
  public String getWebhookGuid() {
    return webhookGuid;
  }

  public void setWebhookGuid(String webhookGuid) {
    this.webhookGuid = webhookGuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowJobList workflowJobList = (WorkflowJobList) o;
    return Objects.equals(this.id, workflowJobList.id) &&
        Objects.equals(this.type, workflowJobList.type) &&
        Objects.equals(this.url, workflowJobList.url) &&
        Objects.equals(this.related, workflowJobList.related) &&
        Objects.equals(this.summaryFields, workflowJobList.summaryFields) &&
        Objects.equals(this.created, workflowJobList.created) &&
        Objects.equals(this.modified, workflowJobList.modified) &&
        Objects.equals(this.name, workflowJobList.name) &&
        Objects.equals(this.description, workflowJobList.description) &&
        Objects.equals(this.unifiedJobTemplate, workflowJobList.unifiedJobTemplate) &&
        Objects.equals(this.launchType, workflowJobList.launchType) &&
        Objects.equals(this.status, workflowJobList.status) &&
        Objects.equals(this.failed, workflowJobList.failed) &&
        Objects.equals(this.started, workflowJobList.started) &&
        Objects.equals(this.finished, workflowJobList.finished) &&
        Objects.equals(this.canceledOn, workflowJobList.canceledOn) &&
        Objects.equals(this.elapsed, workflowJobList.elapsed) &&
        Objects.equals(this.jobExplanation, workflowJobList.jobExplanation) &&
        Objects.equals(this.launchedBy, workflowJobList.launchedBy) &&
        Objects.equals(this.workUnitId, workflowJobList.workUnitId) &&
        Objects.equals(this.workflowJobTemplate, workflowJobList.workflowJobTemplate) &&
        Objects.equals(this.extraVars, workflowJobList.extraVars) &&
        Objects.equals(this.allowSimultaneous, workflowJobList.allowSimultaneous) &&
        Objects.equals(this.jobTemplate, workflowJobList.jobTemplate) &&
        Objects.equals(this.isSlicedJob, workflowJobList.isSlicedJob) &&
        Objects.equals(this.inventory, workflowJobList.inventory) &&
        Objects.equals(this.limit, workflowJobList.limit) &&
        Objects.equals(this.scmBranch, workflowJobList.scmBranch) &&
        Objects.equals(this.webhookService, workflowJobList.webhookService) &&
        Objects.equals(this.webhookCredential, workflowJobList.webhookCredential) &&
        Objects.equals(this.webhookGuid, workflowJobList.webhookGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, name, description, unifiedJobTemplate, launchType, status, failed, started, finished, canceledOn, elapsed, jobExplanation, launchedBy, workUnitId, workflowJobTemplate, extraVars, allowSimultaneous, jobTemplate, isSlicedJob, inventory, limit, scmBranch, webhookService, webhookCredential, webhookGuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowJobList {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    unifiedJobTemplate: ").append(toIndentedString(unifiedJobTemplate)).append("\n");
    sb.append("    launchType: ").append(toIndentedString(launchType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    canceledOn: ").append(toIndentedString(canceledOn)).append("\n");
    sb.append("    elapsed: ").append(toIndentedString(elapsed)).append("\n");
    sb.append("    jobExplanation: ").append(toIndentedString(jobExplanation)).append("\n");
    sb.append("    launchedBy: ").append(toIndentedString(launchedBy)).append("\n");
    sb.append("    workUnitId: ").append(toIndentedString(workUnitId)).append("\n");
    sb.append("    workflowJobTemplate: ").append(toIndentedString(workflowJobTemplate)).append("\n");
    sb.append("    extraVars: ").append(toIndentedString(extraVars)).append("\n");
    sb.append("    allowSimultaneous: ").append(toIndentedString(allowSimultaneous)).append("\n");
    sb.append("    jobTemplate: ").append(toIndentedString(jobTemplate)).append("\n");
    sb.append("    isSlicedJob: ").append(toIndentedString(isSlicedJob)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    scmBranch: ").append(toIndentedString(scmBranch)).append("\n");
    sb.append("    webhookService: ").append(toIndentedString(webhookService)).append("\n");
    sb.append("    webhookCredential: ").append(toIndentedString(webhookCredential)).append("\n");
    sb.append("    webhookGuid: ").append(toIndentedString(webhookGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Project
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class Project {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = "";

  @SerializedName("local_path")
  private String localPath = null;

  /**
   * Specifies the source control system used to store the project.
   */
  @JsonAdapter(ScmTypeEnum.Adapter.class)
  public enum ScmTypeEnum {
    EMPTY(""),
    GIT("git"),
    SVN("svn"),
    INSIGHTS("insights"),
    ARCHIVE("archive");

    private String value;

    ScmTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ScmTypeEnum fromValue(String input) {
      for (ScmTypeEnum b : ScmTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ScmTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScmTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ScmTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ScmTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("scm_type")
  private ScmTypeEnum scmType = ScmTypeEnum.EMPTY;

  @SerializedName("scm_url")
  private String scmUrl = "";

  @SerializedName("scm_branch")
  private String scmBranch = "";

  @SerializedName("scm_refspec")
  private String scmRefspec = "";

  @SerializedName("scm_clean")
  private Boolean scmClean = false;

  @SerializedName("scm_track_submodules")
  private Boolean scmTrackSubmodules = false;

  @SerializedName("scm_delete_on_update")
  private Boolean scmDeleteOnUpdate = false;

  @SerializedName("credential")
  private Integer credential = null;

  @SerializedName("timeout")
  private Integer timeout = null;

  @SerializedName("scm_revision")
  private String scmRevision = null;

  @SerializedName("last_job_run")
  private OffsetDateTime lastJobRun = null;

  @SerializedName("last_job_failed")
  private Boolean lastJobFailed = null;

  @SerializedName("next_job_run")
  private OffsetDateTime nextJobRun = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("new"),
    PENDING("pending"),
    WAITING("waiting"),
    RUNNING("running"),
    SUCCESSFUL("successful"),
    FAILED("failed"),
    ERROR("error"),
    CANCELED("canceled"),
    NEVER_UPDATED("never updated"),
    OK("ok"),
    MISSING("missing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("organization")
  private Integer organization = null;

  @SerializedName("scm_update_on_launch")
  private Boolean scmUpdateOnLaunch = false;

  @SerializedName("scm_update_cache_timeout")
  private Integer scmUpdateCacheTimeout = null;

  @SerializedName("allow_override")
  private Boolean allowOverride = false;

  @SerializedName("custom_virtualenv")
  private String customVirtualenv = null;

  @SerializedName("default_environment")
  private Integer defaultEnvironment = null;

  @SerializedName("last_update_failed")
  private Boolean lastUpdateFailed = null;

  @SerializedName("last_updated")
  private OffsetDateTime lastUpdated = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public Project related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public Project summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

  public Project name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Project description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Project localPath(String localPath) {
    this.localPath = localPath;
    return this;
  }

   /**
   * Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.
   * @return localPath
  **/
  @Schema(description = "Local path (relative to PROJECTS_ROOT) containing playbooks and related files for this project.")
  public String getLocalPath() {
    return localPath;
  }

  public void setLocalPath(String localPath) {
    this.localPath = localPath;
  }

  public Project scmType(ScmTypeEnum scmType) {
    this.scmType = scmType;
    return this;
  }

   /**
   * Specifies the source control system used to store the project.
   * @return scmType
  **/
  @Schema(description = "Specifies the source control system used to store the project.")
  public ScmTypeEnum getScmType() {
    return scmType;
  }

  public void setScmType(ScmTypeEnum scmType) {
    this.scmType = scmType;
  }

  public Project scmUrl(String scmUrl) {
    this.scmUrl = scmUrl;
    return this;
  }

   /**
   * The location where the project is stored.
   * @return scmUrl
  **/
  @Schema(description = "The location where the project is stored.")
  public String getScmUrl() {
    return scmUrl;
  }

  public void setScmUrl(String scmUrl) {
    this.scmUrl = scmUrl;
  }

  public Project scmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
    return this;
  }

   /**
   * Specific branch, tag or commit to checkout.
   * @return scmBranch
  **/
  @Schema(description = "Specific branch, tag or commit to checkout.")
  public String getScmBranch() {
    return scmBranch;
  }

  public void setScmBranch(String scmBranch) {
    this.scmBranch = scmBranch;
  }

  public Project scmRefspec(String scmRefspec) {
    this.scmRefspec = scmRefspec;
    return this;
  }

   /**
   * For git projects, an additional refspec to fetch.
   * @return scmRefspec
  **/
  @Schema(description = "For git projects, an additional refspec to fetch.")
  public String getScmRefspec() {
    return scmRefspec;
  }

  public void setScmRefspec(String scmRefspec) {
    this.scmRefspec = scmRefspec;
  }

  public Project scmClean(Boolean scmClean) {
    this.scmClean = scmClean;
    return this;
  }

   /**
   * Discard any local changes before syncing the project.
   * @return scmClean
  **/
  @Schema(description = "Discard any local changes before syncing the project.")
  public Boolean isScmClean() {
    return scmClean;
  }

  public void setScmClean(Boolean scmClean) {
    this.scmClean = scmClean;
  }

  public Project scmTrackSubmodules(Boolean scmTrackSubmodules) {
    this.scmTrackSubmodules = scmTrackSubmodules;
    return this;
  }

   /**
   * Track submodules latest commits on defined branch.
   * @return scmTrackSubmodules
  **/
  @Schema(description = "Track submodules latest commits on defined branch.")
  public Boolean isScmTrackSubmodules() {
    return scmTrackSubmodules;
  }

  public void setScmTrackSubmodules(Boolean scmTrackSubmodules) {
    this.scmTrackSubmodules = scmTrackSubmodules;
  }

  public Project scmDeleteOnUpdate(Boolean scmDeleteOnUpdate) {
    this.scmDeleteOnUpdate = scmDeleteOnUpdate;
    return this;
  }

   /**
   * Delete the project before syncing.
   * @return scmDeleteOnUpdate
  **/
  @Schema(description = "Delete the project before syncing.")
  public Boolean isScmDeleteOnUpdate() {
    return scmDeleteOnUpdate;
  }

  public void setScmDeleteOnUpdate(Boolean scmDeleteOnUpdate) {
    this.scmDeleteOnUpdate = scmDeleteOnUpdate;
  }

  public Project credential(Integer credential) {
    this.credential = credential;
    return this;
  }

   /**
   * Get credential
   * @return credential
  **/
  @Schema(description = "")
  public Integer getCredential() {
    return credential;
  }

  public void setCredential(Integer credential) {
    this.credential = credential;
  }

  public Project timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * The amount of time (in seconds) to run before the task is canceled.
   * minimum: -2147483648
   * maximum: 2147483647
   * @return timeout
  **/
  @Schema(description = "The amount of time (in seconds) to run before the task is canceled.")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

   /**
   * The last revision fetched by a project update
   * @return scmRevision
  **/
  @Schema(description = "The last revision fetched by a project update")
  public String getScmRevision() {
    return scmRevision;
  }

   /**
   * Get lastJobRun
   * @return lastJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getLastJobRun() {
    return lastJobRun;
  }

   /**
   * Get lastJobFailed
   * @return lastJobFailed
  **/
  @Schema(description = "")
  public Boolean isLastJobFailed() {
    return lastJobFailed;
  }

   /**
   * Get nextJobRun
   * @return nextJobRun
  **/
  @Schema(description = "")
  public OffsetDateTime getNextJobRun() {
    return nextJobRun;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public StatusEnum getStatus() {
    return status;
  }

  public Project organization(Integer organization) {
    this.organization = organization;
    return this;
  }

   /**
   * The organization used to determine access to this template.
   * @return organization
  **/
  @Schema(description = "The organization used to determine access to this template.")
  public Integer getOrganization() {
    return organization;
  }

  public void setOrganization(Integer organization) {
    this.organization = organization;
  }

  public Project scmUpdateOnLaunch(Boolean scmUpdateOnLaunch) {
    this.scmUpdateOnLaunch = scmUpdateOnLaunch;
    return this;
  }

   /**
   * Update the project when a job is launched that uses the project.
   * @return scmUpdateOnLaunch
  **/
  @Schema(description = "Update the project when a job is launched that uses the project.")
  public Boolean isScmUpdateOnLaunch() {
    return scmUpdateOnLaunch;
  }

  public void setScmUpdateOnLaunch(Boolean scmUpdateOnLaunch) {
    this.scmUpdateOnLaunch = scmUpdateOnLaunch;
  }

  public Project scmUpdateCacheTimeout(Integer scmUpdateCacheTimeout) {
    this.scmUpdateCacheTimeout = scmUpdateCacheTimeout;
    return this;
  }

   /**
   * The number of seconds after the last project update ran that a new project update will be launched as a job dependency.
   * minimum: 0
   * maximum: 2147483647
   * @return scmUpdateCacheTimeout
  **/
  @Schema(description = "The number of seconds after the last project update ran that a new project update will be launched as a job dependency.")
  public Integer getScmUpdateCacheTimeout() {
    return scmUpdateCacheTimeout;
  }

  public void setScmUpdateCacheTimeout(Integer scmUpdateCacheTimeout) {
    this.scmUpdateCacheTimeout = scmUpdateCacheTimeout;
  }

  public Project allowOverride(Boolean allowOverride) {
    this.allowOverride = allowOverride;
    return this;
  }

   /**
   * Allow changing the SCM branch or revision in a job template that uses this project.
   * @return allowOverride
  **/
  @Schema(description = "Allow changing the SCM branch or revision in a job template that uses this project.")
  public Boolean isAllowOverride() {
    return allowOverride;
  }

  public void setAllowOverride(Boolean allowOverride) {
    this.allowOverride = allowOverride;
  }

   /**
   * Local absolute file path containing a custom Python virtualenv to use
   * @return customVirtualenv
  **/
  @Schema(description = "Local absolute file path containing a custom Python virtualenv to use")
  public String getCustomVirtualenv() {
    return customVirtualenv;
  }

  public Project defaultEnvironment(Integer defaultEnvironment) {
    this.defaultEnvironment = defaultEnvironment;
    return this;
  }

   /**
   * The default execution environment for jobs run using this project.
   * @return defaultEnvironment
  **/
  @Schema(description = "The default execution environment for jobs run using this project.")
  public Integer getDefaultEnvironment() {
    return defaultEnvironment;
  }

  public void setDefaultEnvironment(Integer defaultEnvironment) {
    this.defaultEnvironment = defaultEnvironment;
  }

   /**
   * Get lastUpdateFailed
   * @return lastUpdateFailed
  **/
  @Schema(description = "")
  public Boolean isLastUpdateFailed() {
    return lastUpdateFailed;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.id, project.id) &&
        Objects.equals(this.type, project.type) &&
        Objects.equals(this.url, project.url) &&
        Objects.equals(this.related, project.related) &&
        Objects.equals(this.summaryFields, project.summaryFields) &&
        Objects.equals(this.created, project.created) &&
        Objects.equals(this.modified, project.modified) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.description, project.description) &&
        Objects.equals(this.localPath, project.localPath) &&
        Objects.equals(this.scmType, project.scmType) &&
        Objects.equals(this.scmUrl, project.scmUrl) &&
        Objects.equals(this.scmBranch, project.scmBranch) &&
        Objects.equals(this.scmRefspec, project.scmRefspec) &&
        Objects.equals(this.scmClean, project.scmClean) &&
        Objects.equals(this.scmTrackSubmodules, project.scmTrackSubmodules) &&
        Objects.equals(this.scmDeleteOnUpdate, project.scmDeleteOnUpdate) &&
        Objects.equals(this.credential, project.credential) &&
        Objects.equals(this.timeout, project.timeout) &&
        Objects.equals(this.scmRevision, project.scmRevision) &&
        Objects.equals(this.lastJobRun, project.lastJobRun) &&
        Objects.equals(this.lastJobFailed, project.lastJobFailed) &&
        Objects.equals(this.nextJobRun, project.nextJobRun) &&
        Objects.equals(this.status, project.status) &&
        Objects.equals(this.organization, project.organization) &&
        Objects.equals(this.scmUpdateOnLaunch, project.scmUpdateOnLaunch) &&
        Objects.equals(this.scmUpdateCacheTimeout, project.scmUpdateCacheTimeout) &&
        Objects.equals(this.allowOverride, project.allowOverride) &&
        Objects.equals(this.customVirtualenv, project.customVirtualenv) &&
        Objects.equals(this.defaultEnvironment, project.defaultEnvironment) &&
        Objects.equals(this.lastUpdateFailed, project.lastUpdateFailed) &&
        Objects.equals(this.lastUpdated, project.lastUpdated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, name, description, localPath, scmType, scmUrl, scmBranch, scmRefspec, scmClean, scmTrackSubmodules, scmDeleteOnUpdate, credential, timeout, scmRevision, lastJobRun, lastJobFailed, nextJobRun, status, organization, scmUpdateOnLaunch, scmUpdateCacheTimeout, allowOverride, customVirtualenv, defaultEnvironment, lastUpdateFailed, lastUpdated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    localPath: ").append(toIndentedString(localPath)).append("\n");
    sb.append("    scmType: ").append(toIndentedString(scmType)).append("\n");
    sb.append("    scmUrl: ").append(toIndentedString(scmUrl)).append("\n");
    sb.append("    scmBranch: ").append(toIndentedString(scmBranch)).append("\n");
    sb.append("    scmRefspec: ").append(toIndentedString(scmRefspec)).append("\n");
    sb.append("    scmClean: ").append(toIndentedString(scmClean)).append("\n");
    sb.append("    scmTrackSubmodules: ").append(toIndentedString(scmTrackSubmodules)).append("\n");
    sb.append("    scmDeleteOnUpdate: ").append(toIndentedString(scmDeleteOnUpdate)).append("\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    scmRevision: ").append(toIndentedString(scmRevision)).append("\n");
    sb.append("    lastJobRun: ").append(toIndentedString(lastJobRun)).append("\n");
    sb.append("    lastJobFailed: ").append(toIndentedString(lastJobFailed)).append("\n");
    sb.append("    nextJobRun: ").append(toIndentedString(nextJobRun)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    scmUpdateOnLaunch: ").append(toIndentedString(scmUpdateOnLaunch)).append("\n");
    sb.append("    scmUpdateCacheTimeout: ").append(toIndentedString(scmUpdateCacheTimeout)).append("\n");
    sb.append("    allowOverride: ").append(toIndentedString(allowOverride)).append("\n");
    sb.append("    customVirtualenv: ").append(toIndentedString(customVirtualenv)).append("\n");
    sb.append("    defaultEnvironment: ").append(toIndentedString(defaultEnvironment)).append("\n");
    sb.append("    lastUpdateFailed: ").append(toIndentedString(lastUpdateFailed)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

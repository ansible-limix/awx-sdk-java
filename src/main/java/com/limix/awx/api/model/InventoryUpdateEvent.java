/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * InventoryUpdateEvent
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class InventoryUpdateEvent {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("event")
  private String event = null;

  @SerializedName("counter")
  private Integer counter = null;

  @SerializedName("event_display")
  private String eventDisplay = null;

  @SerializedName("event_data")
  private Object eventData = null;

  @SerializedName("failed")
  private String failed = null;

  @SerializedName("changed")
  private String changed = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("stdout")
  private String stdout = null;

  @SerializedName("start_line")
  private Integer startLine = null;

  @SerializedName("end_line")
  private Integer endLine = null;

  @SerializedName("verbosity")
  private Integer verbosity = null;

  @SerializedName("inventory_update")
  private String inventoryUpdate = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public InventoryUpdateEvent related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public InventoryUpdateEvent summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

   /**
   * Get event
   * @return event
  **/
  @Schema(description = "")
  public String getEvent() {
    return event;
  }

   /**
   * Get counter
   * minimum: 0
   * @return counter
  **/
  @Schema(description = "")
  public Integer getCounter() {
    return counter;
  }

   /**
   * Get eventDisplay
   * @return eventDisplay
  **/
  @Schema(description = "")
  public String getEventDisplay() {
    return eventDisplay;
  }

  public InventoryUpdateEvent eventData(Object eventData) {
    this.eventData = eventData;
    return this;
  }

   /**
   * Get eventData
   * @return eventData
  **/
  @Schema(description = "")
  public Object getEventData() {
    return eventData;
  }

  public void setEventData(Object eventData) {
    this.eventData = eventData;
  }

   /**
   * Get failed
   * @return failed
  **/
  @Schema(description = "")
  public String getFailed() {
    return failed;
  }

   /**
   * Get changed
   * @return changed
  **/
  @Schema(description = "")
  public String getChanged() {
    return changed;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

   /**
   * Get stdout
   * @return stdout
  **/
  @Schema(description = "")
  public String getStdout() {
    return stdout;
  }

   /**
   * Get startLine
   * minimum: 0
   * @return startLine
  **/
  @Schema(description = "")
  public Integer getStartLine() {
    return startLine;
  }

   /**
   * Get endLine
   * minimum: 0
   * @return endLine
  **/
  @Schema(description = "")
  public Integer getEndLine() {
    return endLine;
  }

   /**
   * Get verbosity
   * minimum: 0
   * @return verbosity
  **/
  @Schema(description = "")
  public Integer getVerbosity() {
    return verbosity;
  }

   /**
   * Get inventoryUpdate
   * @return inventoryUpdate
  **/
  @Schema(description = "")
  public String getInventoryUpdate() {
    return inventoryUpdate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryUpdateEvent inventoryUpdateEvent = (InventoryUpdateEvent) o;
    return Objects.equals(this.id, inventoryUpdateEvent.id) &&
        Objects.equals(this.type, inventoryUpdateEvent.type) &&
        Objects.equals(this.url, inventoryUpdateEvent.url) &&
        Objects.equals(this.related, inventoryUpdateEvent.related) &&
        Objects.equals(this.summaryFields, inventoryUpdateEvent.summaryFields) &&
        Objects.equals(this.created, inventoryUpdateEvent.created) &&
        Objects.equals(this.modified, inventoryUpdateEvent.modified) &&
        Objects.equals(this.event, inventoryUpdateEvent.event) &&
        Objects.equals(this.counter, inventoryUpdateEvent.counter) &&
        Objects.equals(this.eventDisplay, inventoryUpdateEvent.eventDisplay) &&
        Objects.equals(this.eventData, inventoryUpdateEvent.eventData) &&
        Objects.equals(this.failed, inventoryUpdateEvent.failed) &&
        Objects.equals(this.changed, inventoryUpdateEvent.changed) &&
        Objects.equals(this.uuid, inventoryUpdateEvent.uuid) &&
        Objects.equals(this.stdout, inventoryUpdateEvent.stdout) &&
        Objects.equals(this.startLine, inventoryUpdateEvent.startLine) &&
        Objects.equals(this.endLine, inventoryUpdateEvent.endLine) &&
        Objects.equals(this.verbosity, inventoryUpdateEvent.verbosity) &&
        Objects.equals(this.inventoryUpdate, inventoryUpdateEvent.inventoryUpdate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, event, counter, eventDisplay, eventData, failed, changed, uuid, stdout, startLine, endLine, verbosity, inventoryUpdate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryUpdateEvent {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    counter: ").append(toIndentedString(counter)).append("\n");
    sb.append("    eventDisplay: ").append(toIndentedString(eventDisplay)).append("\n");
    sb.append("    eventData: ").append(toIndentedString(eventData)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    changed: ").append(toIndentedString(changed)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    stdout: ").append(toIndentedString(stdout)).append("\n");
    sb.append("    startLine: ").append(toIndentedString(startLine)).append("\n");
    sb.append("    endLine: ").append(toIndentedString(endLine)).append("\n");
    sb.append("    verbosity: ").append(toIndentedString(verbosity)).append("\n");
    sb.append("    inventoryUpdate: ").append(toIndentedString(inventoryUpdate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

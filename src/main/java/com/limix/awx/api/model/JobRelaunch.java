/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * JobRelaunch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class JobRelaunch {
  @SerializedName("passwords_needed_to_start")
  private String passwordsNeededToStart = null;

  @SerializedName("retry_counts")
  private String retryCounts = null;

  /**
   * Gets or Sets hosts
   */
  @JsonAdapter(HostsEnum.Adapter.class)
  public enum HostsEnum {
    ALL("all"),
    FAILED("failed");

    private String value;

    HostsEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static HostsEnum fromValue(String input) {
      for (HostsEnum b : HostsEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<HostsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostsEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public HostsEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return HostsEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("hosts")
  private HostsEnum hosts = HostsEnum.ALL;

  @SerializedName("credential_passwords")
  private String credentialPasswords = null;

   /**
   * Get passwordsNeededToStart
   * @return passwordsNeededToStart
  **/
  @Schema(description = "")
  public String getPasswordsNeededToStart() {
    return passwordsNeededToStart;
  }

   /**
   * Get retryCounts
   * @return retryCounts
  **/
  @Schema(description = "")
  public String getRetryCounts() {
    return retryCounts;
  }

  public JobRelaunch hosts(HostsEnum hosts) {
    this.hosts = hosts;
    return this;
  }

   /**
   * Get hosts
   * @return hosts
  **/
  @Schema(description = "")
  public HostsEnum getHosts() {
    return hosts;
  }

  public void setHosts(HostsEnum hosts) {
    this.hosts = hosts;
  }

  public JobRelaunch credentialPasswords(String credentialPasswords) {
    this.credentialPasswords = credentialPasswords;
    return this;
  }

   /**
   * Get credentialPasswords
   * @return credentialPasswords
  **/
  @Schema(required = true, description = "")
  public String getCredentialPasswords() {
    return credentialPasswords;
  }

  public void setCredentialPasswords(String credentialPasswords) {
    this.credentialPasswords = credentialPasswords;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobRelaunch jobRelaunch = (JobRelaunch) o;
    return Objects.equals(this.passwordsNeededToStart, jobRelaunch.passwordsNeededToStart) &&
        Objects.equals(this.retryCounts, jobRelaunch.retryCounts) &&
        Objects.equals(this.hosts, jobRelaunch.hosts) &&
        Objects.equals(this.credentialPasswords, jobRelaunch.credentialPasswords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(passwordsNeededToStart, retryCounts, hosts, credentialPasswords);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobRelaunch {\n");
    
    sb.append("    passwordsNeededToStart: ").append(toIndentedString(passwordsNeededToStart)).append("\n");
    sb.append("    retryCounts: ").append(toIndentedString(retryCounts)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    credentialPasswords: ").append(toIndentedString(credentialPasswords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * JobHostSummary
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class JobHostSummary {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("job")
  private String job = null;

  @SerializedName("host")
  private Integer host = null;

  @SerializedName("host_name")
  private String hostName = "";

  @SerializedName("changed")
  private Integer changed = null;

  @SerializedName("dark")
  private Integer dark = null;

  @SerializedName("failures")
  private Integer failures = null;

  @SerializedName("ok")
  private Integer ok = null;

  @SerializedName("processed")
  private Integer processed = null;

  @SerializedName("skipped")
  private Integer skipped = null;

  @SerializedName("failed")
  private Boolean failed = null;

  @SerializedName("ignored")
  private Integer ignored = null;

  @SerializedName("rescued")
  private Integer rescued = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public JobHostSummary related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public JobHostSummary summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

   /**
   * Get job
   * @return job
  **/
  @Schema(description = "")
  public String getJob() {
    return job;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public Integer getHost() {
    return host;
  }

   /**
   * Get hostName
   * @return hostName
  **/
  @Schema(description = "")
  public String getHostName() {
    return hostName;
  }

   /**
   * Get changed
   * minimum: 0
   * @return changed
  **/
  @Schema(description = "")
  public Integer getChanged() {
    return changed;
  }

   /**
   * Get dark
   * minimum: 0
   * @return dark
  **/
  @Schema(description = "")
  public Integer getDark() {
    return dark;
  }

   /**
   * Get failures
   * minimum: 0
   * @return failures
  **/
  @Schema(description = "")
  public Integer getFailures() {
    return failures;
  }

   /**
   * Get ok
   * minimum: 0
   * @return ok
  **/
  @Schema(description = "")
  public Integer getOk() {
    return ok;
  }

   /**
   * Get processed
   * minimum: 0
   * @return processed
  **/
  @Schema(description = "")
  public Integer getProcessed() {
    return processed;
  }

   /**
   * Get skipped
   * minimum: 0
   * @return skipped
  **/
  @Schema(description = "")
  public Integer getSkipped() {
    return skipped;
  }

   /**
   * Get failed
   * @return failed
  **/
  @Schema(description = "")
  public Boolean isFailed() {
    return failed;
  }

   /**
   * Get ignored
   * minimum: 0
   * @return ignored
  **/
  @Schema(description = "")
  public Integer getIgnored() {
    return ignored;
  }

   /**
   * Get rescued
   * minimum: 0
   * @return rescued
  **/
  @Schema(description = "")
  public Integer getRescued() {
    return rescued;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobHostSummary jobHostSummary = (JobHostSummary) o;
    return Objects.equals(this.id, jobHostSummary.id) &&
        Objects.equals(this.type, jobHostSummary.type) &&
        Objects.equals(this.url, jobHostSummary.url) &&
        Objects.equals(this.related, jobHostSummary.related) &&
        Objects.equals(this.summaryFields, jobHostSummary.summaryFields) &&
        Objects.equals(this.created, jobHostSummary.created) &&
        Objects.equals(this.modified, jobHostSummary.modified) &&
        Objects.equals(this.job, jobHostSummary.job) &&
        Objects.equals(this.host, jobHostSummary.host) &&
        Objects.equals(this.hostName, jobHostSummary.hostName) &&
        Objects.equals(this.changed, jobHostSummary.changed) &&
        Objects.equals(this.dark, jobHostSummary.dark) &&
        Objects.equals(this.failures, jobHostSummary.failures) &&
        Objects.equals(this.ok, jobHostSummary.ok) &&
        Objects.equals(this.processed, jobHostSummary.processed) &&
        Objects.equals(this.skipped, jobHostSummary.skipped) &&
        Objects.equals(this.failed, jobHostSummary.failed) &&
        Objects.equals(this.ignored, jobHostSummary.ignored) &&
        Objects.equals(this.rescued, jobHostSummary.rescued);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, created, modified, job, host, hostName, changed, dark, failures, ok, processed, skipped, failed, ignored, rescued);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobHostSummary {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    changed: ").append(toIndentedString(changed)).append("\n");
    sb.append("    dark: ").append(toIndentedString(dark)).append("\n");
    sb.append("    failures: ").append(toIndentedString(failures)).append("\n");
    sb.append("    ok: ").append(toIndentedString(ok)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    rescued: ").append(toIndentedString(rescued)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

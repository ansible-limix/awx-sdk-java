/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * ActivityStream
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class ActivityStream {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("summary_fields")
  private Object summaryFields = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  /**
   * The action taken with respect to the given object(s).
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    CREATE("create"),
    UPDATE("update"),
    DELETE("delete"),
    ASSOCIATE("associate"),
    DISASSOCIATE("disassociate");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String input) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OperationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("operation")
  private OperationEnum operation = null;

  @SerializedName("changes")
  private String changes = null;

  @SerializedName("object1")
  private String object1 = null;

  @SerializedName("object2")
  private String object2 = null;

  @SerializedName("object_association")
  private String objectAssociation = null;

  @SerializedName("action_node")
  private String actionNode = null;

  @SerializedName("object_type")
  private String objectType = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public ActivityStream related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

  public ActivityStream summaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
    return this;
  }

   /**
   * Get summaryFields
   * @return summaryFields
  **/
  @Schema(description = "")
  public Object getSummaryFields() {
    return summaryFields;
  }

  public void setSummaryFields(Object summaryFields) {
    this.summaryFields = summaryFields;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @Schema(description = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public ActivityStream operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * The action taken with respect to the given object(s).
   * @return operation
  **/
  @Schema(required = true, description = "The action taken with respect to the given object(s).")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }

   /**
   * A summary of the new and changed values when an object is created, updated, or deleted
   * @return changes
  **/
  @Schema(description = "A summary of the new and changed values when an object is created, updated, or deleted")
  public String getChanges() {
    return changes;
  }

  public ActivityStream object1(String object1) {
    this.object1 = object1;
    return this;
  }

   /**
   * For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2.
   * @return object1
  **/
  @Schema(required = true, description = "For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2.")
  public String getObject1() {
    return object1;
  }

  public void setObject1(String object1) {
    this.object1 = object1;
  }

  public ActivityStream object2(String object2) {
    this.object2 = object2;
    return this;
  }

   /**
   * Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with.
   * @return object2
  **/
  @Schema(required = true, description = "Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with.")
  public String getObject2() {
    return object2;
  }

  public void setObject2(String object2) {
    this.object2 = object2;
  }

   /**
   * When present, shows the field name of the role or relationship that changed.
   * @return objectAssociation
  **/
  @Schema(description = "When present, shows the field name of the role or relationship that changed.")
  public String getObjectAssociation() {
    return objectAssociation;
  }

   /**
   * The cluster node the activity took place on.
   * @return actionNode
  **/
  @Schema(description = "The cluster node the activity took place on.")
  public String getActionNode() {
    return actionNode;
  }

   /**
   * When present, shows the model on which the role or relationship was defined.
   * @return objectType
  **/
  @Schema(description = "When present, shows the model on which the role or relationship was defined.")
  public String getObjectType() {
    return objectType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivityStream activityStream = (ActivityStream) o;
    return Objects.equals(this.id, activityStream.id) &&
        Objects.equals(this.type, activityStream.type) &&
        Objects.equals(this.url, activityStream.url) &&
        Objects.equals(this.related, activityStream.related) &&
        Objects.equals(this.summaryFields, activityStream.summaryFields) &&
        Objects.equals(this.timestamp, activityStream.timestamp) &&
        Objects.equals(this.operation, activityStream.operation) &&
        Objects.equals(this.changes, activityStream.changes) &&
        Objects.equals(this.object1, activityStream.object1) &&
        Objects.equals(this.object2, activityStream.object2) &&
        Objects.equals(this.objectAssociation, activityStream.objectAssociation) &&
        Objects.equals(this.actionNode, activityStream.actionNode) &&
        Objects.equals(this.objectType, activityStream.objectType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, summaryFields, timestamp, operation, changes, object1, object2, objectAssociation, actionNode, objectType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivityStream {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    summaryFields: ").append(toIndentedString(summaryFields)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    object1: ").append(toIndentedString(object1)).append("\n");
    sb.append("    object2: ").append(toIndentedString(object2)).append("\n");
    sb.append("    objectAssociation: ").append(toIndentedString(objectAssociation)).append("\n");
    sb.append("    actionNode: ").append(toIndentedString(actionNode)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.limix.awx.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;
/**
 * Instance
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-05-25T17:26:39.970+08:00[Asia/Shanghai]")
public class Instance {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("related")
  private Object related = null;

  @SerializedName("uuid")
  private String uuid = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("created")
  private String created = null;

  @SerializedName("modified")
  private String modified = null;

  @SerializedName("last_seen")
  private OffsetDateTime lastSeen = null;

  @SerializedName("last_health_check")
  private OffsetDateTime lastHealthCheck = null;

  @SerializedName("errors")
  private String errors = null;

  @SerializedName("capacity_adjustment")
  private String capacityAdjustment = "1.00";

  @SerializedName("version")
  private String version = null;

  @SerializedName("capacity")
  private Integer capacity = null;

  @SerializedName("consumed_capacity")
  private String consumedCapacity = null;

  @SerializedName("percent_capacity_remaining")
  private String percentCapacityRemaining = null;

  @SerializedName("jobs_running")
  private Integer jobsRunning = null;

  @SerializedName("jobs_total")
  private Integer jobsTotal = null;

  @SerializedName("cpu")
  private String cpu = null;

  @SerializedName("memory")
  private Integer memory = null;

  @SerializedName("cpu_capacity")
  private Integer cpuCapacity = null;

  @SerializedName("mem_capacity")
  private Integer memCapacity = null;

  @SerializedName("enabled")
  private Boolean enabled = true;

  @SerializedName("managed_by_policy")
  private Boolean managedByPolicy = true;

  /**
   * Gets or Sets nodeType
   */
  @JsonAdapter(NodeTypeEnum.Adapter.class)
  public enum NodeTypeEnum {
    CONTROL("control"),
    EXECUTION("execution"),
    HYBRID("hybrid"),
    HOP("hop");

    private String value;

    NodeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NodeTypeEnum fromValue(String input) {
      for (NodeTypeEnum b : NodeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NodeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("node_type")
  private NodeTypeEnum nodeType = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

   /**
   * Get url
   * @return url
  **/
  @Schema(description = "")
  public String getUrl() {
    return url;
  }

  public Instance related(Object related) {
    this.related = related;
    return this;
  }

   /**
   * Get related
   * @return related
  **/
  @Schema(description = "")
  public Object getRelated() {
    return related;
  }

  public void setRelated(Object related) {
    this.related = related;
  }

   /**
   * Get uuid
   * @return uuid
  **/
  @Schema(description = "")
  public String getUuid() {
    return uuid;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @Schema(description = "")
  public String getHostname() {
    return hostname;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public String getCreated() {
    return created;
  }

   /**
   * Get modified
   * @return modified
  **/
  @Schema(description = "")
  public String getModified() {
    return modified;
  }

   /**
   * Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes.
   * @return lastSeen
  **/
  @Schema(description = "Last time instance ran its heartbeat task for main cluster nodes. Last known connection to receptor mesh for execution nodes.")
  public OffsetDateTime getLastSeen() {
    return lastSeen;
  }

   /**
   * Last time a health check was ran on this instance to refresh cpu, memory, and capacity.
   * @return lastHealthCheck
  **/
  @Schema(description = "Last time a health check was ran on this instance to refresh cpu, memory, and capacity.")
  public OffsetDateTime getLastHealthCheck() {
    return lastHealthCheck;
  }

   /**
   * Any error details from the last health check.
   * @return errors
  **/
  @Schema(description = "Any error details from the last health check.")
  public String getErrors() {
    return errors;
  }

  public Instance capacityAdjustment(String capacityAdjustment) {
    this.capacityAdjustment = capacityAdjustment;
    return this;
  }

   /**
   * Get capacityAdjustment
   * @return capacityAdjustment
  **/
  @Schema(description = "")
  public String getCapacityAdjustment() {
    return capacityAdjustment;
  }

  public void setCapacityAdjustment(String capacityAdjustment) {
    this.capacityAdjustment = capacityAdjustment;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(description = "")
  public String getVersion() {
    return version;
  }

   /**
   * Get capacity
   * minimum: 0
   * @return capacity
  **/
  @Schema(description = "")
  public Integer getCapacity() {
    return capacity;
  }

   /**
   * Get consumedCapacity
   * @return consumedCapacity
  **/
  @Schema(description = "")
  public String getConsumedCapacity() {
    return consumedCapacity;
  }

   /**
   * Get percentCapacityRemaining
   * @return percentCapacityRemaining
  **/
  @Schema(description = "")
  public String getPercentCapacityRemaining() {
    return percentCapacityRemaining;
  }

   /**
   * Count of jobs in the running or waiting state that are targeted for this instance
   * @return jobsRunning
  **/
  @Schema(description = "Count of jobs in the running or waiting state that are targeted for this instance")
  public Integer getJobsRunning() {
    return jobsRunning;
  }

   /**
   * Count of all jobs that target this instance
   * @return jobsTotal
  **/
  @Schema(description = "Count of all jobs that target this instance")
  public Integer getJobsTotal() {
    return jobsTotal;
  }

   /**
   * Get cpu
   * @return cpu
  **/
  @Schema(description = "")
  public String getCpu() {
    return cpu;
  }

   /**
   * Total system memory of this instance in bytes.
   * @return memory
  **/
  @Schema(description = "Total system memory of this instance in bytes.")
  public Integer getMemory() {
    return memory;
  }

   /**
   * Get cpuCapacity
   * @return cpuCapacity
  **/
  @Schema(description = "")
  public Integer getCpuCapacity() {
    return cpuCapacity;
  }

   /**
   * Get memCapacity
   * @return memCapacity
  **/
  @Schema(description = "")
  public Integer getMemCapacity() {
    return memCapacity;
  }

  public Instance enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Instance managedByPolicy(Boolean managedByPolicy) {
    this.managedByPolicy = managedByPolicy;
    return this;
  }

   /**
   * Get managedByPolicy
   * @return managedByPolicy
  **/
  @Schema(description = "")
  public Boolean isManagedByPolicy() {
    return managedByPolicy;
  }

  public void setManagedByPolicy(Boolean managedByPolicy) {
    this.managedByPolicy = managedByPolicy;
  }

   /**
   * Get nodeType
   * @return nodeType
  **/
  @Schema(description = "")
  public NodeTypeEnum getNodeType() {
    return nodeType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.id, instance.id) &&
        Objects.equals(this.type, instance.type) &&
        Objects.equals(this.url, instance.url) &&
        Objects.equals(this.related, instance.related) &&
        Objects.equals(this.uuid, instance.uuid) &&
        Objects.equals(this.hostname, instance.hostname) &&
        Objects.equals(this.created, instance.created) &&
        Objects.equals(this.modified, instance.modified) &&
        Objects.equals(this.lastSeen, instance.lastSeen) &&
        Objects.equals(this.lastHealthCheck, instance.lastHealthCheck) &&
        Objects.equals(this.errors, instance.errors) &&
        Objects.equals(this.capacityAdjustment, instance.capacityAdjustment) &&
        Objects.equals(this.version, instance.version) &&
        Objects.equals(this.capacity, instance.capacity) &&
        Objects.equals(this.consumedCapacity, instance.consumedCapacity) &&
        Objects.equals(this.percentCapacityRemaining, instance.percentCapacityRemaining) &&
        Objects.equals(this.jobsRunning, instance.jobsRunning) &&
        Objects.equals(this.jobsTotal, instance.jobsTotal) &&
        Objects.equals(this.cpu, instance.cpu) &&
        Objects.equals(this.memory, instance.memory) &&
        Objects.equals(this.cpuCapacity, instance.cpuCapacity) &&
        Objects.equals(this.memCapacity, instance.memCapacity) &&
        Objects.equals(this.enabled, instance.enabled) &&
        Objects.equals(this.managedByPolicy, instance.managedByPolicy) &&
        Objects.equals(this.nodeType, instance.nodeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, url, related, uuid, hostname, created, modified, lastSeen, lastHealthCheck, errors, capacityAdjustment, version, capacity, consumedCapacity, percentCapacityRemaining, jobsRunning, jobsTotal, cpu, memory, cpuCapacity, memCapacity, enabled, managedByPolicy, nodeType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    related: ").append(toIndentedString(related)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    lastHealthCheck: ").append(toIndentedString(lastHealthCheck)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    capacityAdjustment: ").append(toIndentedString(capacityAdjustment)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    consumedCapacity: ").append(toIndentedString(consumedCapacity)).append("\n");
    sb.append("    percentCapacityRemaining: ").append(toIndentedString(percentCapacityRemaining)).append("\n");
    sb.append("    jobsRunning: ").append(toIndentedString(jobsRunning)).append("\n");
    sb.append("    jobsTotal: ").append(toIndentedString(jobsTotal)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    memory: ").append(toIndentedString(memory)).append("\n");
    sb.append("    cpuCapacity: ").append(toIndentedString(cpuCapacity)).append("\n");
    sb.append("    memCapacity: ").append(toIndentedString(memCapacity)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    managedByPolicy: ").append(toIndentedString(managedByPolicy)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
